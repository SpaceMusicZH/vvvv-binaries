/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin XeGTAO_MainPass_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDispatch [Size: 96]
@C    ThreadGroupCountGlobal_id10 => ComputeShaderBase.ThreadGroupCountGlobal
@C    ViewMatrix_id20 => XeGTAO_MainPass_ComputeFX.ViewMatrix
@C    SliceCount_id21 => XeGTAO_MainPass_ComputeFX.SliceCount
@C    StepsPerSlice_id22 => XeGTAO_MainPass_ComputeFX.StepsPerSlice
@C    UseNormalMap_id23 => XeGTAO_MainPass_ComputeFX.UseNormalMap
***************************
******  Resources    ******
***************************
@R    PointClampSampler_id12 => XeGTAO_Common.PointClampSampler [Stage: Compute, Slot: (0-0)]
@R    GTAOConsts_id11 => XeGTAO_Common.GTAOConsts [Stage: Compute, Slot: (0-0)]
@R    SrcWorkingDepth_id14 => XeGTAO_MainPass_ComputeFX.SrcWorkingDepth [Stage: Compute, Slot: (1-1)]
@R    SrcNormalmap_id15 => XeGTAO_MainPass_ComputeFX.SrcNormalmap [Stage: Compute, Slot: (2-2)]
@R    SrcHilbertLUT_id16 => XeGTAO_MainPass_ComputeFX.SrcHilbertLUT [Stage: Compute, Slot: (3-3)]
@R    OutWorkingAOTerm_id17 => XeGTAO_MainPass_ComputeFX.OutWorkingAOTerm [Stage: Compute, Slot: (0-0)]
@R    PerDispatch => PerDispatch [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    XeGTAO_MainPass_ComputeFX => 00551197294b263ca0d819007c458bc7
@S    XeGTAO_Common => 5520834cac689aa7bb9df583ac43c08d
***************************
*****     Stages      *****
***************************
@G    Compute => 33c4bdf7da6e0db48a85190fc88e7b4c
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDispatch
// {
//
//   int3 ThreadGroupCountGlobal_id10;  // Offset:    0 Size:    12 [unused]
//   float4x4 ViewMatrix_id20;          // Offset:   16 Size:    64
//   float SliceCount_id21;             // Offset:   80 Size:     4
//      = 0x40000000 
//   float StepsPerSlice_id22;          // Offset:   84 Size:     4
//      = 0x40000000 
//   int UseNormalMap_id23;             // Offset:   88 Size:     4
//
// }
//
// Resource bind info for GTAOConsts_id11
// {
//
//   struct GTAOConstants
//   {
//       
//       int2 ViewportSize;             // Offset:    0
//       float2 ViewportPixelSize;      // Offset:    8
//       float2 DepthUnpackConsts;      // Offset:   16
//       float2 CameraTanHalfFOV;       // Offset:   24
//       float2 NDCToViewMul;           // Offset:   32
//       float2 NDCToViewAdd;           // Offset:   40
//       float2 NDCToViewMul_x_PixelSize;// Offset:   48
//       float EffectRadius;            // Offset:   56
//       float EffectFalloffRange;      // Offset:   60
//       float RadiusMultiplier;        // Offset:   64
//       float Padding0;                // Offset:   68
//       float FinalValuePower;         // Offset:   72
//       float DenoiseBlurBeta;         // Offset:   76
//       float SampleDistributionPower; // Offset:   80
//       float ThinOccluderCompensation;// Offset:   84
//       float DepthMIPSamplingOffset;  // Offset:   88
//       int NoiseIndex;                // Offset:   92
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PointClampSampler_id12            sampler      NA          NA             s0      1 
// GTAOConsts_id11                   texture  struct         r/o             t0      1 
// SrcWorkingDepth_id14              texture   float          2d             t1      1 
// SrcNormalmap_id15                 texture  float4          2d             t2      1 
// SrcHilbertLUT_id16                texture    uint          2d             t3      1 
// OutWorkingAOTerm_id17                 UAV    uint          2d             u0      1 
// PerDispatch                       cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_structured t0, 96
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (uint,uint,uint,uint) t3
dcl_uav_typed_texture2d (uint,uint,uint,uint) u0
dcl_input vThreadID.xy
dcl_temps 16
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 182 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_ce53eab7d419f5ebd32c117d94e327ca.hlsl"
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.xyzw, l(0), l(80), t0.xyzw  // r0.x <- sampleDistributionPower; r0.y <- thinOccluderCompensation

#line 232
and r1.xy, vThreadID.xyxx, l(63, 63, 0, 0)
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(uint,uint,uint,uint) r1.x, r1.xyzw, t3.xyzw  // r1.x <- index

#line 233
and r0.w, r0.w, l(63)
imad r0.w, l(288), r0.w, r1.x  // r0.w <- index

#line 234
utof r0.w, r0.w
mad r1.xy, r0.wwww, l(0.754878, 0.569840, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
frc r1.xy, r1.xyxx  // r1.x <- <SpatioTemporalNoise_id28 return value>.x; r1.y <- <SpatioTemporalNoise_id28 return value>.y

#line 110
utof r1.zw, vThreadID.xxxy
add r2.xy, r1.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r2.zw, l(0), l(8), t0.xxxy
mul r3.xy, r2.zwzz, r2.xyxx  // r3.x <- normalizedScreenPos.x; r3.y <- normalizedScreenPos.y

#line 111
mul r1.zw, r1.zzzw, r2.zzzw
gather4_indexable(texture2d)(float,float,float,float) r4.xyz, r1.zwzz, t1.xyzw, s0.x  // r4.x <- valuesUL.x; r4.y <- valuesUL.y; r4.z <- valuesUL.z

#line 120
if_z cb0[5].z

#line 112
  gather4_aoffimmi_indexable(1,1,0)(texture2d)(float,float,float,float) r5.zw, r1.zwzz, t1.ywzx, s0.x  // r5.w <- valuesBR.x; r5.z <- valuesBR.z

#line 101
  mov r5.xy, r4.xzxx
  add r6.xyzw, -r4.yyyy, r5.xyzw  // r6.x <- edgesLRTB.x; r6.y <- edgesLRTB.z; r6.z <- edgesLRTB.y; r6.w <- edgesLRTB.w

#line 103
  add r1.zw, -r6.xxxy, r6.zzzw
  mul r7.xy, r1.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)  // r7.x <- slopeLR; r7.y <- slopeTB

#line 104
  mov r7.zw, -r7.xxxy
  add r7.xyzw, r6.xyzw, r7.xyzw  // r7.x <- edgesLRTBSlopeAdjusted.x; r7.y <- edgesLRTBSlopeAdjusted.z; r7.z <- edgesLRTBSlopeAdjusted.y; r7.w <- edgesLRTBSlopeAdjusted.w

#line 105
  min r6.xyzw, |r6.xyzw|, |r7.xyzw|

#line 106
  mul r0.w, r4.y, l(0.011000)
  div r6.xyzw, r6.xyzw, r0.wwww
  add_sat r6.xyzw, -r6.xyzw, l(1.250000, 1.250000, 1.250000, 1.250000)  // r6.x <- <XeGTAO_CalculateEdges_id8 return value>.x; r6.y <- <XeGTAO_CalculateEdges_id8 return value>.z; r6.z <- <XeGTAO_CalculateEdges_id8 return value>.y; r6.w <- <XeGTAO_CalculateEdges_id8 return value>.w

#line 95
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(32), t0.xyzw
  mad r1.zw, r7.xxxy, r3.xxxy, r7.zzzw
  mul r8.yz, r4.yyyy, r1.zzwz  // r8.y <- ret.x; r8.z <- ret.y

#line 124
  mad r9.xyzw, r2.zwzw, l(-1.000000, 0.000000, 1.000000, 0.000000), r3.xyxy

#line 95
  mad r9.xyzw, r7.xyxy, r9.xyzw, r7.zwzw
  mul r10.xz, r4.xxxx, r9.yyxy  // r10.x <- ret.y; r10.z <- ret.x; r10.x <- ret.y; r10.z <- ret.x
  mul r9.yz, r5.zzzz, r9.zzwz  // r9.y <- ret.x; r9.z <- ret.y

#line 126
  mad r11.xyzw, r2.zwzw, l(0.000000, -1.000000, 0.000000, 1.000000), r3.xyxy

#line 95
  mad r7.xyzw, r7.xyxy, r11.xyzw, r7.zwzw
  mul r11.yz, r4.zzzz, r7.xxyx  // r11.y <- ret.x; r11.z <- ret.y; r11.y <- ret.x; r11.z <- ret.y
  mul r7.yz, r5.wwww, r7.zzwz  // r7.y <- ret.x; r7.z <- ret.y

#line 83
  mad r6.xyzw, r6.xyzw, r6.yzwx, l(0.010000, 0.010000, 0.010000, 0.010000)
  min r6.xyzw, r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // r6.x <- acceptedNormals.x; r6.y <- acceptedNormals.y; r6.z <- acceptedNormals.z; r6.w <- acceptedNormals.w

#line 84
  mov r8.x, r4.y
  mov r10.y, r5.x
  add r4.xzw, -r8.zzxy, r10.xxyz
  dp3 r0.w, r4.xzwx, r4.xzwx
  rsq r0.w, r0.w
  mul r4.xzw, r0.wwww, r4.xxzw  // r4.x <- pixLPos.y; r4.z <- pixLPos.z; r4.w <- pixLPos.x

#line 85
  mov r9.x, r5.z
  add r9.xyz, -r8.xyzx, r9.xyzx
  dp3 r0.w, r9.xyzx, r9.xyzx
  rsq r0.w, r0.w
  mul r9.xyz, r0.wwww, r9.xyzx  // r9.x <- pixRPos.z; r9.y <- pixRPos.x; r9.z <- pixRPos.y

#line 86
  mov r11.x, r5.y
  add r5.xyz, -r8.xyzx, r11.xyzx
  dp3 r0.w, r5.xyzx, r5.xyzx
  rsq r0.w, r0.w
  mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- pixTPos.z; r5.y <- pixTPos.x; r5.z <- pixTPos.y

#line 87
  mov r7.x, r5.w
  add r7.xyz, -r8.xyzx, r7.xyzx
  dp3 r0.w, r7.xyzx, r7.xyzx
  rsq r0.w, r0.w
  mul r7.xyz, r0.wwww, r7.xyzx  // r7.x <- pixBPos.z; r7.y <- pixBPos.x; r7.z <- pixBPos.y

#line 88
  mul r8.xyz, r4.zwxz, r5.zxyz
  mad r8.xyz, r4.xzwx, r5.xyzx, -r8.xyzx
  mul r10.xyz, r9.zxyz, r5.xyzx
  mad r5.xyz, r5.zxyz, r9.xyzx, -r10.xyzx
  mul r5.xyz, r5.xyzx, r6.yyyy
  mad r5.xyz, r6.xxxx, r8.xyzx, r5.xyzx
  mul r8.xyz, r7.zxyz, r9.xyzx
  mad r8.xyz, r9.zxyz, r7.xyzx, -r8.xyzx
  mad r5.xyz, r6.zzzz, r8.xyzx, r5.xyzx
  mul r6.xyz, r4.xzwx, r7.xyzx
  mad r4.xzw, r7.zzxy, r4.zzwx, -r6.xxyz
  mad r4.xzw, r6.wwww, r4.xxzw, r5.xxyz  // r4.x <- pixelNormal.x; r4.z <- pixelNormal.y; r4.w <- pixelNormal.z

#line 89
  dp3 r0.w, r4.xzwx, r4.xzwx
  rsq r0.w, r0.w
  mul r4.xzw, r0.wwww, r4.xxzw

#line 128
else   // Prior locations: r4.x <- valuesUL.x; r4.z <- valuesUL.z

#line 223
  mov r5.xy, vThreadID.xyxx
  mov r5.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyzw, t2.xyzw  // r5.x <- packedInput.x; r5.y <- packedInput.y; r5.z <- packedInput.z

#line 224
  dp3 r0.w, r5.xyzx, r5.xyzx
  ne r0.w, r0.w, l(0.000000)

#line 225
  mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r1.z, r5.xyzx, r5.xyzx
  rsq r1.z, r1.z
  mul r5.xyz, r1.zzzz, r5.xyzx  // r5.x <- normal.x; r5.y <- normal.y; r5.z <- normal.z

#line 226
  dp3 r6.x, r5.xyzx, cb0[1].xyzx
  dp3 r6.y, r5.xyzx, cb0[2].xyzx
  dp3 r6.z, r5.xyzx, cb0[3].xyzx
  mul r5.xyz, r6.xyzx, l(1.000000, 1.000000, -1.000000, 0.000000)
  movc r4.xzw, r0.wwww, r5.xxyz, l(-1.000000,0,-1.000000,-1.000000)  // r4.x <- viewspaceNormal.x; r4.z <- viewspaceNormal.y; r4.w <- viewspaceNormal.z

#line 128
endif 

#line 129
mul r5.z, r4.y, l(0.999990)  // r5.z <- viewspaceZ

#line 95
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r6.xyzw, l(0), l(32), t0.xyzw
mad r1.zw, r6.xxxy, r3.xxxy, r6.zzzw
mul r5.xy, r5.zzzz, r1.zwzz  // r5.x <- ret.x; r5.y <- ret.y

#line 131
dp3 r0.w, -r5.xyzx, -r5.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, -r5.xyzx  // r3.x <- viewVec.x; r3.y <- viewVec.y; r3.z <- viewVec.z

#line 132
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r7.xyz, l(0), l(56), t0.xyzx
mul r0.w, r7.z, r7.x  // r0.w <- effectRadius

#line 135
mul r1.z, r0.w, r7.y  // r1.z <- falloffRange

#line 136
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.w, l(0), l(60), t0.xxxx
add r1.w, -r1.w, l(1.000000)
mul r1.w, r0.w, r1.w  // r1.w <- falloffFrom

#line 137
div r3.w, l(-1.000000), r1.z  // r3.w <- falloffMul

#line 138
div r1.z, r1.w, r1.z
add r1.z, r1.z, l(1.000000)  // r1.z <- falloffAdd

#line 146
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r1.w, l(0), l(48), t0.xxxx
mul r1.w, r1.w, r5.z  // r1.w <- pixelDirRBViewspaceSizeAtCenterZ.x

#line 147
div r0.w, r0.w, r1.w  // r0.w <- screenspaceRadius

#line 148
add r1.w, -r0.w, l(10.000000)
mul_sat r1.w, r1.w, l(0.010000)
mul r1.w, r1.w, l(0.500000)  // r1.w <- visibility

#line 149
div r4.y, l(1.300000), r0.w  // r4.y <- minS

#line 173
lt r5.w, l(0.000000), cb0[5].y

#line 196
add r0.y, r0.y, l(1.000000)

#line 182
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r7.x, l(0), l(88), t0.xxxx

#line 160
mov r8.w, l(0)

#line 151
mov r7.y, r1.w  // r7.y <- visibility
mov r7.z, l(0)  // r7.z <- slice
loop 
  ge r7.w, r7.z, cb0[5].x
  breakc_nz r7.w

#line 153
  add r7.w, r1.x, r7.z
  div r7.w, r7.w, cb0[5].x  // r7.w <- sliceK

#line 154
  mul r7.w, r7.w, l(3.141593)  // r7.w <- phi

#line 155
  sincos r9.x, r10.x, r7.w  // r10.x <- cosPhi; r9.x <- sinPhi

#line 157
  mov r8.x, -r9.x  // r8.x <- omega.y

#line 158
  mov r8.y, r10.x
  mul r9.yz, r0.wwww, r8.yyxy  // r9.y <- omega.x; r9.z <- omega.y

#line 160
  mov r8.z, r9.x
  dp2 r7.w, r8.yzyy, r3.xyxx
  mad r8.xyz, -r7.wwww, r3.xyzx, r8.yzwy  // r8.x <- orthoDirectionVec.x; r8.y <- orthoDirectionVec.y; r8.z <- orthoDirectionVec.z

#line 161
  mul r10.xyz, r3.yzxy, r8.zxyz
  mad r10.xyz, r8.yzxy, r3.zxyz, -r10.xyzx
  dp3 r7.w, r10.xyzx, r10.xyzx
  rsq r7.w, r7.w
  mul r10.xyz, r7.wwww, r10.xyzx  // r10.x <- axisVec.x; r10.y <- axisVec.y; r10.z <- axisVec.z

#line 162
  dp3 r7.w, r4.xzwx, r10.xyzx
  mad r10.xyz, -r10.xyzx, r7.wwww, r4.xzwx  // r10.x <- projectedNormalVec.x; r10.y <- projectedNormalVec.y; r10.z <- projectedNormalVec.z

#line 163
  dp3 r7.w, r8.xyzx, r10.xyzx
  lt r8.x, l(0.000000), r7.w
  lt r7.w, r7.w, l(0.000000)
  iadd r7.w, -r8.x, r7.w
  itof r7.w, r7.w  // r7.w <- signNorm

#line 164
  dp3 r8.x, r10.xyzx, r10.xyzx
  sqrt r8.x, r8.x  // r8.x <- projectedNormalVecLength

#line 165
  dp3 r8.y, r10.xyzx, r3.xyzx
  div_sat r8.y, r8.y, r8.x  // r8.y <- cosNorm

#line 77
  mad r8.z, r8.y, l(-0.156583), l(1.570796)  // r8.z <- res

#line 78
  add r9.x, -r8.y, l(1.000000)

#line 65
  ishr r9.x, r9.x, l(1)
  iadd r9.x, r9.x, l(0x1fbd1df5)  // r9.x <- <XeGTAO_FastSqrt_id11 return value>

#line 78
  mul r8.z, r8.z, r9.x

#line 166
  mul r9.x, r7.w, r8.z  // r9.x <- n

#line 168
  mad r10.xy, r7.wwww, r8.zzzz, l(1.570796, -1.570796, 0.000000, 0.000000)
  sincos null, r10.xy, r10.xyxx  // r10.x <- lowHorizonCos0; r10.y <- lowHorizonCos1

#line 173
  if_nz r5.w

#line 176
    mad r9.w, r7.z, l(0.618034), r1.y
    frc r9.w, r9.w  // r9.w <- stepNoise

#line 177
    div r9.w, r9.w, cb0[5].y  // r9.w <- s

#line 178
    log r9.w, |r9.w|
    mul r9.w, r0.x, r9.w
    exp r9.w, r9.w  // r9.w <- s

#line 179
    add r9.w, r4.y, r9.w

#line 180
    mul r10.zw, r9.yyyz, r9.wwww  // r10.z <- sampleOffset.x; r10.w <- sampleOffset.y

#line 181
    dp2 r9.w, r10.zwzz, r10.zwzz
    sqrt r9.w, r9.w  // r9.w <- sampleOffsetLength

#line 182
    log r9.w, r9.w
    add r9.w, -r0.z, r9.w
    max r9.w, r9.w, l(0.000000)
    min r9.w, r9.w, l(5.000000)  // r9.w <- mipLevel

#line 183
    round_ne r10.zw, r10.zzzw
    mul r10.zw, r2.zzzw, r10.zzzw  // r10.z <- sampleOffset.x; r10.w <- sampleOffset.y

#line 184
    mad r11.xy, r2.xyxx, r2.zwzz, r10.zwzz  // r11.x <- sampleScreenPos0.x; r11.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.xyxx, t1.yzxw, s0, r9.w  // r12.z <- SZ0

#line 95
    mad r11.xy, r6.xyxx, r11.xyxx, r6.zwzz
    mul r12.xy, r12.zzzz, r11.xyxx  // r12.x <- ret.x; r12.y <- ret.y

#line 187
    mad r10.zw, r2.xxxy, r2.zzzw, -r10.zzzw  // r10.z <- sampleScreenPos1.x; r10.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r11.z, r10.zwzz, t1.yzxw, s0, r9.w  // r11.z <- SZ1

#line 95
    mad r10.zw, r6.xxxy, r10.zzzw, r6.zzzw
    mul r11.xy, r11.zzzz, r10.zwzz  // r11.x <- ret.x; r11.y <- ret.y; r11.x <- ret.x; r11.y <- ret.y

#line 190
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta0.x; r12.y <- sampleDelta0.y; r12.z <- sampleDelta0.z

#line 191
    add r11.xyz, -r5.xyzx, r11.xyzx  // r11.x <- sampleDelta1.x; r11.y <- sampleDelta1.y; r11.z <- sampleDelta1.z

#line 192
    dp3 r9.w, r12.xyzx, r12.xyzx
    sqrt r9.w, r9.w  // r9.w <- sampleDist0

#line 193
    dp3 r10.z, r11.xyzx, r11.xyzx
    sqrt r10.z, r10.z  // r10.z <- sampleDist1

#line 194
    div r13.xyz, r12.xyzx, r9.wwww  // r13.x <- sampleHorizonVec0.x; r13.y <- sampleHorizonVec0.y; r13.z <- sampleHorizonVec0.z

#line 195
    div r14.xyz, r11.xyzx, r10.zzzz  // r14.x <- sampleHorizonVec1.x; r14.y <- sampleHorizonVec1.y; r14.z <- sampleHorizonVec1.z

#line 196
    mul r12.w, r0.y, r12.z
    dp3 r9.w, r12.xywx, r12.xywx
    sqrt r9.w, r9.w  // r9.w <- falloffBase0

#line 197
    mul r11.w, r0.y, r11.z
    dp3 r10.z, r11.xywx, r11.xywx
    sqrt r10.z, r10.z  // r10.z <- falloffBase1

#line 198
    mad_sat r9.w, r9.w, r3.w, r1.z  // r9.w <- weight0

#line 199
    mad_sat r10.z, r10.z, r3.w, r1.z  // r10.z <- weight1

#line 200
    dp3 r10.w, r13.xyzx, r3.xyzx  // r10.w <- shc0

#line 201
    dp3 r11.x, r14.xyzx, r3.xyzx  // r11.x <- shc1

#line 202
    add r10.w, -r10.x, r10.w
    mad r9.w, r9.w, r10.w, r10.x  // r9.w <- shc0

#line 203
    add r10.w, -r10.y, r11.x
    mad r10.z, r10.z, r10.w, r10.y  // r10.z <- shc1

#line 204
    max r11.x, r9.w, r10.x  // r11.x <- horizonCos0

#line 205
    max r11.y, r10.z, r10.y  // r11.y <- horizonCos1

#line 206
    mov r9.w, l(1.000000)  // r9.w <- step
  else   // Prior locations: r10.z <- projectedNormalVec.z
    mov r11.xy, r10.xyxx  // r11.x <- horizonCos0; r11.y <- horizonCos1
    mov r9.w, l(0)  // r9.w <- step
  endif 

#line 173
  lt r10.z, r9.w, cb0[5].y
  if_nz r10.z

#line 175
    add r10.w, r7.z, cb0[5].y

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(1.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(2.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(2.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(2.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(3.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(3.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(3.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(4.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(4.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(4.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(5.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(5.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(5.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(6.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(6.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(6.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(7.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(7.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(7.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(8.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(8.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(8.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(9.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(9.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(9.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(10.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(10.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(10.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(11.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(11.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(11.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(12.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(12.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(12.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(13.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(13.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(13.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(14.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(14.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(14.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(15.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(15.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(15.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(16.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(16.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(16.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(17.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(17.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(17.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(18.000000)
  endif 

#line 173
  lt r10.w, r9.w, cb0[5].y
  and r10.z, r10.w, r10.z
  if_nz r10.z

#line 175
    mad r10.w, cb0[5].y, l(18.000000), r7.z

#line 176
    mad r10.w, r10.w, l(0.618034), r1.y
    frc r10.w, r10.w  // r10.w <- stepNoise

#line 177
    add r10.w, r10.w, l(18.000000)
    div r10.w, r10.w, cb0[5].y  // r10.w <- s

#line 178
    log r10.w, |r10.w|
    mul r10.w, r0.x, r10.w
    exp r10.w, r10.w  // r10.w <- s

#line 179
    add r10.w, r4.y, r10.w

#line 180
    mul r11.zw, r9.yyyz, r10.wwww  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 181
    dp2 r10.w, r11.zwzz, r11.zwzz
    sqrt r10.w, r10.w  // r10.w <- sampleOffsetLength

#line 182
    log r10.w, r10.w
    add r10.w, -r7.x, r10.w
    max r10.w, r10.w, l(0.000000)
    min r10.w, r10.w, l(5.000000)  // r10.w <- mipLevel

#line 183
    round_ne r11.zw, r11.zzzw
    mul r11.zw, r2.zzzw, r11.zzzw  // r11.z <- sampleOffset.x; r11.w <- sampleOffset.y

#line 184
    mad r12.xy, r2.xyxx, r2.zwzz, r11.zwzz  // r12.x <- sampleScreenPos0.x; r12.y <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r12.xyxx, t1.yzxw, s0, r10.w  // r13.z <- SZ0

#line 95
    mad r12.xy, r6.xyxx, r12.xyxx, r6.zwzz
    mul r13.xy, r13.zzzz, r12.xyxx  // r13.x <- ret.x; r13.y <- ret.y; r13.x <- ret.x; r13.y <- ret.y

#line 187
    mad r11.zw, r2.xxxy, r2.zzzw, -r11.zzzw  // r11.z <- sampleScreenPos1.x; r11.w <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r11.zwzz, t1.yzxw, s0, r10.w  // r12.z <- SZ1

#line 95
    mad r11.zw, r6.xxxy, r11.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r11.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 190
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta0.x; r13.y <- sampleDelta0.y; r13.z <- sampleDelta0.z

#line 191
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta1.x; r12.y <- sampleDelta1.y; r12.z <- sampleDelta1.z

#line 192
    dp3 r10.w, r13.xyzx, r13.xyzx
    sqrt r10.w, r10.w  // r10.w <- sampleDist0

#line 193
    dp3 r11.z, r12.xyzx, r12.xyzx
    sqrt r11.z, r11.z  // r11.z <- sampleDist1

#line 194
    div r14.xyz, r13.xyzx, r10.wwww  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r15.xyz, r12.xyzx, r11.zzzz  // r15.x <- sampleHorizonVec1.x; r15.y <- sampleHorizonVec1.y; r15.z <- sampleHorizonVec1.z

#line 196
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx
    sqrt r10.w, r10.w  // r10.w <- falloffBase0

#line 197
    mul r12.w, r0.y, r12.z
    dp3 r11.z, r12.xywx, r12.xywx
    sqrt r11.z, r11.z  // r11.z <- falloffBase1

#line 198
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight0

#line 199
    mad_sat r11.z, r11.z, r3.w, r1.z  // r11.z <- weight1

#line 200
    dp3 r11.w, r14.xyzx, r3.xyzx  // r11.w <- shc0

#line 201
    dp3 r12.x, r15.xyzx, r3.xyzx  // r12.x <- shc1

#line 202
    add r11.w, -r10.x, r11.w
    mad r10.w, r10.w, r11.w, r10.x  // r10.w <- shc0

#line 203
    add r11.w, -r10.y, r12.x
    mad r11.z, r11.z, r11.w, r10.y  // r11.z <- shc1

#line 204
    max r11.x, r10.w, r11.x

#line 205
    max r11.y, r11.z, r11.y

#line 206
    mov r9.w, l(19.000000)
  endif 

#line 173
  lt r9.w, r9.w, cb0[5].y
  and r9.w, r9.w, r10.z
  if_nz r9.w

#line 175
    mad r9.w, cb0[5].y, l(19.000000), r7.z

#line 176
    mad r9.w, r9.w, l(0.618034), r1.y
    frc r9.w, r9.w  // r9.w <- stepNoise

#line 177
    add r9.w, r9.w, l(19.000000)
    div r9.w, r9.w, cb0[5].y  // r9.w <- s

#line 178
    log r9.w, |r9.w|
    mul r9.w, r0.x, r9.w
    exp r9.w, r9.w  // r9.w <- s

#line 179
    add r9.w, r4.y, r9.w

#line 180
    mul r9.yz, r9.yyzy, r9.wwww  // r9.y <- sampleOffset.x; r9.z <- sampleOffset.y

#line 181
    dp2 r9.w, r9.yzyy, r9.yzyy
    sqrt r9.w, r9.w  // r9.w <- sampleOffsetLength

#line 182
    log r9.w, r9.w
    add r9.w, -r7.x, r9.w
    max r9.w, r9.w, l(0.000000)
    min r9.w, r9.w, l(5.000000)  // r9.w <- mipLevel

#line 183
    round_ne r9.yz, r9.yyzy
    mul r9.yz, r2.zzwz, r9.yyzy  // r9.y <- sampleOffset.x; r9.z <- sampleOffset.y

#line 184
    mad r10.zw, r2.xxxy, r2.zzzw, r9.yyyz  // r10.z <- sampleScreenPos0.x; r10.w <- sampleScreenPos0.y

#line 185
    sample_l_indexable(texture2d)(float,float,float,float) r12.z, r10.zwzz, t1.yzxw, s0, r9.w  // r12.z <- SZ0

#line 95
    mad r10.zw, r6.xxxy, r10.zzzw, r6.zzzw
    mul r12.xy, r12.zzzz, r10.zwzz  // r12.x <- ret.x; r12.y <- ret.y; r12.x <- ret.x; r12.y <- ret.y

#line 187
    mad r9.yz, r2.xxyx, r2.zzwz, -r9.yyzy  // r9.y <- sampleScreenPos1.x; r9.z <- sampleScreenPos1.y

#line 188
    sample_l_indexable(texture2d)(float,float,float,float) r13.z, r9.yzyy, t1.yzxw, s0, r9.w  // r13.z <- SZ1

#line 95
    mad r9.yz, r6.xxyx, r9.yyzy, r6.zzwz
    mul r13.xy, r13.zzzz, r9.yzyy  // r13.x <- ret.x; r13.y <- ret.y

#line 190
    add r12.xyz, -r5.xyzx, r12.xyzx  // r12.x <- sampleDelta0.x; r12.y <- sampleDelta0.y; r12.z <- sampleDelta0.z

#line 191
    add r13.xyz, -r5.xyzx, r13.xyzx  // r13.x <- sampleDelta1.x; r13.y <- sampleDelta1.y; r13.z <- sampleDelta1.z

#line 192
    dp3 r9.y, r12.xyzx, r12.xyzx

#line 193
    dp3 r9.z, r13.xyzx, r13.xyzx

#line 192
    sqrt r9.yz, r9.yyzy  // r9.y <- sampleDist0; r9.z <- sampleDist1

#line 194
    div r14.xyz, r12.xyzx, r9.yyyy  // r14.x <- sampleHorizonVec0.x; r14.y <- sampleHorizonVec0.y; r14.z <- sampleHorizonVec0.z

#line 195
    div r9.yzw, r13.xxyz, r9.zzzz  // r9.y <- sampleHorizonVec1.x; r9.z <- sampleHorizonVec1.y; r9.w <- sampleHorizonVec1.z

#line 196
    mul r12.w, r0.y, r12.z
    dp3 r10.z, r12.xywx, r12.xywx

#line 197
    mul r13.w, r0.y, r13.z
    dp3 r10.w, r13.xywx, r13.xywx

#line 196
    sqrt r10.zw, r10.zzzw  // r10.z <- falloffBase0; r10.w <- falloffBase1

#line 198
    mad_sat r10.z, r10.z, r3.w, r1.z  // r10.z <- weight0

#line 199
    mad_sat r10.w, r10.w, r3.w, r1.z  // r10.w <- weight1

#line 200
    dp3 r11.z, r14.xyzx, r3.xyzx  // r11.z <- shc0

#line 201
    dp3 r9.y, r9.yzwy, r3.xyzx  // r9.y <- shc1

#line 202
    add r9.z, -r10.x, r11.z
    mad r9.z, r10.z, r9.z, r10.x  // r9.z <- shc0

#line 203
    add r9.y, -r10.y, r9.y
    mad r9.y, r10.w, r9.y, r10.y  // r9.y <- shc1

#line 204
    max r11.xy, r9.zyzz, r11.xyxx

#line 206
  endif 

#line 207
  add r9.y, -r8.x, l(1.000000)
  mad r8.x, r9.y, l(0.050000), r8.x

#line 77
  mad r9.y, |r11.y|, l(-0.156583), l(1.570796)  // r9.y <- res

#line 78
  add r9.z, -|r11.y|, l(1.000000)

#line 65
  ishr r9.z, r9.z, l(1)
  iadd r9.z, r9.z, l(0x1fbd1df5)  // r9.z <- <XeGTAO_FastSqrt_id11 return value>

#line 78
  mul r9.w, r9.z, r9.y  // r9.w <- res

#line 79
  ge r10.xy, r11.yxyy, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r9.y, -r9.y, r9.z, l(3.141593)
  movc r9.y, r10.x, r9.w, r9.y  // r9.y <- <XeGTAO_FastACos_id12 return value>; r9.y <- <XeGTAO_FastACos_id12 return value>

#line 77
  mad r9.z, |r11.x|, l(-0.156583), l(1.570796)  // r9.z <- res

#line 78
  add r9.w, -|r11.x|, l(1.000000)

#line 65
  ishr r9.w, r9.w, l(1)
  iadd r9.w, r9.w, l(0x1fbd1df5)  // r9.w <- <XeGTAO_FastSqrt_id11 return value>

#line 78
  mul r10.x, r9.w, r9.z  // r10.x <- res

#line 79
  mad r9.z, -r9.z, r9.w, l(3.141593)
  movc r9.z, r10.y, r10.x, r9.z  // r9.z <- <XeGTAO_FastACos_id12 return value>

#line 210
  mul r9.w, r9.y, l(-2.000000)
  sincos r10.x, null, r9.x
  mad r9.w, r9.w, r10.x, r8.y
  mad r9.x, r9.y, l(-2.000000), -r9.x
  sincos null, r9.x, r9.x
  add r9.x, -r9.x, r9.w

#line 211
  add r9.y, r9.z, r9.z
  mad r8.y, r9.y, r10.x, r8.y
  mad r7.w, -r7.w, r8.z, r9.y
  sincos null, r7.w, r7.w
  add r7.w, -r7.w, r8.y
  mul r7.w, r7.w, l(0.250000)  // r7.w <- iarc1

#line 212
  mad r7.w, r9.x, l(0.250000), r7.w

#line 213
  mad r7.y, r8.x, r7.w, r7.y

#line 214
  add r7.z, r7.z, l(1.000000)
endloop 

#line 215
div r0.x, r7.y, cb0[5].x  // r0.x <- visibility

#line 216
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.y, l(0), l(72), t0.xxxx
log r0.x, r0.x
mul r0.x, r0.x, r0.y
exp r0.x, r0.x  // r0.x <- visibility

#line 217
max r0.x, r0.x, l(0.030000)

#line 69
mul r0.x, r0.x, l(0.666667)
min r0.x, r0.x, l(1.000000)  // r0.x <- visibility

#line 70
mad r0.x, r0.x, l(255.000000), l(0.500000)
ftou r0.x, r0.x
store_uav_typed u0.xyzw, vThreadID.xyyy, r0.xxxx

#line 254
ret 
// Approximately 1297 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
typedef float AOTermType;
struct GTAOConstants 
{
    int2 ViewportSize;
    float2 ViewportPixelSize;
    float2 DepthUnpackConsts;
    float2 CameraTanHalfFOV;
    float2 NDCToViewMul;
    float2 NDCToViewAdd;
    float2 NDCToViewMul_x_PixelSize;
    float EffectRadius;
    float EffectFalloffRange;
    float RadiusMultiplier;
    float Padding0;
    float FinalValuePower;
    float DenoiseBlurBeta;
    float SampleDistributionPower;
    float ThinOccluderCompensation;
    float DepthMIPSamplingOffset;
    int NoiseIndex;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
    float4x4 ViewMatrix_id20;
    float SliceCount_id21 = 2;
    float StepsPerSlice_id22 = 2;
    int UseNormalMap_id23;
};
cbuffer Globals 
{
    groupshared float g_scratchDepths_id13[8][8];
};
SamplerState PointClampSampler_id12 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = clamp;
    AddressV = clamp;
};
StructuredBuffer<GTAOConstants> GTAOConsts_id11;
Texture2D<float> SrcWorkingDepth_id14;
Texture2D<float4> SrcNormalmap_id15;
Texture2D<uint> SrcHilbertLUT_id16;
RWTexture2D<uint> OutWorkingAOTerm_id17;
RWTexture2D<unorm float> OutWorkingEdges_id18;
RWTexture2D<uint> OutNormalmap_id19;
float XeGTAO_FastSqrt_id11(float x)
{
    return (float)(asfloat(0x1fbd1df5 + (asint(x) >> 1)));
}
void XeGTAO_OutputWorkingTerm_id15(const uint2 pixCoord, float visibility, float3 bentNormal, RWTexture2D<uint> outWorkingAOTerm)
{
    visibility = saturate(visibility / float((1.5f)));
    outWorkingAOTerm[pixCoord] = uint(visibility * 255.0 + 0.5);
}
float XeGTAO_FastACos_id12(float inX)
{
    const float PI = 3.141593;
    const float HALF_PI = 1.570796;
    float x = abs(inX);
    float res = -0.156583 * x + HALF_PI;
    res *= XeGTAO_FastSqrt_id11(1.0 - x);
    return (inX >= 0) ? res : PI - res;
}
float3 XeGTAO_CalculateNormal_id10(const float4 edgesLRTB, float3 pixCenterPos, float3 pixLPos, float3 pixRPos, float3 pixTPos, float3 pixBPos)
{
    float4 acceptedNormals = saturate(float4(edgesLRTB.x * edgesLRTB.z, edgesLRTB.z * edgesLRTB.y, edgesLRTB.y * edgesLRTB.w, edgesLRTB.w * edgesLRTB.x) + 0.01);
    pixLPos = normalize(pixLPos - pixCenterPos);
    pixRPos = normalize(pixRPos - pixCenterPos);
    pixTPos = normalize(pixTPos - pixCenterPos);
    pixBPos = normalize(pixBPos - pixCenterPos);
    float3 pixelNormal = acceptedNormals.x * cross(pixLPos, pixTPos) + +acceptedNormals.y * cross(pixTPos, pixRPos) + +acceptedNormals.z * cross(pixRPos, pixBPos) + +acceptedNormals.w * cross(pixBPos, pixLPos);
    pixelNormal = normalize(pixelNormal);
    return pixelNormal;
}
float3 XeGTAO_ComputeViewspacePosition_id6(const float2 screenPos, const float viewspaceDepth, const GTAOConstants consts)
{
    float3 ret;
    ret.xy = (consts.NDCToViewMul * screenPos.xy + consts.NDCToViewAdd) * viewspaceDepth;
    ret.z = viewspaceDepth;
    return ret;
}
float4 XeGTAO_CalculateEdges_id8(const float centerZ, const float leftZ, const float rightZ, const float topZ, const float bottomZ)
{
    float4 edgesLRTB = float4(leftZ, rightZ, topZ, bottomZ) - (float)centerZ;
    float slopeLR = (edgesLRTB.y - edgesLRTB.x) * 0.5;
    float slopeTB = (edgesLRTB.w - edgesLRTB.z) * 0.5;
    float4 edgesLRTBSlopeAdjusted = edgesLRTB + float4(slopeLR, -slopeLR, slopeTB, -slopeTB);
    edgesLRTB = min(abs(edgesLRTB), abs(edgesLRTBSlopeAdjusted));
    return float4(saturate((1.25 - edgesLRTB / (centerZ * 0.011))));
}
void XeGTAO_MainPass_id17(const uint2 pixCoord, float sliceCount, float stepsPerSlice, const float2 localNoise, float3 viewspaceNormal, const GTAOConstants consts, Texture2D<float> sourceViewspaceDepth, SamplerState depthSampler, RWTexture2D<uint> outWorkingAOTerm, RWTexture2D<unorm float> outWorkingEdges, int UseNormalMap, float4x4 ViewMatrix)
{
    float2 normalizedScreenPos = (pixCoord + 0.5.xx) * consts.ViewportPixelSize;
    float4 valuesUL = sourceViewspaceDepth.GatherRed(depthSampler, float2(pixCoord * consts.ViewportPixelSize));
    float4 valuesBR = sourceViewspaceDepth.GatherRed(depthSampler, float2(pixCoord * consts.ViewportPixelSize), int2(1, 1));
    float viewspaceZ = valuesUL.y;
    const float pixLZ = valuesUL.x;
    const float pixTZ = valuesUL.z;
    const float pixRZ = valuesBR.z;
    const float pixBZ = valuesBR.x;
    float4 edgesLRTB = XeGTAO_CalculateEdges_id8((float)viewspaceZ, (float)pixLZ, (float)pixRZ, (float)pixTZ, (float)pixBZ);
    [branch]
    if (!UseNormalMap)
    {
        float3 CENTER = XeGTAO_ComputeViewspacePosition_id6(normalizedScreenPos, viewspaceZ, consts);
        float3 LEFT = XeGTAO_ComputeViewspacePosition_id6(normalizedScreenPos + float2(-1, 0) * consts.ViewportPixelSize, pixLZ, consts);
        float3 RIGHT = XeGTAO_ComputeViewspacePosition_id6(normalizedScreenPos + float2(1, 0) * consts.ViewportPixelSize, pixRZ, consts);
        float3 TOP = XeGTAO_ComputeViewspacePosition_id6(normalizedScreenPos + float2(0, -1) * consts.ViewportPixelSize, pixTZ, consts);
        float3 BOTTOM = XeGTAO_ComputeViewspacePosition_id6(normalizedScreenPos + float2(0, 1) * consts.ViewportPixelSize, pixBZ, consts);
        viewspaceNormal = (float3)XeGTAO_CalculateNormal_id10(edgesLRTB, CENTER, LEFT, RIGHT, TOP, BOTTOM);
    }
    viewspaceZ *= 0.99999;
    const float3 pixCenterPos = XeGTAO_ComputeViewspacePosition_id6(normalizedScreenPos, viewspaceZ, consts);
    const float3 viewVec = (float3)normalize(-pixCenterPos);
    const float effectRadius = (float)consts.EffectRadius * (float)consts.RadiusMultiplier;
    const float sampleDistributionPower = (float)consts.SampleDistributionPower;
    const float thinOccluderCompensation = (float)consts.ThinOccluderCompensation;
    const float falloffRange = (float)consts.EffectFalloffRange * effectRadius;
    const float falloffFrom = effectRadius * ((float)1 - (float)consts.EffectFalloffRange);
    const float falloffMul = (float)-1.0 / (falloffRange);
    const float falloffAdd = falloffFrom / (falloffRange) + (float)1.0;
    float visibility = 0;
    float3 bentNormal = viewspaceNormal;

    {
        const float noiseSlice = (float)localNoise.x;
        const float noiseSample = (float)localNoise.y;
        const float pixelTooCloseThreshold = 1.3;
        const float2 pixelDirRBViewspaceSizeAtCenterZ = viewspaceZ.xx * consts.NDCToViewMul_x_PixelSize;
        float screenspaceRadius = effectRadius / (float)pixelDirRBViewspaceSizeAtCenterZ.x;
        visibility += saturate((10 - screenspaceRadius) / 100) * 0.5;
        const float minS = (float)pixelTooCloseThreshold / screenspaceRadius;

        for (float slice = 0; slice < sliceCount; slice++)
        {
            float sliceK = (slice + noiseSlice) / sliceCount;
            float phi = sliceK * (3.1415926535897932384626433832795);
            float cosPhi = cos(phi);
            float sinPhi = sin(phi);
            float2 omega = float2(cosPhi, -sinPhi);
            omega *= screenspaceRadius;
            const float3 directionVec = float3(cosPhi, sinPhi, 0);
            const float3 orthoDirectionVec = directionVec - (dot(directionVec, viewVec) * viewVec);
            const float3 axisVec = normalize(cross(orthoDirectionVec, viewVec));
            float3 projectedNormalVec = viewspaceNormal - axisVec * dot(viewspaceNormal, axisVec);
            float signNorm = (float)sign(dot(orthoDirectionVec, projectedNormalVec));
            float projectedNormalVecLength = length(projectedNormalVec);
            float cosNorm = (float)saturate(dot(projectedNormalVec, viewVec) / projectedNormalVecLength);
            float n = signNorm * XeGTAO_FastACos_id12(cosNorm);
            const float lowHorizonCos0 = cos(n + (1.5707963267948966192313216916398));
            const float lowHorizonCos1 = cos(n - (1.5707963267948966192313216916398));
            float horizonCos0 = lowHorizonCos0;
            float horizonCos1 = lowHorizonCos1;

            [unroll(20)]
            for (float step = 0; step < stepsPerSlice; step++)
            {
                const float stepBaseNoise = float(slice + step * stepsPerSlice) * 0.6180339887498948482;
                float stepNoise = frac(noiseSample + stepBaseNoise);
                float s = (step + stepNoise) / (stepsPerSlice);
                s = (float)pow(abs(s), (float)sampleDistributionPower);
                s += minS;
                float2 sampleOffset = s * omega;
                float sampleOffsetLength = length(sampleOffset);
                const float mipLevel = (float)clamp(log2(sampleOffsetLength) - consts.DepthMIPSamplingOffset, 0, 5);
                sampleOffset = round(sampleOffset) * (float2)consts.ViewportPixelSize;
                float2 sampleScreenPos0 = normalizedScreenPos + sampleOffset;
                float SZ0 = sourceViewspaceDepth.SampleLevel(depthSampler, sampleScreenPos0, mipLevel).x;
                float3 samplePos0 = XeGTAO_ComputeViewspacePosition_id6(sampleScreenPos0, SZ0, consts);
                float2 sampleScreenPos1 = normalizedScreenPos - sampleOffset;
                float SZ1 = sourceViewspaceDepth.SampleLevel(depthSampler, sampleScreenPos1, mipLevel).x;
                float3 samplePos1 = XeGTAO_ComputeViewspacePosition_id6(sampleScreenPos1, SZ1, consts);
                float3 sampleDelta0 = (samplePos0 - float3(pixCenterPos));
                float3 sampleDelta1 = (samplePos1 - float3(pixCenterPos));
                float sampleDist0 = (float)length(sampleDelta0);
                float sampleDist1 = (float)length(sampleDelta1);
                float3 sampleHorizonVec0 = (float3)(sampleDelta0 / sampleDist0);
                float3 sampleHorizonVec1 = (float3)(sampleDelta1 / sampleDist1);
                float falloffBase0 = length(float3(sampleDelta0.x, sampleDelta0.y, sampleDelta0.z * (1 + thinOccluderCompensation)));
                float falloffBase1 = length(float3(sampleDelta1.x, sampleDelta1.y, sampleDelta1.z * (1 + thinOccluderCompensation)));
                float weight0 = saturate(falloffBase0 * falloffMul + falloffAdd);
                float weight1 = saturate(falloffBase1 * falloffMul + falloffAdd);
                float shc0 = (float)dot(sampleHorizonVec0, viewVec);
                float shc1 = (float)dot(sampleHorizonVec1, viewVec);
                shc0 = lerp(lowHorizonCos0, shc0, weight0);
                shc1 = lerp(lowHorizonCos1, shc1, weight1);
                horizonCos0 = max(horizonCos0, shc0);
                horizonCos1 = max(horizonCos1, shc1);
            }
            projectedNormalVecLength = lerp(projectedNormalVecLength, 1, 0.05);
            float h0 = -XeGTAO_FastACos_id12((float)horizonCos1);
            float h1 = XeGTAO_FastACos_id12((float)horizonCos0);
            float iarc0 = ((float)cosNorm + (float)2 * (float)h0 * (float)sin(n) - (float)cos((float)2 * (float)h0 - n)) / (float)4;
            float iarc1 = ((float)cosNorm + (float)2 * (float)h1 * (float)sin(n) - (float)cos((float)2 * (float)h1 - n)) / (float)4;
            float localVisibility = (float)projectedNormalVecLength * (float)(iarc0 + iarc1);
            visibility += localVisibility;
        }
        visibility /= (float)sliceCount;
        visibility = pow(visibility, (float)consts.FinalValuePower);
        visibility = max((float)0.03, visibility);
    }
    XeGTAO_OutputWorkingTerm_id15(pixCoord, visibility, bentNormal, outWorkingAOTerm);
}
float3 LoadNormal_id27(int2 pos)
{
    float3 packedInput = SrcNormalmap_id15.Load(int3(pos, 0));
    float bg = any(packedInput);
    float3 normal = normalize(packedInput * 2.0.xxx - 1.0.xxx);
    normal = bg ? mul(normal, (float3x3)ViewMatrix_id20) * float3(1, 1, -1) : -1;
    return (float3)normal;
}
float2 SpatioTemporalNoise_id28(uint2 pixCoord, uint temporalIndex)
{
    float2 noise;
    uint index = SrcHilbertLUT_id16.Load(uint3(pixCoord % 64, 0)).x;
    index += 288 * (temporalIndex % 64);
    return float2(frac(0.5 + index * float2(0.75487766624669276005, 0.5698402909980532659114)));
}
void Compute_id29(inout CS_STREAMS streams)
{
    uint2 pixCoord = streams.DispatchThreadId_id1.xy;
    XeGTAO_MainPass_id17(pixCoord, SliceCount_id21, StepsPerSlice_id22, SpatioTemporalNoise_id28(pixCoord, GTAOConsts_id11[0].NoiseIndex), LoadNormal_id27(pixCoord), GTAOConsts_id11[0], SrcWorkingDepth_id14, PointClampSampler_id12, OutWorkingAOTerm_id17, OutWorkingEdges_id18, UseNormalMap_id23, ViewMatrix_id20);
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id29(streams);
}
