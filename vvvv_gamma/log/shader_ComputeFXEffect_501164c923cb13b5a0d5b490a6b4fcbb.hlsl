/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMMidiQueue_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:4 Y:4 Z:4
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 32]
@C    NumberOfVoxels_id11 => SMVoxelVolume.NumberOfVoxels
@C    VoxelSpacing_id12 => SMVoxelVolume.VoxelSpacing
@C    VolumeOffset_id13 => SMVoxelVolume.VolumeOffset
@C    Advance_id16 => SMMidiUtils.Advance
***************************
******  Resources    ******
***************************
@R    InputValues_id14 => SMMidiUtils.InputValues [Stage: Compute, Slot: (0-0)]
@R    VoxelVolume_id15 => SMMidiUtils.VoxelVolume [Stage: Compute, Slot: (0-0)]
@R    LastVoxelVolume_id17 => SMMidiQueue_ComputeFX.LastVoxelVolume [Stage: Compute, Slot: (1-1)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SMMidiQueue_ComputeFX => 1254c3f11d555050bc9e65c1c5bd4f4d
@S    SMMidiUtils => 5d21e8a9ddf0e18374bc05dd77631702
@S    SMVoxelVolume => ce5fad2dca3f817d4e1b59ada5283ab7
@S    SMMidiNoteDataStruct => f5634bf05bf031b62eb5384e713d4be4
***************************
*****     Stages      *****
***************************
@G    Compute => 919663e15ddf98d1653e0aeb0e1b5c34
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int3 NumberOfVoxels_id11;          // Offset:    0 Size:    12
//   float VoxelSpacing_id12;           // Offset:   12 Size:     4 [unused]
//   float3 VolumeOffset_id13;          // Offset:   16 Size:    12 [unused]
//   int Advance_id16;                  // Offset:   28 Size:     4
//      = 0x00000001 
//
// }
//
// Resource bind info for InputValues_id14
// {
//
//   struct SMMidiNoteData
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for VoxelVolume_id15
// {
//
//   struct SMMidiNoteData
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for LastVoxelVolume_id17
// {
//
//   struct SMMidiNoteData
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// InputValues_id14                  texture  struct         r/o             t0      1 
// VoxelVolume_id15                      UAV  struct         r/w             u0      1 
// LastVoxelVolume_id17                  UAV  struct         r/w             u1      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_resource_structured t0, 48
dcl_uav_structured u0, 48
dcl_uav_structured u1, 48
dcl_input vThreadID.xyz
dcl_temps 5
dcl_thread_group 4, 4, 4
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 85 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_501164c923cb13b5a0d5b490a6b4fcbb.hlsl"
uge r0.xyz, vThreadID.xyzx, cb0[0].xyzx
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x

#line 87
if_z r0.x
  ult r0.x, vThreadID.z, cb0[1].w
  if_nz r0.x

#line 63
    imad r0.x, vThreadID.y, cb0[0].x, vThreadID.x  // r0.x <- <CalculateTexelIndex_id3 return value>

#line 72
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, l(0), t0.xyzw  // r1.x <- <GetTexel_id12 return value>.Empty; r1.y <- <GetTexel_id12 return value>.StartTime; r1.z <- <GetTexel_id12 return value>.Note; r1.w <- <GetTexel_id12 return value>.Velocity
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(16), t0.xyzw  // r2.x <- <GetTexel_id12 return value>.Length; r2.y <- <GetTexel_id12 return value>.Channel; r2.z <- <GetTexel_id12 return value>.Constant; r2.w <- <GetTexel_id12 return value>.Id
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r0.xyzw, r0.x, l(32), t0.xyzw  // r0.x <- <GetTexel_id12 return value>.TrackId; r0.y <- <GetTexel_id12 return value>.ModWheel; r0.z <- <GetTexel_id12 return value>.PitchBend; r0.w <- <GetTexel_id12 return value>.Random

#line 67
    iadd r3.xyz, cb0[0].xyzx, l(-1, -1, -1, 0)
    umin r3.xyz, r3.xyzx, vThreadID.xyzx  // r3.x <- coordinate.x; r3.y <- coordinate.y; r3.z <- coordinate.z

#line 68
    imul null, r3.w, cb0[0].y, cb0[0].x
    imad r3.x, r3.y, cb0[0].x, r3.x
    imad r3.x, r3.z, r3.w, r3.x  // r3.x <- <CalculateVoxelVolumeIndex_id4 return value>

#line 76
    store_structured u0.xyzw, r3.x, l(0), r1.xyzw
    store_structured u0.xyzw, r3.x, l(16), r2.xyzw
    store_structured u0.xyzw, r3.x, l(32), r0.xyzw

#line 90
  else 

#line 93
    ineg r0.z, cb0[1].w
    mov r0.xy, l(0,0,0,0)
    iadd r0.xyz, r0.xyzx, vThreadID.xyzx

#line 67
    iadd r1.xyz, cb0[0].xyzx, l(-1, -1, -1, 0)
    umin r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- coordinate.x; r0.y <- coordinate.y; r0.z <- coordinate.z

#line 68
    imul null, r0.w, cb0[0].y, cb0[0].x
    imad r0.x, r0.y, cb0[0].x, r0.x
    imad r0.x, r0.z, r0.w, r0.x  // r0.x <- <CalculateVoxelVolumeIndex_id4 return value>

#line 80
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(0), u1.xyzw  // r2.x <- <GetVoxel_id13 return value>.Empty; r2.y <- <GetVoxel_id13 return value>.StartTime; r2.z <- <GetVoxel_id13 return value>.Note; r2.w <- <GetVoxel_id13 return value>.Velocity
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r3.xyzw, r0.x, l(16), u1.xyzw  // r3.x <- <GetVoxel_id13 return value>.Length; r3.y <- <GetVoxel_id13 return value>.Channel; r3.z <- <GetVoxel_id13 return value>.Constant; r3.w <- <GetVoxel_id13 return value>.Id
    ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r4.xyzw, r0.x, l(32), u1.xyzw  // r4.x <- <GetVoxel_id13 return value>.TrackId; r4.y <- <GetVoxel_id13 return value>.ModWheel; r4.z <- <GetVoxel_id13 return value>.PitchBend; r4.w <- <GetVoxel_id13 return value>.Random

#line 67
    umin r0.xyz, r1.xyzx, vThreadID.xyzx  // r0.x <- coordinate.x

#line 68
    imad r0.x, r0.y, cb0[0].x, r0.x
    imad r0.x, r0.z, r0.w, r0.x  // r0.x <- <CalculateVoxelVolumeIndex_id4 return value>

#line 76
    store_structured u0.xyzw, r0.x, l(0), r2.xyzw
    store_structured u0.xyzw, r0.x, l(16), r3.xyzw
    store_structured u0.xyzw, r0.x, l(32), r4.xyzw

#line 94
  endif 
endif 

#line 109
ret 
// Approximately 39 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct SMMidiNoteData 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
struct SMMidiNoteDataFloat 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int3 NumberOfVoxels_id11;
    float VoxelSpacing_id12;
    float3 VolumeOffset_id13;
    int Advance_id16 = 1;
};
StructuredBuffer<SMMidiNoteData> InputValues_id14;
RWStructuredBuffer<SMMidiNoteData> VoxelVolume_id15;
RWStructuredBuffer<SMMidiNoteData> LastVoxelVolume_id17;
uint CalculateTexelIndex_id3(uint2 coordinate)
{
    return dot(coordinate, uint2(1, NumberOfVoxels_id11.x));
}
uint CalculateVoxelVolumeIndex_id4(uint3 coordinate)
{
    coordinate = clamp(coordinate, 0, NumberOfVoxels_id11 - 1);
    return dot(coordinate, uint3(1, NumberOfVoxels_id11.x, NumberOfVoxels_id11.x * NumberOfVoxels_id11.y));
}
SMMidiNoteData GetTexel_id12(uint2 coordinate)
{
    return InputValues_id14[CalculateTexelIndex_id3(coordinate)];
}
void SetVoxel_id11(uint3 coordinate, in SMMidiNoteData voxel)
{
    VoxelVolume_id15[CalculateVoxelVolumeIndex_id4(coordinate)] = voxel;
}
SMMidiNoteData GetVoxel_id13(uint3 coordinate)
{
    return LastVoxelVolume_id17[CalculateVoxelVolumeIndex_id4(coordinate)];
}
void Compute_id14(inout CS_STREAMS streams)
{
    uint3 uvw = streams.DispatchThreadId_id1.xyz;
    if (any(uvw >= NumberOfVoxels_id11))
        return;
    if (uvw.z < Advance_id16)
    {
        SetVoxel_id11(uvw, GetTexel_id12(uvw.xy));
    }
    else
    {
        SetVoxel_id11(uvw, GetVoxel_id13(uvw + uint3(0, 0, -Advance_id16)));
    }
}
[numthreads(4, 4, 4)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 4;
    streams.ThreadCountY_id8 = 4;
    streams.ThreadCountZ_id9 = 4;
    streams.ThreadCountPerGroup_id5 = 4 * 4 * 4;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id14(streams);
}
