/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin GenerateVoxelVolume_ComputeFX [{SDF = Float3ToFloat}]
@P SDF: Float3ToFloat
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 32]
@C    NumberOfVoxels_id13 => SDFVoxelVolume.NumberOfVoxels
@C    VoxelSpacing_id14 => SDFVoxelVolume.VoxelSpacing
@C    VolumeOffset_id15 => SDFVoxelVolume.VolumeOffset
***************************
******  Resources    ******
***************************
@R    VoxelVolume_id12 => SDFVoxelVolume.VoxelVolume [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    GenerateVoxelVolume_ComputeFX => b9d4f4df7cf18f3f66f5a631f9412680
@S    SDFInput => a9a2d11c443f5dcd90f5f02aeaa8a31d
@S    Float3ToFloat => 2f0e51a8298c61a56eadba3a099d3a38
@S    SDFVoxelVolume => bc75ddec3ed07697b2259473a518c873
@S    SDFVoxel => d74a04a0d37ae8f2dc735e623d43aecc
***************************
*****     Stages      *****
***************************
@G    Compute => bd387d2349254fa9e6a85f49de3777fd
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int3 NumberOfVoxels_id13;          // Offset:    0 Size:    12
//   float VoxelSpacing_id14;           // Offset:   12 Size:     4
//   float3 VolumeOffset_id15;          // Offset:   16 Size:    12
//
// }
//
// Resource bind info for VoxelVolume_id12
// {
//
//   struct Voxel
//   {
//       
//       float4 valueAndGradient;       // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// VoxelVolume_id12                      UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_uav_structured u0, 16
dcl_input vThreadID.xyz
dcl_temps 2
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 65 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_52da382a3f2c45f18ed3d56ad4ae69be.hlsl"
iadd r0.xyz, cb0[0].xyzx, l(-1, -1, -1, 0)
ult r0.xyz, r0.xyzx, vThreadID.xyzx
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x

#line 74
if_z r0.x

#line 61
  utof r0.x, vThreadID.x
  itof r0.y, cb0[0].x
  add r0.y, r0.y, l(-1.000000)
  mad r0.x, -r0.y, l(0.500000), r0.x

#line 57
  mad r0.x, cb0[0].w, r0.x, cb0[1].x  // r0.x <- <VoxelVolumeToWorldSpace_id15 return value>.x

#line 34
  imul null, r1.x, cb0[0].y, cb0[0].x
  imad r1.y, vThreadID.y, cb0[0].x, vThreadID.x
  imad r1.x, vThreadID.z, r1.x, r1.y  // r1.x <- <CalculateVoxelVolumeIndex_id10 return value>

#line 42
  mov r0.yzw, l(0,1.000000,0.000000,0.000000)
  store_structured u0.xyzw, r1.x, l(0), r0.xyzw

#line 79
endif 

#line 94
ret 
// Approximately 17 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct Voxel 
{
    float4 valueAndGradient;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int3 NumberOfVoxels_id13;
    float VoxelSpacing_id14;
    float3 VolumeOffset_id15;
};
RWStructuredBuffer<Voxel> VoxelVolume_id12;
uint CalculateVoxelVolumeIndex_id10(uint3 coordinate)
{
    return dot(coordinate, uint3(1, NumberOfVoxels_id13.x, NumberOfVoxels_id13.x * NumberOfVoxels_id13.y));
}
float Compute_id18(float3 p)
{
    return p.x;
}
void SetVoxel_id12(uint3 coordinate, Voxel voxel)
{
    VoxelVolume_id12[CalculateVoxelVolumeIndex_id10(coordinate)] = voxel;
}
Voxel CreateVoxel_id8(float4 valueAndGradient = 0.0f, uint materialIndex = 0)
{
    Voxel voxel;
    voxel.valueAndGradient = valueAndGradient;
    return voxel;
}
float3 SDFNormal_id2(float3 p, float e = 0.01)
{
    float3 gradient = float3((Compute_id18(p + float3(e, 0, 0)) - Compute_id18(p - float3(e, 0, 0))) / (2 * e), (Compute_id18(p + float3(0, e, 0)) - Compute_id18(p - float3(0, e, 0))) / (2 * e), (Compute_id18(p + float3(0, 0, e)) - Compute_id18(p - float3(0, 0, e))) / (2 * e));
    return normalize(gradient + 0.0000001);
}
float3 VoxelVolumeToWorldSpace_id15(float3 position)
{
    return position + VolumeOffset_id15;
}
float3 VoxelToVoxelVolumeSpace_id13(uint3 coordinate, float3 position = 0.0f)
{
    return VoxelSpacing_id14 * (position + coordinate - 0.5f * (NumberOfVoxels_id13 - 1.0f));
}
bool IsOutOfVoxelVolumeBounds_id9(uint3 coordinate)
{
    return any(coordinate > NumberOfVoxels_id13 - 1);
}
void Compute_id17(inout CS_STREAMS streams)
{
    uint3 voxelID = streams.DispatchThreadId_id1;
    if (IsOutOfVoxelVolumeBounds_id9(voxelID))
    {
        return;
    }
    float3 worldPosition = VoxelVolumeToWorldSpace_id15(VoxelToVoxelVolumeSpace_id13(voxelID));
    float4 valueAndGradient;
    valueAndGradient.x = Compute_id18(worldPosition);
    valueAndGradient.yzw = SDFNormal_id2(worldPosition);
    Voxel voxel = CreateVoxel_id8(valueAndGradient);
    SetVoxel_id12(voxelID, voxel);
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id17(streams);
}
