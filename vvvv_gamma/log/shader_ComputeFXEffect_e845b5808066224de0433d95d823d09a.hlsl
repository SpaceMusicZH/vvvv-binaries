/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin ParticlesSelector_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    PosXThreshold_id13 => ParticlesSelector_ComputeFX.PosXThreshold
***************************
******  Resources    ******
***************************
@R    Buffer_P_PosSize_id12 => ParticlesSelector_ComputeFX.Buffer_P_PosSize [Stage: Compute, Slot: (0-0)]
@R    SelectedParticles_id11 => ParticlesSelector_ComputeFX.SelectedParticles [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    ParticlesSelector_ComputeFX => 06790cf2325a99cac91cbc9dd80b864d
***************************
*****     Stages      *****
***************************
@G    Compute => c30034b5f06cf02dccaa2d32216e9856
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float PosXThreshold_id13;          // Offset:    0 Size:     4
//
// }
//
// Resource bind info for Buffer_P_PosSize_id12
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
// Resource bind info for SelectedParticles_id11
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Buffer_P_PosSize_id12             texture  struct         r/o             t0      1 
// SelectedParticles_id11                UAV  struct      append             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_resource_structured t0, 16
dcl_uav_structured u0, 16
dcl_input vThreadID.x
dcl_temps 2
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 29 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_e845b5808066224de0433d95d823d09a.hlsl"
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.xyzw, vThreadID.x, l(0), t0.xyzw  // r0.x <- Data.x; r0.y <- Data.y; r0.z <- Data.z; r0.w <- Data.w

#line 30
lt r1.x, cb0[0].x, r0.x
if_nz r1.x

#line 32
  imm_atomic_alloc r1.x, u0
  store_structured u0.xyzw, r1.x, l(0), r0.xyzw

#line 33
endif 

#line 48
ret 
// Approximately 7 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float PosXThreshold_id13;
};
AppendStructuredBuffer<float4> SelectedParticles_id11;
StructuredBuffer<float4> Buffer_P_PosSize_id12;
void Compute_id2(inout CS_STREAMS streams)
{
    float4 Data = Buffer_P_PosSize_id12[streams.DispatchThreadId_id1.x];
    if (Data.x > PosXThreshold_id13)
    {
        SelectedParticles_id11.Append(Data);
    }
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2(streams);
}
