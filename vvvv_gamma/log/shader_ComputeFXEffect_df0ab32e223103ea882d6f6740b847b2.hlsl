/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMMidiRingBuffer_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 48]
@C    NumberOfVoxels_id11 => SMVoxelVolume.NumberOfVoxels
@C    VoxelSpacing_id12 => SMVoxelVolume.VoxelSpacing
@C    VolumeOffset_id13 => SMVoxelVolume.VolumeOffset
@C    Advance_id16 => SMMidiUtils.Advance
@C    Start_id17 => SMMidiRingBuffer_ComputeFX.Start
@C    BufferLength_id18 => SMMidiRingBuffer_ComputeFX.BufferLength
***************************
******  Resources    ******
***************************
@R    InputValues_id14 => SMMidiUtils.InputValues [Stage: Compute, Slot: (0-0)]
@R    VoxelVolume_id15 => SMMidiUtils.VoxelVolume [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SMMidiRingBuffer_ComputeFX => 37e94fc46f4df7c0addeab2c29f86b16
@S    SMMidiUtils => 5d21e8a9ddf0e18374bc05dd77631702
@S    SMVoxelVolume => ce5fad2dca3f817d4e1b59ada5283ab7
@S    SMMidiNoteDataStruct => f5634bf05bf031b62eb5384e713d4be4
***************************
*****     Stages      *****
***************************
@G    Compute => b7df591e1da01ce1191e5a92701e1c6e
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int3 NumberOfVoxels_id11;          // Offset:    0 Size:    12
//   float VoxelSpacing_id12;           // Offset:   12 Size:     4 [unused]
//   float3 VolumeOffset_id13;          // Offset:   16 Size:    12 [unused]
//   int Advance_id16;                  // Offset:   28 Size:     4
//      = 0x00000001 
//   int Start_id17;                    // Offset:   32 Size:     4
//      = 0x00000000 
//   int BufferLength_id18;             // Offset:   36 Size:     4
//      = 0x00000020 
//
// }
//
// Resource bind info for InputValues_id14
// {
//
//   struct SMMidiNoteData
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for VoxelVolume_id15
// {
//
//   struct SMMidiNoteData
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// InputValues_id14                  texture  struct         r/o             t0      1 
// VoxelVolume_id15                      UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_resource_structured t0, 48
dcl_uav_structured u0, 48
dcl_input vThreadID.xyz
dcl_temps 7
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 82 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_df0ab32e223103ea882d6f6740b847b2.hlsl"
uge r0.xyz, vThreadID.xyzx, cb0[0].xyzx
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x

#line 84
if_z r0.x

#line 69
  imad r0.x, vThreadID.y, cb0[0].x, vThreadID.x  // r0.x <- <CalculateTexelIndex_id3 return value>

#line 77
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, l(0), t0.xyzw  // r1.x <- <GetTexel_id12 return value>.Empty; r1.y <- <GetTexel_id12 return value>.StartTime; r1.z <- <GetTexel_id12 return value>.Note; r1.w <- <GetTexel_id12 return value>.Velocity
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(16), t0.xyzw  // r2.x <- <GetTexel_id12 return value>.Length; r2.y <- <GetTexel_id12 return value>.Channel; r2.z <- <GetTexel_id12 return value>.Constant; r2.w <- <GetTexel_id12 return value>.Id
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r0.xyzw, r0.x, l(32), t0.xyzw  // r0.x <- <GetTexel_id12 return value>.TrackId; r0.y <- <GetTexel_id12 return value>.ModWheel; r0.z <- <GetTexel_id12 return value>.PitchBend; r0.w <- <GetTexel_id12 return value>.Random

#line 89
  imax r3.x, cb0[2].y, -cb0[2].y

#line 64
  iadd r3.yzw, cb0[0].xxyz, l(0, -1, -1, -1)

#line 65
  imul null, r4.x, cb0[0].y, cb0[0].x

#line 64
  mov r5.xy, vThreadID.xyxx

#line 87
  mov r4.y, l(0)  // r4.y <- i
  loop 
    ige r4.z, r4.y, cb0[1].w
    breakc_nz r4.z

#line 89
    iadd r4.z, r4.y, cb0[2].x
    and r4.w, r4.z, l(0x80000000)
    imax r4.z, r4.z, -r4.z
    udiv null, r4.z, r4.z, r3.x
    ineg r5.w, r4.z
    movc r5.z, r4.w, r5.w, r4.z  // r5.z <- z

#line 64
    umin r6.xyz, r3.yzwy, r5.xyzx  // r6.x <- coordinate.x; r6.y <- coordinate.y; r6.z <- coordinate.z

#line 65
    imad r4.z, r6.y, cb0[0].x, r6.x
    imad r4.z, r6.z, r4.x, r4.z  // r4.z <- <CalculateVoxelVolumeIndex_id4 return value>

#line 73
    store_structured u0.xyzw, r4.z, l(0), r1.xyzw
    store_structured u0.xyzw, r4.z, l(16), r2.xyzw
    store_structured u0.xyzw, r4.z, l(32), r0.xyzw

#line 92
    iadd r4.y, r4.y, l(1)
  endloop 
endif 

#line 107
ret 
// Approximately 32 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct SMMidiNoteData 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
struct SMMidiNoteDataFloat 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int3 NumberOfVoxels_id11;
    float VoxelSpacing_id12;
    float3 VolumeOffset_id13;
    int Advance_id16 = 1;
    int Start_id17 = 0;
    int BufferLength_id18 = 32;
};
StructuredBuffer<SMMidiNoteData> InputValues_id14;
RWStructuredBuffer<SMMidiNoteData> VoxelVolume_id15;
uint CalculateVoxelVolumeIndex_id4(uint3 coordinate)
{
    coordinate = clamp(coordinate, 0, NumberOfVoxels_id11 - 1);
    return dot(coordinate, uint3(1, NumberOfVoxels_id11.x, NumberOfVoxels_id11.x * NumberOfVoxels_id11.y));
}
uint CalculateTexelIndex_id3(uint2 coordinate)
{
    return dot(coordinate, uint2(1, NumberOfVoxels_id11.x));
}
void SetVoxel_id11(uint3 coordinate, in SMMidiNoteData voxel)
{
    VoxelVolume_id15[CalculateVoxelVolumeIndex_id4(coordinate)] = voxel;
}
SMMidiNoteData GetTexel_id12(uint2 coordinate)
{
    return InputValues_id14[CalculateTexelIndex_id3(coordinate)];
}
void Compute_id13(inout CS_STREAMS streams)
{
    uint3 uvw = streams.DispatchThreadId_id1.xyz;
    if (any(uvw >= NumberOfVoxels_id11))
        return;
    uint2 uv = uvw.xy;
    SMMidiNoteData texel = GetTexel_id12(uv);

    for (int i = 0; i < Advance_id16; i++)
    {
        uint z = (Start_id17 + i) % BufferLength_id18;
        uvw = uint3(uv.x, uv.y, z);
        SetVoxel_id11(uvw, texel);
    }
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id13(streams);
}
