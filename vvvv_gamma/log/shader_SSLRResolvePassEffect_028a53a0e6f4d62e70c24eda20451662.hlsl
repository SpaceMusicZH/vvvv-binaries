/**************************
***** Compiler Parameters *****
***************************
@P EffectName: SSLRResolvePassEffect
@P   - SSLR.ResolveSamples: 6
@P SSLR.ReduceHighlights: True
***************************
****  ConstantBuffers  ****
***************************
cbuffer Data [Size: 192]
@C    MaxColorMiplevel_id74 => SSLRCommon.MaxColorMiplevel
@C    TraceSizeMax_id75 => SSLRCommon.TraceSizeMax
@C    MaxTraceSamples_id76 => SSLRCommon.MaxTraceSamples
@C    RoughnessFade_id77 => SSLRCommon.RoughnessFade
@C    TemporalTime_id78 => SSLRCommon.TemporalTime
@C    BRDFBias_id79 => SSLRCommon.BRDFBias
@C    ViewFarPlane_id80 => SSLRCommon.ViewFarPlane
@C    ViewInfo_id81 => SSLRCommon.ViewInfo
@C    CameraPosWS_id82 => SSLRCommon.CameraPosWS
@C    WorldAntiSelfOcclusionBias_id83 => SSLRCommon.WorldAntiSelfOcclusionBias
@C    V_id84 => SSLRCommon.V
@C    IVP_id85 => SSLRCommon.IVP
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer Globals [Size: 80]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    PointSampler_id43 => Texturing.PointSampler [Stage: Pixel, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Texture1_id16 => Texturing.Texture1 [Stage: Pixel, Slot: (1-1)]
@R    Texture2_id18 => Texturing.Texture2 [Stage: Pixel, Slot: (2-2)]
@R    Texture3_id20 => Texturing.Texture3 [Stage: Pixel, Slot: (3-3)]
@R    Texture4_id22 => Texturing.Texture4 [Stage: Pixel, Slot: (4-4)]
@R    Data => Data [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    SSLRResolvePass => 7c643796857bd20bb17d6d175b852b01
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    SSLRCommon => 161d9b8711411c56906b0b0d551faeae
@S    Utilities => d8e15010fb2006b8edf6bdc952dd31f0
@S    NormalPack => af1a18518fb63b6295c012c18fe9f9c0
@S    Math => 5b479ddbf6eb15f6934fb90a76ce952a
@S    BRDFMicrofacet => e6c8c59dd59d4fef181ae8322a095acf
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 236 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_SSLRResolvePassEffect_028a53a0e6f4d62e70c24eda20451662.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 240
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 1fbbf45cc82f288f10cf72bf7f0e266c
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Data
// {
//
//   float MaxColorMiplevel_id74;       // Offset:    0 Size:     4
//   float TraceSizeMax_id75;           // Offset:    4 Size:     4
//   float MaxTraceSamples_id76;        // Offset:    8 Size:     4 [unused]
//   float RoughnessFade_id77;          // Offset:   12 Size:     4
//   float TemporalTime_id78;           // Offset:   16 Size:     4
//   float BRDFBias_id79;               // Offset:   20 Size:     4
//   float ViewFarPlane_id80;           // Offset:   24 Size:     4
//   float4 ViewInfo_id81;              // Offset:   32 Size:    16
//   float3 CameraPosWS_id82;           // Offset:   48 Size:    12
//   float WorldAntiSelfOcclusionBias_id83;// Offset:   60 Size:     4 [unused]
//   float4x4 V_id84;                   // Offset:   64 Size:    64 [unused]
//   float4x4 IVP_id85;                 // Offset:  128 Size:    64
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PointSampler_id43                 sampler      NA          NA             s0      1 
// LinearSampler_id44                sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Texture1_id16                     texture  float4          2d             t1      1 
// Texture2_id18                     texture  float4          2d             t2      1 
// Texture3_id20                     texture  float4          2d             t3      1 
// Texture4_id22                     texture  float4          2d             t4      1 
// Data                              cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 0, 0, 0},
                              { 2.000000, -2.000000, 0, 0},
                              { -2.000000, -2.000000, 0, 0},
                              { 0, 2.000000, 0, 0},
                              { -2.000000, 0, 0, 0},
                              { 0, -2.000000, 0, 0},
                              { 2.000000, 0, 0, 0},
                              { 2.000000, 2.000000, 0, 0} }
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB1[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
//
// Initial variable locations:
//   o0.x <- <Shading_id58 return value>.x; o0.y <- <Shading_id58 return value>.y; o0.z <- <Shading_id58 return value>.z; o0.w <- <Shading_id58 return value>.w; 
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y
//
#line 184 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_SSLRResolvePassEffect_028a53a0e6f4d62e70c24eda20451662.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t4.zxyw, s1, l(0.000000)

#line 186
lt r0.x, l(0.001000), r0.x
if_nz r0.x
  sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t3.wxyz, s0, l(0.000000)  // r0.x <- specularRoughnessBuffer.w

#line 179
  sample_l_indexable(texture2d)(float,float,float,float) r1.z, v1.xyxx, t1.yzxw, s0, l(0.000000)  // r1.z <- <SampleZ_id12 return value>

#line 152
  add r0.y, r1.z, -cb0[2].z
  div r0.y, cb0[2].w, r0.y  // r0.y <- <LinearizeZ_id13 return value>

#line 174
  mul r0.y, r0.y, cb0[1].z  // r0.y <- eyeZ

#line 190
  lt r0.y, l(100.000000), r0.y
  lt r0.z, cb0[0].w, r0.x
  or r0.y, r0.z, r0.y

#line 192
  if_z r0.y
    sample_l_indexable(texture2d)(float,float,float,float) r0.yzw, v1.xyxx, t2.wxyz, s0, l(0.000000)  // r0.y <- normalsBuffer.x; r0.z <- normalsBuffer.y; r0.w <- normalsBuffer.z

#line 170
    mad r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
    dp3 r2.x, r0.yzwy, r0.yzwy
    rsq r2.x, r2.x
    mul r0.yzw, r0.yyzw, r2.xxxx  // r0.y <- <DecodeNormal_id11 return value>.x; r0.z <- <DecodeNormal_id11 return value>.y; r0.w <- <DecodeNormal_id11 return value>.z

#line 165
    mad r1.xy, v1.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
    mov r1.w, l(1.000000)
    dp4 r2.x, r1.xyzw, cb0[8].xyzw  // r2.x <- pos.x
    dp4 r2.y, r1.xyzw, cb0[9].xyzw  // r2.y <- pos.y
    dp4 r2.z, r1.xyzw, cb0[10].xyzw  // r2.z <- pos.z
    dp4 r1.x, r1.xyzw, cb0[11].xyzw  // r1.x <- pos.w

#line 166
    div r1.xyz, r2.xyzx, r1.xxxx  // r1.x <- <ComputeWorldPosition_id17 return value>.x; r1.y <- <ComputeWorldPosition_id17 return value>.y; r1.z <- <ComputeWorldPosition_id17 return value>.z

#line 195
    add r1.xyz, -r1.xyzx, cb0[3].xyzx
    dp3 r1.w, r1.xyzx, r1.xyzx
    rsq r1.w, r1.w
    mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- viewVector.x; r1.y <- viewVector.y; r1.z <- viewVector.z

#line 160
    add r2.xy, v1.xyxx, cb0[1].xxxx
    dp2 r1.w, r2.xyxx, l(12.989800, 78.233002, 0.000000, 0.000000)
    sincos r1.w, null, r1.w
    mul r2.xy, r1.wwww, l(43758.546875, 28001.837891, 0.000000, 0.000000)
    frc r2.xy, r2.xyxx  // r2.x <- <RandN2_id23 return value>.x; r2.y <- <RandN2_id23 return value>.y

#line 197
    mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)  // r2.x <- blueNoise.x; r2.y <- blueNoise.y

#line 199
    dp3_sat r0.y, r0.yzwy, r1.xyzx  // r0.y <- NdotV

#line 200
    mul r0.z, r0.x, l(5.000000)
    add r0.w, -cb0[1].y, l(1.000000)
    log r0.y, r0.y
    mul r0.y, r0.y, l(1.500000)
    exp r0.y, r0.y
    sqrt r0.x, r0.x
    mul r0.xz, r0.xxwx, r0.yyzy
    mul r0.x, r0.z, r0.x  // r0.x <- coneTangent

#line 206
    mov r2.z, -r2.y

#line 215
    mov r1.w, l(1.000000)

#line 203
    mov r3.xyzw, l(0,0,0,0)  // r3.x <- result.x; r3.y <- result.y; r3.z <- result.z; r3.w <- result.w
    mov r0.y, l(0)  // r0.y <- i
    loop 
      ige r0.z, r0.y, l(6)
      breakc_nz r0.z

#line 205
      mul r0.zw, cb1[2].xxxy, icb[r0.y + 0].xxxy  // r0.z <- offsetUV.x; r0.w <- offsetUV.y

#line 206
      dp2 r4.x, r2.xyxx, r0.zwzz  // r4.x <- offsetUV.x
      dp2 r4.y, r2.zxzz, r0.zwzz  // r4.y <- offsetUV.y

#line 207
      add r0.zw, r4.xxxy, v1.xxxy  // r0.z <- neighborUv.x; r0.w <- neighborUv.y

#line 208
      sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r0.zwzz, t4.xyzw, s1, l(0.000000)  // r4.x <- hitPacked.x; r4.y <- hitPacked.y; r4.z <- hitPacked.z

#line 211
      add r0.zw, r4.xxxy, -v1.xxxy
      dp2 r0.z, r0.zwzz, r0.zwzz
      sqrt r0.z, r0.z
      mul r0.z, r0.z, r0.x  // r0.z <- intersectionCircleRadius

#line 212
      mul r0.z, r0.z, cb0[0].y
      log r0.z, r0.z
      max r0.z, r0.z, l(0.000000)
      min r0.z, r0.z, cb0[0].x  // r0.z <- mip

#line 213
      sample_l_indexable(texture2d)(float,float,float,float) r4.xyw, r4.xyxx, t0.xywz, s1, r0.z  // r4.x <- sampleColor.x; r4.y <- sampleColor.y; r4.w <- sampleColor.z

#line 156
      dp3 r0.z, r4.xywx, l(0.212600, 0.715200, 0.072200, 0.000000)  // r0.z <- <Luminance_id26 return value>

#line 214
      add r0.z, r0.z, l(1.000000)
      div r1.xyz, r4.xywx, r0.zzzz  // r1.x <- sampleColor.x; r1.y <- sampleColor.y; r1.z <- sampleColor.z

#line 215
      mad r3.xyzw, r1.xyzw, r4.zzzz, r3.xyzw

#line 216
      iadd r0.y, r0.y, l(1)
    endloop 

#line 217
    mul r0.xyzw, r3.xyzw, l(0.166667, 0.166667, 0.166667, 0.166667)  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z; r0.w <- result.w

#line 156
    dp3 r1.x, r0.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)  // r1.x <- <Luminance_id26 return value>

#line 218
    add r1.x, -r1.x, l(1.000000)
    div r1.xyz, r0.xyzx, r1.xxxx  // r1.x <- result.x; r1.y <- result.y; r1.z <- result.z

#line 219
    mul r0.xyz, r0.wwww, r1.xyzx  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z

#line 220
    max o0.xyzw, r0.xyzw, l(0.000010, 0.000010, 0.000010, 0.000010)
  else   // Prior locations: r0.x <- specularRoughnessBuffer.w
    mov o0.xyzw, l(0,0,0,0)  // o0.x <- <Shading_id58 return value>.x; o0.y <- <Shading_id58 return value>.y; o0.z <- <Shading_id58 return value>.z; o0.w <- <Shading_id58 return value>.w
  endif 
else 
  mov o0.xyzw, l(0,0,0,0)  // o0.x <- <Shading_id58 return value>.x; o0.y <- <Shading_id58 return value>.y; o0.z <- <Shading_id58 return value>.z; o0.w <- <Shading_id58 return value>.w
endif 

#line 229
ret 
// Approximately 83 instruction slots used
***************************
*************************/
const static int ResolveSamples_id87 = 6;
const static bool ReduceHighlights_id88 = true;
static const float2 Offsets_id89[8] = { float2(0, 0), float2(2, -2), float2(-2, -2), float2(0, 2), float2(-2, 0), float2(0, -2), float2(2, 0), float2(2, 2)};
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
typedef uint Half2;
typedef uint2 Half4;
cbuffer Data 
{
    float MaxColorMiplevel_id74;
    float TraceSizeMax_id75;
    float MaxTraceSamples_id76;
    float RoughnessFade_id77;
    float TemporalTime_id78;
    float BRDFBias_id79;
    float ViewFarPlane_id80;
    float4 ViewInfo_id81;
    float3 CameraPosWS_id82;
    float WorldAntiSelfOcclusionBias_id83;
    float4x4 V_id84;
    float4x4 IVP_id85;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float2 UvToClip_id16(float2 uv)
{
    return uv * float2(2, -2) + float2(-1, 1);
}
float LinearizeZ_id13(in float depth)
{
    return ViewInfo_id81.w / (depth - ViewInfo_id81.z);
}
float Luminance_id26(float3 color)
{
    return dot(color, float3(0.2126, 0.7152, 0.0722));
}
float2 RandN2_id23(float2 pos, float2 random)
{
    return frac(sin(dot(pos.xy + random, float2(12.9898, 78.233))) * float2(43758.5453, 28001.8384));
}
float3 ComputeWorldPosition_id17(float2 uv, float rawDepth)
{
    float4 clipPos = float4(UvToClip_id16(uv), rawDepth, 1);
    float4 pos = mul(clipPos, IVP_id85);
    return pos.xyz / pos.w;
}
float3 DecodeNormal_id11(float3 enc)
{
    return normalize(enc * 2 - 1);
}
float3 ComputeViewPosition_id19(float2 uv, float rawDepth)
{
    float eyeZ = LinearizeZ_id13(rawDepth) * ViewFarPlane_id80;
    return float3(UvToClip_id16(uv) * ViewInfo_id81.xy * eyeZ, eyeZ);
}
float SampleZ_id12(in float2 uv)
{
    return Texture1_id16.SampleLevel(PointSampler_id43, uv, 0).r;
}
float4 Shading_id58(inout PS_STREAMS streams)
{
    float2 uv = streams.TexCoord_id62;
    if (Texture4_id22.SampleLevel(LinearSampler_id44, uv, 0).z <= 0.001)
        return 0;
    float4 specularRoughnessBuffer = Texture3_id20.SampleLevel(PointSampler_id43, uv, 0);
    float roughness = specularRoughnessBuffer.a;
    float depth = SampleZ_id12(uv);
    float3 positionVS = ComputeViewPosition_id19(uv, depth);
    if (positionVS.z > 100.0f || roughness > RoughnessFade_id77)
        return 0;
    float4 normalsBuffer = Texture2_id18.SampleLevel(PointSampler_id43, uv, 0);
    float3 normalWS = DecodeNormal_id11(normalsBuffer.rgb);
    float3 positionWS = ComputeWorldPosition_id17(uv, depth);
    float3 viewVector = normalize(CameraPosWS_id82.xyz - positionWS);
    float2 random = RandN2_id23(uv, TemporalTime_id78);
    float2 blueNoise = random.xy * 2.0 - 1.0;
    float2x2 offsetRotationMatrix = float2x2(blueNoise.x, blueNoise.y, -blueNoise.y, blueNoise.x);
    float NdotV = saturate(dot(normalWS, viewVector));
    float coneTangent = lerp(0.0, roughness * 5 * (1.0 - BRDFBias_id79), pow(NdotV, 1.5) * sqrt(roughness));
    float4 result = 0.0;

    for (int i = 0; i < ResolveSamples_id87; i++)
    {
        float2 offsetUV = Offsets_id89[i] * Texture4TexelSize_id23;
        offsetUV = mul(offsetRotationMatrix, offsetUV);
        float2 neighborUv = uv + offsetUV;
        float4 hitPacked = Texture4_id22.SampleLevel(LinearSampler_id44, neighborUv, 0);
        float2 hitUv = hitPacked.xy;
        float hitMask = hitPacked.z;
        float intersectionCircleRadius = coneTangent * length(hitUv - uv);
        float mip = clamp(log2(intersectionCircleRadius * TraceSizeMax_id75), 0.0, MaxColorMiplevel_id74);
        float4 sampleColor = float4(Texture0_id14.SampleLevel(LinearSampler_id44, hitUv, mip).rgb, 1);
        sampleColor.rgb /= 1 + Luminance_id26(sampleColor.rgb);
        result += sampleColor * hitMask;
    }
    result /= ResolveSamples_id87;
    result.rgb /= 1 - Luminance_id26(result.rgb);
    result.rgb *= result.a;
    return max(1e-5, result);
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id58(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
