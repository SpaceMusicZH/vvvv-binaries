/**************************
***** Compiler Parameters *****
***************************
@P EffectName: DrawFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin ConstantColorBillboard_DrawFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 416]
@C    World_id29 => Transformation.World
@C    WorldInverse_id30 => Transformation.WorldInverse
@C    WorldInverseTranspose_id31 => Transformation.WorldInverseTranspose
@C    WorldView_id32 => Transformation.WorldView
@C    WorldViewInverse_id33 => Transformation.WorldViewInverse
@C    WorldViewProjection_id34 => Transformation.WorldViewProjection
@C    WorldScale_id35 => Transformation.WorldScale
@C    EyeMS_id36 => Transformation.EyeMS
cbuffer PerView [Size: 352]
@C    View_id22 => Transformation.View
@C    ViewInverse_id23 => Transformation.ViewInverse
@C    Projection_id24 => Transformation.Projection
@C    ProjectionInverse_id25 => Transformation.ProjectionInverse
@C    ViewProjection_id26 => Transformation.ViewProjection
@C    ProjScreenRay_id27 => Transformation.ProjScreenRay
@C    Eye_id28 => Transformation.Eye
cbuffer Globals [Size: 96]
@C    ColorInput_id46 => ConstantColor_DrawFX.ColorInput
@C    FixedSize_id47 => ConstantColorBillboard_DrawFX.FixedSize
@C    Size_id48 => ConstantColorBillboard_DrawFX.Size
@C    ViewSpaceTransformation_id49 => ConstantColorBillboard_DrawFX.ViewSpaceTransformation
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    PerView => PerView [Stage: Vertex, Slot: (1-1)]
@R    Globals => Globals [Stage: Vertex, Slot: (2-2)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ConstantColorBillboard_DrawFX => 6c31ed47129ccb2bbb2b3f941b6491be
@S    ConstantColor_DrawFX => c24e8c4f4e0a7e31da0786e0b11b6010
@S    VS_PS_Base => f089dc4ce5d5868b962b08793ef74fd9
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    PositionStream4 => 992b49e1b4dd13d8ef84a05830d70229
@S    NormalStream => ea68512133899a045766d21afb59733a
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    ColorBase => b8b78679285939723aa5d9647437398b
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
***************************
*****     Stages      *****
***************************
@G    Vertex => d389fe1f52fdc37b744044a400b2b5cb
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 World_id29;               // Offset:    0 Size:    64 [unused]
//   float4x4 WorldInverse_id30;        // Offset:   64 Size:    64 [unused]
//   float4x4 WorldInverseTranspose_id31;// Offset:  128 Size:    64 [unused]
//   float4x4 WorldView_id32;           // Offset:  192 Size:    64
//   float4x4 WorldViewInverse_id33;    // Offset:  256 Size:    64 [unused]
//   float4x4 WorldViewProjection_id34; // Offset:  320 Size:    64 [unused]
//   float3 WorldScale_id35;            // Offset:  384 Size:    12 [unused]
//   float4 EyeMS_id36;                 // Offset:  400 Size:    16 [unused]
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id22;                // Offset:    0 Size:    64 [unused]
//   float4x4 ViewInverse_id23;         // Offset:   64 Size:    64 [unused]
//   float4x4 Projection_id24;          // Offset:  128 Size:    64
//   float4x4 ProjectionInverse_id25;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id26;      // Offset:  256 Size:    64 [unused]
//   float2 ProjScreenRay_id27;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id28;                   // Offset:  336 Size:    16 [unused]
//
// }
//
// cbuffer Globals
// {
//
//   float4 ColorInput_id46;            // Offset:    0 Size:    16 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 0x3f800000 
//   bool FixedSize_id47;               // Offset:   16 Size:     4
//      = 0x00000000 
//   float2 Size_id48;                  // Offset:   20 Size:     8
//      = 0x3f800000 0x3f800000 
//   float4x4 ViewSpaceTransformation_id49;// Offset:   32 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
// Globals                           cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[16], immediateIndexed
dcl_constantbuffer CB1[12], immediateIndexed
dcl_constantbuffer CB2[6], immediateIndexed
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- __input__.Position_id14.x; v0.y <- __input__.Position_id14.y; v0.z <- __input__.Position_id14.z; v0.w <- __input__.Position_id14.w; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 79 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_b703713d8b76aa7b8f8e3177359dd62c.hlsl"
mov r0.w, l(1.000000)

#line 69
mov r1.x, cb0[12].w
mov r1.y, cb0[13].w
mov r1.z, cb0[14].w
mov r1.w, cb0[15].w
dp4 r2.x, r1.xyzw, cb1[8].xyzw  // r2.x <- pos.x
dp4 r2.y, r1.xyzw, cb1[9].xyzw  // r2.y <- pos.y
dp4 r2.z, r1.xyzw, cb1[10].xyzw  // r2.z <- pos.z
dp4 r2.w, r1.xyzw, cb1[11].xyzw  // r2.w <- pos.w

#line 70
div r2.xyz, r2.xyzx, r2.wwww

#line 74
mov r3.x, cb1[8].x
mov r3.y, cb1[9].y
mov r3.z, l(1.000000)
mul r4.xy, v0.xyxx, cb2[1].yzyy
mov r4.zw, v0.zzzw
dp4 r5.x, r4.xyzw, cb2[2].xyzw
dp4 r5.y, r4.xyzw, cb2[3].xyzw
dp4 r5.z, r4.xyzw, cb2[4].xyzw

#line 78
dp4 r5.w, r4.xyzw, cb2[5].xyzw
add r1.xyzw, r1.xyzw, r5.xyzw

#line 74
mad r0.xyz, r5.xyzx, r3.xyzx, r2.xyzx  // r0.x <- streams.ShadingPosition_id0.x; r0.y <- streams.ShadingPosition_id0.y; r0.z <- streams.ShadingPosition_id0.z

#line 78
dp4 r2.x, r1.xyzw, cb1[8].xyzw  // r2.x <- streams.ShadingPosition_id0.x
dp4 r2.y, r1.xyzw, cb1[9].xyzw  // r2.y <- streams.ShadingPosition_id0.y
dp4 r2.z, r1.xyzw, cb1[10].xyzw  // r2.z <- streams.ShadingPosition_id0.z
dp4 r2.w, r1.xyzw, cb1[11].xyzw  // r2.w <- streams.ShadingPosition_id0.w

#line 79
movc o0.xyzw, cb2[1].xxxx, r0.xyzw, r2.xyzw

#line 82
ret 
// Approximately 27 instruction slots used
@G    Pixel => 2ab39ddc2df6ad58f2a9283bd8bf0c34
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float4 ColorInput_id46;            // Offset:    0 Size:    16
//      = 0x3f800000 0x3f800000 0x3f800000 0x3f800000 
//   bool FixedSize_id47;               // Offset:   16 Size:     4 [unused]
//      = 0x00000000 
//   float2 Size_id48;                  // Offset:   20 Size:     8 [unused]
//      = 0x3f800000 0x3f800000 
//   float4x4 ViewSpaceTransformation_id49;// Offset:   32 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_output o0.xyzw
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 60 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_b703713d8b76aa7b8f8e3177359dd62c.hlsl"
mov o0.xyzw, cb0[0].xyzw
ret 
// Approximately 2 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
};
struct VS_STREAMS 
{
    float4 Position_id14;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
};
struct VS_INPUT 
{
    float4 Position_id14 : POSITION;
};
cbuffer PerDraw 
{
    float4x4 World_id29;
    float4x4 WorldInverse_id30;
    float4x4 WorldInverseTranspose_id31;
    float4x4 WorldView_id32;
    float4x4 WorldViewInverse_id33;
    float4x4 WorldViewProjection_id34;
    float3 WorldScale_id35;
    float4 EyeMS_id36;
};
cbuffer PerView 
{
    float4x4 View_id22;
    float4x4 ViewInverse_id23;
    float4x4 Projection_id24;
    float4x4 ProjectionInverse_id25;
    float4x4 ViewProjection_id26;
    float2 ProjScreenRay_id27;
    float4 Eye_id28;
};
cbuffer Globals 
{
    float4 ColorInput_id46 = float4(1, 1, 1, 1);
    bool FixedSize_id47 = false;
    float2 Size_id48 = float2(1, 1);
    float4x4 ViewSpaceTransformation_id49;
};
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.ColorTarget_id2 = ColorInput_id46;
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id14 = __input__.Position_id14;
    float4 pos = WorldView_id32[3];
    if (FixedSize_id47)
    {
        pos = mul(pos, Projection_id24);
        pos.xyz /= pos.w;
        float aX = Projection_id24[0][0];
        float aY = Projection_id24[1][1];
        float3 aspectRatio = float3(aX, aY, 1);
        streams.ShadingPosition_id0 = float4(pos.xyz + mul(streams.Position_id14 * float4(Size_id48, 1, 1), ViewSpaceTransformation_id49).xyz * aspectRatio, 1);
    }
    else
    {
        streams.ShadingPosition_id0 = mul(pos + mul(streams.Position_id14 * float4(Size_id48, 1, 1), ViewSpaceTransformation_id49), Projection_id24);
    }
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    return __output__;
}
