/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin SMVideoQueueVisualizer_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 32]
@C    NumberOfVoxels_id11 => SMVoxelVolume.NumberOfVoxels
@C    VoxelSpacing_id12 => SMVoxelVolume.VoxelSpacing
@C    VolumeOffset_id13 => SMVoxelVolume.VolumeOffset
***************************
******  Resources    ******
***************************
@R    VoxelVolume_id14 => SMVideoQueueVisualizer_ComputeFX.VoxelVolume [Stage: Compute, Slot: (0-0)]
@R    Vertices_id15 => SMVideoQueueVisualizer_ComputeFX.Vertices [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SMVideoQueueVisualizer_ComputeFX => 974e6949d4e4f1fb90406391f90ba61c
@S    SMVoxelVolume => ce5fad2dca3f817d4e1b59ada5283ab7
@S    SMMidiNoteDataStruct => f5634bf05bf031b62eb5384e713d4be4
***************************
*****     Stages      *****
***************************
@G    Compute => 5e867bfd1ce893693e11e66c5afa001b
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int3 NumberOfVoxels_id11;          // Offset:    0 Size:    12
//   float VoxelSpacing_id12;           // Offset:   12 Size:     4
//   float3 VolumeOffset_id13;          // Offset:   16 Size:    12
//
// }
//
// Resource bind info for VoxelVolume_id14
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
// Resource bind info for Vertices_id15
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// VoxelVolume_id14                  texture  struct         r/o             t0      1 
// Vertices_id15                         UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_resource_structured t0, 16
dcl_uav_structured u0, 16
dcl_input vThreadID.xyz
dcl_temps 3
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 92 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_6345450cd70b45d6e0354af793fef9b6.hlsl"
uge r0.xyz, vThreadID.xyzx, cb0[0].xyzx
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x

#line 94
if_z r0.x

#line 61
  iadd r0.xyz, cb0[0].xyzx, l(-1, -1, -1, 0)
  umin r0.xyz, r0.xyzx, vThreadID.xyzx  // r0.x <- coordinate.x; r0.y <- coordinate.y; r0.z <- coordinate.z

#line 62
  imul null, r0.w, cb0[0].y, cb0[0].x
  imad r0.x, r0.y, cb0[0].x, r0.x
  imad r0.x, r0.z, r0.w, r0.x  // r0.x <- <CalculateVoxelVolumeIndex_id4 return value>

#line 87
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, l(0), t0.xyzw  // r1.x <- <GetVoxel_id11 return value>.x; r1.y <- <GetVoxel_id11 return value>.y; r1.z <- <GetVoxel_id11 return value>.z; r1.w <- <GetVoxel_id11 return value>.w

#line 83
  utof r0.yzw, vThreadID.xxyz
  add r0.yzw, r0.yyzw, cb0[1].xxyz
  itof r2.xyz, cb0[0].xyzx
  add r2.xyz, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r0.yzw, -r2.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), r0.yyzw

#line 79
  mad r0.yzw, cb0[0].wwww, r0.yyzw, cb0[1].xxyz  // r0.y <- <VoxelVolumeToWorldSpace_id7 return value>.x; r0.z <- <VoxelVolumeToWorldSpace_id7 return value>.y; r0.w <- <VoxelVolumeToWorldSpace_id7 return value>.z

#line 70
  mov_sat r1.xyzw, r1.xyzw  // r1.x <- rgba.x; r1.y <- rgba.y; r1.z <- rgba.z; r1.w <- rgba.w

#line 74
  mul r1.xyzw, r1.xyzw, l(255.000000, 255.000000, 255.000000, 255.000000)
  ftou r1.xyzw, r1.xyzw  // r1.x <- R; r1.y <- G; r1.z <- B; r1.w <- A

#line 75
  imad r1.x, r1.y, l(256), r1.x
  imad r1.x, r1.z, l(0x00010000), r1.x
  imad r1.w, r1.w, l(0x01000000), r1.x  // r1.w <- <PackToFloat_id13 return value>

#line 66
  mul r1.xyz, r0.yzwy, l(1.000000, 1.000000, -1.000000, 0.000000)
  store_structured u0.xyzw, r0.x, l(0), r1.xyzw

#line 99
endif 

#line 114
ret 
// Approximately 26 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct SMMidiNoteData 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
struct SMMidiNoteDataFloat 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int3 NumberOfVoxels_id11;
    float VoxelSpacing_id12;
    float3 VolumeOffset_id13;
};
StructuredBuffer<float4> VoxelVolume_id14;
RWStructuredBuffer<float4> Vertices_id15;
uint CalculateVoxelVolumeIndex_id4(uint3 coordinate)
{
    coordinate = clamp(coordinate, 0, NumberOfVoxels_id11 - 1);
    return dot(coordinate, uint3(1, NumberOfVoxels_id11.x, NumberOfVoxels_id11.x * NumberOfVoxels_id11.y));
}
void SetVertex_id12(uint3 coordinate, in float4 vertex)
{
    Vertices_id15[CalculateVoxelVolumeIndex_id4(coordinate)] = vertex;
}
float PackToFloat_id13(float4 rgba)
{
    rgba = saturate(rgba);
    uint R = (uint)(rgba.r * 255.0);
    uint G = (uint)(rgba.g * 255.0);
    uint B = (uint)(rgba.b * 255.0);
    uint A = (uint)(rgba.a * 255.0);
    return asfloat(R << 0 | G << 8 | B << 16 | A << 24);
}
float3 VoxelVolumeToWorldSpace_id7(float3 position)
{
    return position + VolumeOffset_id13;
}
float3 VoxelToVoxelVolumeSpace_id5(uint3 coordinate, float3 position = 0.0f)
{
    return VoxelSpacing_id12 * (position + coordinate - 0.5f * (NumberOfVoxels_id11 - 1.0f));
}
float4 GetVoxel_id11(uint3 coordinate)
{
    return VoxelVolume_id14[CalculateVoxelVolumeIndex_id4(coordinate)];
}
void Compute_id14(inout CS_STREAMS streams)
{
    uint3 uvw = streams.DispatchThreadId_id1.xyz;
    if (any(uvw >= NumberOfVoxels_id11))
        return;
    float4 x = GetVoxel_id11(uvw);
    float4 v;
    v.xyz = VoxelVolumeToWorldSpace_id7(VoxelToVoxelVolumeSpace_id5(uvw, VolumeOffset_id13));
    v.w = PackToFloat_id13(x);
    v.z = -v.z;
    SetVertex_id12(uvw, v);
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id14(streams);
}
