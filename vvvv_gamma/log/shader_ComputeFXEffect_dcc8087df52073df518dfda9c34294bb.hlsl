/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin CalcDispatchArgs_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    ThreadGroupSize_id13 => CalcDispatchArgs_ComputeFX.ThreadGroupSize
***************************
******  Resources    ******
***************************
@R    ArgsBuffer_id12 => CalcDispatchArgs_ComputeFX.ArgsBuffer [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    CalcDispatchArgs_ComputeFX => 83eef98897bd321f6b50adb5a0f59059
***************************
*****     Stages      *****
***************************
@G    Compute => 493d98b6e8aed01a43fda773171e0af6
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int ThreadGroupSize_id13;          // Offset:    0 Size:     4
//      = 0x00000040 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ArgsBuffer_id12                       UAV    uint         buf             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_uav_typed_buffer (uint,uint,uint,uint) u0
dcl_temps 1
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z
//
#line 27 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_dcc8087df52073df518dfda9c34294bb.hlsl"
ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r0.x, l(0, 0, 0, 0), u0.xyzw
iadd r0.x, r0.x, cb0[0].x
iadd r0.x, r0.x, l(-1)
udiv r0.x, null, r0.x, cb0[0].x
umax r0.x, r0.x, l(1)
store_uav_typed u0.xyzw, l(0,0,0,0), r0.xxxx

#line 28
ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r0.x, l(1, 1, 1, 1), u0.xyzw
iadd r0.x, r0.x, cb0[0].x
iadd r0.x, r0.x, l(-1)
udiv r0.x, null, r0.x, cb0[0].x
umax r0.x, r0.x, l(1)
store_uav_typed u0.xyzw, l(1,1,1,1), r0.xxxx

#line 29
ld_uav_typed_indexable(buffer)(uint,uint,uint,uint) r0.x, l(2, 2, 2, 2), u0.xyzw
iadd r0.x, r0.x, cb0[0].x
iadd r0.x, r0.x, l(-1)
udiv r0.x, null, r0.x, cb0[0].x
umax r0.x, r0.x, l(1)
store_uav_typed u0.xyzw, l(2,2,2,2), r0.xxxx

#line 43
ret 
// Approximately 19 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int ThreadGroupSize_id13 = 64;
};
Buffer<float4> CounterBuffer_id11;
RWBuffer<uint> ArgsBuffer_id12;
void Compute_id2()
{
    ArgsBuffer_id12[0] = max((ArgsBuffer_id12[0] + ThreadGroupSize_id13 - 1) / ThreadGroupSize_id13, 1);
    ArgsBuffer_id12[1] = max((ArgsBuffer_id12[1] + ThreadGroupSize_id13 - 1) / ThreadGroupSize_id13, 1);
    ArgsBuffer_id12[2] = max((ArgsBuffer_id12[2] + ThreadGroupSize_id13 - 1) / ThreadGroupSize_id13, 1);
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2();
}
