/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin SampleTexture_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    Count_id11 => SampleTexture_ComputeFX.Count
@C    SampleLevel_id12 => SampleTexture_ComputeFX.SampleLevel
@C    ConvertToSRgb_id13 => SampleTexture_ComputeFX.ConvertToSRgb
***************************
******  Resources    ******
***************************
@R    TexSampler_id17 => SampleTexture_ComputeFX.TexSampler [Stage: Compute, Slot: (0-0)]
@R    PosBuffer_id14 => SampleTexture_ComputeFX.PosBuffer [Stage: Compute, Slot: (0-0)]
@R    Tex_id16 => SampleTexture_ComputeFX.Tex [Stage: Compute, Slot: (1-1)]
@R    ColorsBuffer_id15 => SampleTexture_ComputeFX.ColorsBuffer [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SampleTexture_ComputeFX => 4824383c1fed03063c078869d28dc455
@S    ColorUtilityTemp => d9aeaf420d094dcd420939cb18fd949f
***************************
*****     Stages      *****
***************************
@G    Compute => c01a0600233f6607f2bbeb49313494de
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   uint Count_id11;                   // Offset:    0 Size:     4
//      = 0x00000001 
//   float SampleLevel_id12;            // Offset:    4 Size:     4
//   bool ConvertToSRgb_id13;           // Offset:    8 Size:     4
//
// }
//
// Resource bind info for ColorsBuffer_id15
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// TexSampler_id17                   sampler      NA          NA             s0      1 
// PosBuffer_id14                    texture  float2         buf             t0      1 
// Tex_id16                          texture  float4          2d             t1      1 
// ColorsBuffer_id15                     UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_uav_structured u0, 16
dcl_input vThreadID.x
dcl_temps 4
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 49 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_3e43ba06f5eb39d2fdead6c051633c4a.hlsl"
if_nz cb0[0].z

#line 54
  ult r0.x, vThreadID.x, cb0[0].x
  if_nz r0.x
    ld_indexable(buffer)(float,float,float,float) r0.xy, vThreadID.xxxx, t0.xyzw  // r0.x <- uv.x; r0.y <- uv.y

#line 55
    sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s0, cb0[0].y  // r0.x <- col.x; r0.y <- col.y; r0.z <- col.z; r0.w <- col.w

#line 41
    log r1.xyz, r0.xyzx
    mul r1.xyz, r1.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
    exp r1.xyz, r1.xyzx
    mad r1.xyz, r1.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)  // r1.x <- higher.x; r1.y <- higher.y; r1.z <- higher.z

#line 43
    ge r2.xyz, l(0.003131, 0.003131, 0.003131, 0.000000), r0.xyzx
    and r2.xyz, r2.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)  // r2.x <- cutoff.x; r2.y <- cutoff.y; r2.z <- cutoff.z

#line 44
    mad r3.xyz, r0.xyzx, l(12.920000, 12.920000, 12.920000, 0.000000), -r1.xyzx
    mad r0.xyz, r2.xyzx, r3.xyzx, r1.xyzx  // r0.x <- RGBa.x; r0.y <- RGBa.y; r0.z <- RGBa.z

#line 56
    store_structured u0.xyzw, vThreadID.x, l(0), r0.xyzw
  endif 

#line 57
else 

#line 63
  ult r0.x, vThreadID.x, cb0[0].x
  if_nz r0.x
    ld_indexable(buffer)(float,float,float,float) r0.xy, vThreadID.xxxx, t0.xyzw  // r0.x <- uv.x; r0.y <- uv.y

#line 64
    sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s0, cb0[0].y
    store_structured u0.xyzw, vThreadID.x, l(0), r0.xyzw
  endif 

#line 65
endif 

#line 80
ret 
// Approximately 24 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    uint Count_id11 = 1;
    float SampleLevel_id12;
    bool ConvertToSRgb_id13;
};
Buffer<float2> PosBuffer_id14;
RWStructuredBuffer<float4> ColorsBuffer_id15;
Texture2D Tex_id16;
SamplerState TexSampler_id17 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = clamp;
    AddressV = clamp;
    AddressW = clamp;
    BorderColor = float4(0, 0, 0, 0);
};
float4 LinearToSRgbPrecise_id3(float4 RGBa)
{
    float3 rgb = RGBa.rgb;
    float3 higher = 1.055 * pow(rgb, 1.0 / 2.4) - 0.055;
    float3 lower = rgb * 12.92f;
    float3 cutoff = step(rgb, 0.0031308);
    RGBa.rgb = lerp(higher, lower, cutoff);
    return RGBa;
}
void Compute_id2(inout CS_STREAMS streams)
{
    if (ConvertToSRgb_id13)
    {
        uint sampleID = streams.DispatchThreadId_id1.x;
        if (sampleID >= Count_id11)
            return;
        float2 uv = PosBuffer_id14[sampleID];
        float4 col = Tex_id16.SampleLevel(TexSampler_id17, uv, SampleLevel_id12);
        ColorsBuffer_id15[sampleID] = LinearToSRgbPrecise_id3(col);
    }
    else
    {
        uint sampleID = streams.DispatchThreadId_id1.x;
        if (sampleID >= Count_id11)
            return;
        float2 uv = PosBuffer_id14[sampleID];
        ColorsBuffer_id15[sampleID] = Tex_id16.SampleLevel(TexSampler_id17, uv, SampleLevel_id12);
    }
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2(streams);
}
