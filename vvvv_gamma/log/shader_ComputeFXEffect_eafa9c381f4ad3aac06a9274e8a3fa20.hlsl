/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin Fluid3DComputeVelocityDivergence_Internal_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    FluidDimensions_id11 => Fluid3DGlobals.FluidDimensions
@C    Timestep_id12 => Fluid3DGlobals.Timestep
***************************
******  Resources    ******
***************************
@R    Texture_Velocity_id13 => Fluid3DComputeVelocityDivergence_Internal_ComputeFX.Texture_Velocity [Stage: Compute, Slot: (0-0)]
@R    Texture_ObstaclesGradient_id14 => Fluid3DComputeVelocityDivergence_Internal_ComputeFX.Texture_ObstaclesGradient [Stage: Compute, Slot: (1-1)]
@R    Texture_ObstVelocity_id15 => Fluid3DComputeVelocityDivergence_Internal_ComputeFX.Texture_ObstVelocity [Stage: Compute, Slot: (2-2)]
@R    Texture_Divergence_id16 => Fluid3DComputeVelocityDivergence_Internal_ComputeFX.Texture_Divergence [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    Fluid3DComputeVelocityDivergence_Internal_ComputeFX => 2b2142dc0877c9b36d23b08744a6f938
@S    Fluid3DGlobals => fbecbddf8a1fd6a33748892251f2ebdf
***************************
*****     Stages      *****
***************************
@G    Compute => ab6a244eadd11d1d5ed3d672d44e3150
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float3 FluidDimensions_id11;       // Offset:    0 Size:    12
//   float Timestep_id12;               // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Texture_Velocity_id13             texture  float3          3d             t0      1 
// Texture_ObstaclesGradient_id14    texture   float          3d             t1      1 
// Texture_ObstVelocity_id15         texture  float3          3d             t2      1 
// Texture_Divergence_id16               UAV   float          3d             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadID.xyz
dcl_temps 6
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 41 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_eafa9c381f4ad3aac06a9274e8a3fa20.hlsl"
ftou r0.xyz, cb0[0].xyzx  // r0.x <- dim.x; r0.y <- dim.y; r0.z <- dim.z

#line 45
iadd r1.xyzw, vThreadID.xyxy, l(-1, -1, 1, 1)  // r1.x <- LEFTCELL.x; r1.y <- BOTTOMCELL.y

#line 47
iadd r0.xyz, r0.xyzx, l(-1, -1, -1, 0)

#line 45
umin r2.xy, r0.xyxx, r1.zwzz  // r2.x <- RIGHTCELL.x; r2.y <- TOPCELL.y

#line 47
iadd r3.xz, vThreadID.zzzz, l(1, 0, -1, 0)  // r3.z <- DOWNCELL.z
umin r0.z, r0.z, r3.x  // r0.z <- UPCELL.z

#line 36
mov r4.x, r1.x
mov r4.yz, vThreadID.yyzy
mov r4.w, l(0)
ld_indexable(texture3d)(float,float,float,float) r5.x, r4.xyzw, t1.xyzw
lt r5.x, l(0.900000), r5.x  // r5.x <- <IsBoundaryCell_id3 return value>

#line 54
if_nz r5.x

#line 32
  ld_indexable(texture3d)(float,float,float,float) r5.x, r4.xyzw, t2.xyzw  // r5.x <- <GetObstVelocity_id2 return value>.x

#line 55
else 

#line 48
  ld_indexable(texture3d)(float,float,float,float) r5.x, r4.xyzw, t0.xyzw

#line 55
endif 

#line 36
mov r4.x, r2.x
ld_indexable(texture3d)(float,float,float,float) r5.y, r4.xyzw, t1.yxzw
lt r5.y, l(0.900000), r5.y  // r5.y <- <IsBoundaryCell_id3 return value>

#line 56
if_nz r5.y

#line 32
  ld_indexable(texture3d)(float,float,float,float) r5.y, r4.xyzw, t2.yxzw  // r5.y <- <GetObstVelocity_id2 return value>.x

#line 57
else 

#line 49
  ld_indexable(texture3d)(float,float,float,float) r5.y, r4.xyzw, t0.yxzw

#line 57
endif 

#line 36
mov r1.xz, vThreadID.xxzx
mov r1.w, l(0)
ld_indexable(texture3d)(float,float,float,float) r4.x, r1.xyzw, t1.xyzw
lt r4.x, l(0.900000), r4.x  // r4.x <- <IsBoundaryCell_id3 return value>

#line 58
if_nz r4.x

#line 32
  ld_indexable(texture3d)(float,float,float,float) r4.x, r1.xyzw, t2.yxzw  // r4.x <- <GetObstVelocity_id2 return value>.y

#line 59
else 

#line 50
  ld_indexable(texture3d)(float,float,float,float) r4.x, r1.xyzw, t0.yxzw

#line 59
endif 

#line 36
mov r2.xzw, r1.xxzw
ld_indexable(texture3d)(float,float,float,float) r1.x, r2.xyzw, t1.xyzw
lt r1.x, l(0.900000), r1.x  // r1.x <- <IsBoundaryCell_id3 return value>

#line 60
if_nz r1.x

#line 32
  ld_indexable(texture3d)(float,float,float,float) r1.x, r2.xyzw, t2.yxzw  // r1.x <- <GetObstVelocity_id2 return value>.y

#line 61
else 

#line 51
  ld_indexable(texture3d)(float,float,float,float) r1.x, r2.xyzw, t0.yxzw

#line 61
endif 

#line 36
mov r3.xy, vThreadID.xyxx
mov r3.w, l(0)
ld_indexable(texture3d)(float,float,float,float) r1.y, r3.xyzw, t1.yxzw
lt r1.y, l(0.900000), r1.y  // r1.y <- <IsBoundaryCell_id3 return value>

#line 62
if_nz r1.y

#line 32
  ld_indexable(texture3d)(float,float,float,float) r1.y, r3.xyzw, t2.xzyw  // r1.y <- <GetObstVelocity_id2 return value>.z

#line 63
else 

#line 52
  ld_indexable(texture3d)(float,float,float,float) r1.y, r3.xyzw, t0.xzyw

#line 63
endif 

#line 36
mov r0.xyw, r3.xyxw
ld_indexable(texture3d)(float,float,float,float) r1.z, r0.xyzw, t1.yzxw
lt r1.z, l(0.900000), r1.z  // r1.z <- <IsBoundaryCell_id3 return value>

#line 64
if_nz r1.z

#line 32
  ld_indexable(texture3d)(float,float,float,float) r1.z, r0.xyzw, t2.xyzw  // r1.z <- <GetObstVelocity_id2 return value>.z

#line 65
else 

#line 53
  ld_indexable(texture3d)(float,float,float,float) r1.z, r0.xyzw, t0.xyzw

#line 65
endif 

#line 66
add r0.x, -r5.x, r5.y
add r0.y, -r4.x, r1.x
add r0.x, r0.y, r0.x
add r0.y, -r1.y, r1.z
add r0.x, r0.y, r0.x
mul r0.x, r0.x, l(0.500000)  // r0.x <- divergence

#line 67
store_uav_typed u0.xyzw, vThreadID.xyzz, r0.xxxx

#line 82
ret 
// Approximately 66 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float3 FluidDimensions_id11;
    float Timestep_id12;
};
Texture3D<float3> Texture_Velocity_id13;
Texture3D<float> Texture_ObstaclesGradient_id14;
Texture3D<float3> Texture_ObstVelocity_id15;
RWTexture3D<float> Texture_Divergence_id16;
float3 GetObstVelocity_id2(float3 cellTexCoords)
{
    return Texture_ObstVelocity_id15[cellTexCoords];
}
bool IsBoundaryCell_id3(float3 cellTexCoords)
{
    return (Texture_ObstaclesGradient_id14[cellTexCoords].r > 0.9);
}
void Compute_id4(inout CS_STREAMS streams)
{
    uint3 i = streams.DispatchThreadId_id1;
    uint3 dim = FluidDimensions_id11;
    uint3 LEFTCELL = uint3(max(i.x - 1, 0), i.y, i.z);
    uint3 RIGHTCELL = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
    uint3 BOTTOMCELL = uint3(i.x, max(i.y - 1, 0), i.z);
    uint3 TOPCELL = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
    uint3 DOWNCELL = uint3(i.x, i.y, max(i.z - 1, 0));
    uint3 UPCELL = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));
    float3 fieldL = Texture_Velocity_id13[LEFTCELL];
    float3 fieldR = Texture_Velocity_id13[RIGHTCELL];
    float3 fieldB = Texture_Velocity_id13[BOTTOMCELL];
    float3 fieldT = Texture_Velocity_id13[TOPCELL];
    float3 fieldD = Texture_Velocity_id13[DOWNCELL];
    float3 fieldU = Texture_Velocity_id13[UPCELL];
    if (IsBoundaryCell_id3(LEFTCELL))
        fieldL = GetObstVelocity_id2(LEFTCELL);
    if (IsBoundaryCell_id3(RIGHTCELL))
        fieldR = GetObstVelocity_id2(RIGHTCELL);
    if (IsBoundaryCell_id3(BOTTOMCELL))
        fieldB = GetObstVelocity_id2(BOTTOMCELL);
    if (IsBoundaryCell_id3(TOPCELL))
        fieldT = GetObstVelocity_id2(TOPCELL);
    if (IsBoundaryCell_id3(DOWNCELL))
        fieldD = GetObstVelocity_id2(DOWNCELL);
    if (IsBoundaryCell_id3(UPCELL))
        fieldU = GetObstVelocity_id2(UPCELL);
    float divergence = 0.5 * ((fieldR.x - fieldL.x) + (fieldT.y - fieldB.y) + (fieldU.z - fieldD.z));
    Texture_Divergence_id16[i] = divergence;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id4(streams);
}
