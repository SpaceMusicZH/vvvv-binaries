/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMMidiResampler_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:8 Y:8 Z:1
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    SourceCount_id13 => SMMidiResampler_ComputeFX.SourceCount
@C    TargetCount_id14 => SMMidiResampler_ComputeFX.TargetCount
***************************
******  Resources    ******
***************************
@R    InputValues_id11 => SMMidiResampler_ComputeFX.InputValues [Stage: Compute, Slot: (0-0)]
@R    Outputvalues_id12 => SMMidiResampler_ComputeFX.Outputvalues [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SMMidiResampler_ComputeFX => 85804c9db5535b8fd476dec8cbfb7873
@S    SMMidiNoteDataStruct => f5634bf05bf031b62eb5384e713d4be4
***************************
*****     Stages      *****
***************************
@G    Compute => f2147db4f046e458a9502b7d4685b5e0
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int2 SourceCount_id13;             // Offset:    0 Size:     8
//   int2 TargetCount_id14;             // Offset:    8 Size:     8
//
// }
//
// Resource bind info for InputValues_id11
// {
//
//   struct SMMidiNoteDataFloat
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for Outputvalues_id12
// {
//
//   struct SMMidiNoteData
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// InputValues_id11                  texture  struct         r/o             t0      1 
// Outputvalues_id12                     UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_resource_structured t0, 48
dcl_uav_structured u0, 48
dcl_input vThreadID.xy
dcl_temps 4
dcl_thread_group 8, 8, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 86 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_4a63767a99290f6c2c6784524693de8c.hlsl"
uge r0.xy, vThreadID.xyxx, cb0[0].zwzz
or r0.x, r0.y, r0.x

#line 88
if_z r0.x

#line 77
  imul null, r0.xy, vThreadID.xyxx, cb0[0].xyxx

#line 88
  udiv r0.xy, null, r0.xyxx, cb0[0].zwzz  // r0.x <- sourceUV.x; r0.y <- sourceUV.y

#line 77
  imad r0.z, vThreadID.y, cb0[0].z, vThreadID.x  // r0.z <- <CalculateTexelIndex_id4 return value>
  imad r0.x, r0.y, cb0[0].x, r0.x  // r0.x <- <CalculateTexelIndex_id4 return value>

#line 81
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, l(0), t0.xyzw
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(16), t0.xyzw
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r3.xyzw, r0.x, l(32), t0.xyzw

#line 90
  store_structured u0.xyzw, r0.z, l(0), r1.xyzw
  store_structured u0.xyzw, r0.z, l(16), r2.xyzw
  store_structured u0.xyzw, r0.z, l(32), r3.xyzw
endif 

#line 105
ret 
// Approximately 15 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct SMMidiNoteData 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
struct SMMidiNoteDataFloat 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int2 SourceCount_id13;
    int2 TargetCount_id14;
};
StructuredBuffer<SMMidiNoteDataFloat> InputValues_id11;
RWStructuredBuffer<SMMidiNoteData> Outputvalues_id12;
SMMidiNoteData ToHalfMidiNoteData_id2(SMMidiNoteDataFloat y)
{
    SMMidiNoteData x;
    x.Empty = y.Empty;
    x.StartTime = y.StartTime;
    x.Note = y.Note;
    x.Velocity = y.Velocity;
    x.Length = y.Length;
    x.Channel = y.Channel;
    x.Constant = y.Constant;
    x.Id = y.Id;
    x.TrackId = y.TrackId;
    x.ModWheel = y.ModWheel;
    x.PitchBend = y.PitchBend;
    x.Random = y.Random;
    return x;
}
uint CalculateTexelIndex_id4(uint2 coordinate, uint2 count)
{
    return dot(coordinate, uint2(1, count.x));
}
SMMidiNoteData GetTexel_id5(uint2 coordinate)
{
    return ToHalfMidiNoteData_id2(InputValues_id11[CalculateTexelIndex_id4(coordinate, SourceCount_id13)]);
}
void Compute_id6(inout CS_STREAMS streams)
{
    uint2 uv = streams.DispatchThreadId_id1.xy;
    if (any(uv >= TargetCount_id14))
        return;
    uint2 sourceUV = (uv * SourceCount_id13) / TargetCount_id14;
    uint targetIndex = CalculateTexelIndex_id4(uv, TargetCount_id14);
    Outputvalues_id12[targetIndex] = GetTexel_id5(sourceUV);
}
[numthreads(8, 8, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 8;
    streams.ThreadCountY_id8 = 8;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 8 * 8 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id6(streams);
}
