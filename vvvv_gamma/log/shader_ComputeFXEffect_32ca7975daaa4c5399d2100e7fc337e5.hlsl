/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin Fluid3DVorticity_Internal_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    FluidDimensions_id11 => Fluid3DGlobals.FluidDimensions
@C    Timestep_id12 => Fluid3DGlobals.Timestep
***************************
******  Resources    ******
***************************
@R    Texture_Velocity_id13 => Fluid3DVorticity_Internal_ComputeFX.Texture_Velocity [Stage: Compute, Slot: (0-0)]
@R    Texture_Vorticity_id14 => Fluid3DVorticity_Internal_ComputeFX.Texture_Vorticity [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    Fluid3DVorticity_Internal_ComputeFX => 64f1cb6f98e2b3d9b48714f466a22dd0
@S    Fluid3DGlobals => fbecbddf8a1fd6a33748892251f2ebdf
***************************
*****     Stages      *****
***************************
@G    Compute => 853def910d80c0340437c4f3721e2afc
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float3 FluidDimensions_id11;       // Offset:    0 Size:    12
//   float Timestep_id12;               // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Texture_Velocity_id13             texture  float3          3d             t0      1 
// Texture_Vorticity_id14                UAV  float3          3d             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_resource_texture3d (float,float,float,float) t0
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadID.xyz
dcl_temps 4
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 40 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_32ca7975daaa4c5399d2100e7fc337e5.hlsl"
mov r0.xz, vThreadID.xxzx
mov r0.w, l(0)

#line 31
ftou r1.xyz, cb0[0].xyzx  // r1.x <- dim.x; r1.y <- dim.y; r1.z <- dim.z

#line 37
iadd r1.xyz, r1.xyzx, l(-1, -1, -1, 0)

#line 35
iadd r2.xyzw, vThreadID.xxyy, l(-1, 1, -1, 1)  // r2.x <- LEFTCELL.x; r2.z <- BOTTOMCELL.y
umin r3.xy, r1.xyxx, r2.ywyy  // r3.x <- RIGHTCELL.x; r3.y <- TOPCELL.y

#line 41
mov r0.y, r3.y
ld_indexable(texture3d)(float,float,float,float) r1.xy, r0.xyzw, t0.xzyw  // r1.x <- T.x; r1.y <- T.z

#line 40
mov r0.y, r2.z
ld_indexable(texture3d)(float,float,float,float) r0.xy, r0.xyzw, t0.xzyw  // r0.x <- B.x; r0.y <- B.z

#line 45
add r0.xy, -r0.yxyy, r1.yxyy

#line 38
mov r2.yz, vThreadID.yyzy
mov r2.w, l(0)

#line 39
mov r3.yzw, r2.yyzw

#line 38
ld_indexable(texture3d)(float,float,float,float) r0.zw, r2.xyzw, t0.xwyz  // r0.z <- L.y; r0.w <- L.z

#line 39
ld_indexable(texture3d)(float,float,float,float) r1.xy, r3.xyzw, t0.yzxw  // r1.x <- R.y; r1.y <- R.z

#line 45
add r0.zw, -r0.wwwz, r1.yyyx
add r2.z, -r0.y, r0.w

#line 37
iadd r3.xz, vThreadID.zzzz, l(1, 0, -1, 0)  // r3.z <- DOWNCELL.z
umin r1.z, r1.z, r3.x  // r1.z <- UPCELL.z

#line 42
mov r3.xy, vThreadID.xyxx
mov r3.w, l(0)

#line 43
mov r1.xyw, r3.xyxw

#line 42
ld_indexable(texture3d)(float,float,float,float) r0.yw, r3.xyzw, t0.zxwy  // r0.y <- D.x; r0.w <- D.y

#line 43
ld_indexable(texture3d)(float,float,float,float) r1.xy, r1.xyzw, t0.xyzw  // r1.x <- U.x; r1.y <- U.y

#line 45
add r0.yw, -r0.wwwy, r1.yyyx
add r2.xyw, -r0.yzyy, r0.xwxx
mul r0.xyzw, r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // r0.y <- vorticity.y; r0.z <- vorticity.z; r0.w <- vorticity.x

#line 46
store_uav_typed u0.xyzw, vThreadID.xyzz, r0.xyzw

#line 61
ret 
// Approximately 30 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float3 FluidDimensions_id11;
    float Timestep_id12;
};
Texture3D<float3> Texture_Velocity_id13;
RWTexture3D<float3> Texture_Vorticity_id14;
void Compute_id2(inout CS_STREAMS streams)
{
    uint3 i = streams.DispatchThreadId_id1;
    uint3 dim = FluidDimensions_id11;
    uint3 LEFTCELL = uint3(max(i.x - 1, 0), i.y, i.z);
    uint3 RIGHTCELL = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
    uint3 BOTTOMCELL = uint3(i.x, max(i.y - 1, 0), i.z);
    uint3 TOPCELL = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
    uint3 DOWNCELL = uint3(i.x, i.y, max(i.z - 1, 0));
    uint3 UPCELL = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));
    float3 L = Texture_Velocity_id13[LEFTCELL];
    float3 R = Texture_Velocity_id13[RIGHTCELL];
    float3 B = Texture_Velocity_id13[BOTTOMCELL];
    float3 T = Texture_Velocity_id13[TOPCELL];
    float3 D = Texture_Velocity_id13[DOWNCELL];
    float3 U = Texture_Velocity_id13[UPCELL];
    float3 vorticity;
    vorticity.xyz = 0.5 * float3(((T.z - B.z) - (U.y - D.y)), ((U.x - D.x) - (R.z - L.z)), ((R.y - L.y) - (T.x - B.x)));
    Texture_Vorticity_id14[i] = vorticity.xyz;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2(streams);
}
