/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ShaderFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMSphereImpostor_ShaderFX [{ShadingColor0 = ComputeColor}]
@P ShadingColor0: ComputeColor
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 416]
@C    World_id30 => Transformation.World
@C    WorldInverse_id31 => Transformation.WorldInverse
@C    WorldInverseTranspose_id32 => Transformation.WorldInverseTranspose
@C    WorldView_id33 => Transformation.WorldView
@C    WorldViewInverse_id34 => Transformation.WorldViewInverse
@C    WorldViewProjection_id35 => Transformation.WorldViewProjection
@C    WorldScale_id36 => Transformation.WorldScale
@C    EyeMS_id37 => Transformation.EyeMS
cbuffer PerMaterial [Size: 16]
@C    ParticleSize_id105 => SMSphereImpostor_ShaderFX.ParticleSize
cbuffer PerView [Size: 352]
@C    View_id23 => Transformation.View
@C    ViewInverse_id24 => Transformation.ViewInverse
@C    Projection_id25 => Transformation.Projection
@C    ProjectionInverse_id26 => Transformation.ProjectionInverse
@C    ViewProjection_id27 => Transformation.ViewProjection
@C    ProjScreenRay_id28 => Transformation.ProjScreenRay
@C    Eye_id29 => Transformation.Eye
***************************
******  Resources    ******
***************************
@R    PerMaterial => PerMaterial [Stage: None, Slot: (-1--1)]
@R    ParticlesBuffer_id104 => SMSphereImpostor_ShaderFX.ParticlesBuffer [Stage: None, Slot: (-1--1)]
@R    ParticlesBuffer_id104 => SMSphereImpostor_ShaderFX.ParticlesBuffer [Stage: None, Slot: (-1--1)]
@R    ParticlesBuffer_id104 => SMSphereImpostor_ShaderFX.ParticlesBuffer [Stage: Geometry, Slot: (0-0)]
@R    PerDraw => PerDraw [Stage: Geometry, Slot: (0-0)]
@R    PerMaterial => PerMaterial [Stage: Geometry, Slot: (1-1)]
@R    PerView => PerView [Stage: Geometry, Slot: (2-2)]
@R    PerView => PerView [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    SMSphereImpostor_ShaderFX => 8b002745c46c8e52adb5541f21a1d147
@S    MaterialExtension => bd314d2afed93384fa52af5d242de440
@S    ShadingBase => b0f11f286acc22f5586417a8311cb632
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    PositionStream4 => 992b49e1b4dd13d8ef84a05830d70229
@S    NormalBase => b2b31addde884722f942622026837c39
@S    NormalUpdate => 6fd3c9b8fa943d9951400645fe40502e
@S    NormalStream => ea68512133899a045766d21afb59733a
@S    TransformationBase => 21981c533d88209fdcf07f258ddf01c2
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    SMGridParticleStruct => 1101aaa3dabe64320f382d670ccb694d
***************************
*****     Stages      *****
***************************
@G    Vertex => 960d5a33030250e0d9532c42d83f2afb
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
// POSITION                 0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// VID_ID108_SEM            0   x           0     NONE    uint   x   
// SV_Position              0   xyzw        1      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_input_sgv v0.x, vertex_id
dcl_input v1.xyzw
dcl_output o0.x
dcl_output_siv o1.xyzw, position
//
// Initial variable locations:
//   v0.x <- __input__.VertexID_id107; 
//   v1.x <- __input__.Position_id15.x; v1.y <- __input__.Position_id15.y; v1.z <- __input__.Position_id15.z; v1.w <- __input__.Position_id15.w; 
//   o1.x <- <VSMain return value>.ShadingPosition_id0.x; o1.y <- <VSMain return value>.ShadingPosition_id0.y; o1.z <- <VSMain return value>.ShadingPosition_id0.z; o1.w <- <VSMain return value>.ShadingPosition_id0.w; 
//   o0.x <- <VSMain return value>.VID_id108
//
#line 330 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_d1f26e072550c936b21d585b687c6668.hlsl"
mov o0.x, v0.x
mov o1.xyzw, v1.xyzw
ret 
// Approximately 3 instruction slots used
@G    Geometry => bbe572b8f3d26529a8f6829050a5efb8
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 World_id30;               // Offset:    0 Size:    64
//   float4x4 WorldInverse_id31;        // Offset:   64 Size:    64 [unused]
//   float4x4 WorldInverseTranspose_id32;// Offset:  128 Size:    64 [unused]
//   float4x4 WorldView_id33;           // Offset:  192 Size:    64 [unused]
//   float4x4 WorldViewInverse_id34;    // Offset:  256 Size:    64 [unused]
//   float4x4 WorldViewProjection_id35; // Offset:  320 Size:    64 [unused]
//   float3 WorldScale_id36;            // Offset:  384 Size:    12 [unused]
//   float4 EyeMS_id37;                 // Offset:  400 Size:    16 [unused]
//
// }
//
// cbuffer PerMaterial
// {
//
//   float ParticleSize_id105;          // Offset:    0 Size:     4
//      = 0x3dcccccd 
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id23;                // Offset:    0 Size:    64
//   float4x4 ViewInverse_id24;         // Offset:   64 Size:    64 [unused]
//   float4x4 Projection_id25;          // Offset:  128 Size:    64
//   float4x4 ProjectionInverse_id26;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id27;      // Offset:  256 Size:    64 [unused]
//   float2 ProjScreenRay_id28;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id29;                   // Offset:  336 Size:    16 [unused]
//
// }
//
// Resource bind info for ParticlesBuffer_id104
// {
//
//   struct SMGridParticle
//   {
//       
//       float3 Pos;                    // Offset:    0
//       float3 Vel;                    // Offset:   12
//       float3 Rot;                    // Offset:   24
//       float3 Size;                   // Offset:   36
//       float3 Col;                    // Offset:   48
//       float Mesh;                    // Offset:   60
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ParticlesBuffer_id104             texture  struct         r/o             t0      1 
// PerDraw                           cbuffer      NA          NA            cb0      1 
// PerMaterial                       cbuffer      NA          NA            cb1      1 
// PerView                           cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// VID_ID108_SEM            0   x           0     NONE    uint   x   
// SV_Position              0   xyzw        1      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION_WS              0   xyzw        0     NONE   float   xyzw
// PSIZE_ID106_SEM          0   x           1     NONE   float   x   
// TEXCOORD                 0    yz         1     NONE   float    yz 
// SV_Position              0   xyzw        2      POS   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 1.000000, 0, 0},
                              { 1.000000, 1.000000, 0, 0},
                              { 0, 0, -1.000000, 1.000000},
                              { 1.000000, 0, 1.000000, 1.000000},
                              { 0, 0, -1.000000, -1.000000},
                              { 0, 0, 1.000000, -1.000000} }
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB2[12], immediateIndexed
dcl_resource_structured t0, 64
dcl_input v[1][0].x
dcl_input_siv v[1][1].xyzw, position
dcl_temps 6
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output o0.xyzw
dcl_output o1.x
dcl_output o1.yz
dcl_output_siv o2.xyzw, position
dcl_maxout 4
//
// Initial variable locations:
//   m0 <- triangleStream; 
//   v[0][0].x <- input[0].VID_id108; 
//   v[0][1].x <- input[0].ShadingPosition_id0.x; v[0][1].y <- input[0].ShadingPosition_id0.y; v[0][1].z <- input[0].ShadingPosition_id0.z; v[0][1].w <- input[0].ShadingPosition_id0.w
//
#line 295 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_d1f26e072550c936b21d585b687c6668.hlsl"
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.x, v[0][0].x, l(36), t0.xxxx  // r0.x <- p.Size.x

#line 297
mul r0.w, r0.x, cb1[0].x

#line 298
ge r1.x, l(0.000000), r0.w
if_nz r1.x

#line 299
  ret 
endif 

#line 295
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r1.xyz, v[0][0].x, l(0), t0.xyzx  // r1.x <- p.Pos.x; r1.y <- p.Pos.y; r1.z <- p.Pos.z

#line 296
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- streams.PositionWS_id16.x
dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- streams.PositionWS_id16.y
dp4 r2.z, r1.xyzw, cb0[2].xyzw  // r2.z <- streams.PositionWS_id16.z
dp4 r2.w, r1.xyzw, cb0[3].xyzw  // r2.w <- streams.PositionWS_id16.w

#line 302
dp4 r1.x, r2.xyzw, cb2[0].xyzw  // r1.x <- posView.x
dp4 r1.y, r2.xyzw, cb2[1].xyzw  // r1.y <- posView.y
dp4 r1.z, r2.xyzw, cb2[2].xyzw  // r1.z <- posView.z

#line 307
mov r3.z, l(0)
mul r0.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // r0.x <- streams.PSize_id106

#line 308
mov r4.w, l(1.000000)

#line 304
mov r1.w, l(0)  // r1.w <- i
loop 
  ige r3.w, r1.w, l(4)
  breakc_nz r3.w

#line 306
  mad r5.xy, icb[r1.w + 0].xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)  // r5.x <- streams.TexCoord_id86.x; r5.y <- streams.TexCoord_id86.y

#line 307
  mov r3.xy, icb[r1.w + 2].zwzz
  mad r4.xyz, r3.xyzx, r0.yzwy, r1.xyzx  // r4.x <- viewCornerPos.x; r4.y <- viewCornerPos.y; r4.z <- viewCornerPos.z

#line 308
  dp4 r3.x, r4.xyzw, cb2[8].xyzw  // r3.x <- streams.ShadingPosition_id0.x
  dp4 r3.y, r4.xyzw, cb2[9].xyzw  // r3.y <- streams.ShadingPosition_id0.y
  dp4 r3.w, r4.xyzw, cb2[10].xyzw  // r3.w <- streams.ShadingPosition_id0.z
  dp4 r4.x, r4.xyzw, cb2[11].xyzw  // r4.x <- streams.ShadingPosition_id0.w

#line 316
  mov o0.xyzw, r2.xyzw
  mov o1.x, r0.x
  mov o1.yz, r5.xxyx
  mov o2.x, r3.x
  mov o2.y, r3.y
  mov o2.z, r3.w
  mov o2.w, r4.x
  emit_stream m0

#line 318
  iadd r1.w, r1.w, l(1)
endloop 

#line 319
ret 
// Approximately 40 instruction slots used
@G    Pixel => 9ea3089d845df6dff618ac9a39365b3f
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerView
// {
//
//   float4x4 View_id23;                // Offset:    0 Size:    64
//   float4x4 ViewInverse_id24;         // Offset:   64 Size:    64
//   float4x4 Projection_id25;          // Offset:  128 Size:    64 [unused]
//   float4x4 ProjectionInverse_id26;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id27;      // Offset:  256 Size:    64
//   float2 ProjScreenRay_id28;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id29;                   // Offset:  336 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerView                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION_WS              0   xyzw        0     NONE   float   xyz 
// PSIZE_ID106_SEM          0   x           1     NONE   float   x   
// TEXCOORD                 0    yz         1     NONE   float    yz 
// SV_Position              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[20], immediateIndexed
dcl_input_ps linear v0.xyz
dcl_input_ps linear v1.x
dcl_input_ps linear v1.yz
dcl_output o0.xyzw
dcl_output oDepth
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- __input__.PositionWS_id16.x; v0.y <- __input__.PositionWS_id16.y; v0.z <- __input__.PositionWS_id16.z; v0.w <- __input__.PositionWS_id16.w; 
//   v1.x <- __input__.PSize_id106; v1.y <- __input__.TexCoord_id86.x; v1.z <- __input__.TexCoord_id86.y; 
//   v2.x <- __input__.ShadingPosition_id0.x; v2.y <- __input__.ShadingPosition_id0.y; v2.z <- __input__.ShadingPosition_id0.z; v2.w <- __input__.ShadingPosition_id0.w; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w; 
//   oDepth <- <PSMain return value>.Depth_id10
//
#line 210 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_d1f26e072550c936b21d585b687c6668.hlsl"
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- cameraSpherePos.x
dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- cameraSpherePos.y
dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- cameraSpherePos.z

#line 214
mul r0.xy, v1.xxxx, v1.yzyy

#line 211
mov r0.w, l(0)
add r0.xyz, r1.xyzx, r0.xywx  // r0.x <- cameraPlanePos.x; r0.y <- cameraPlanePos.y; r0.z <- cameraPlanePos.z

#line 212
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- rayDirection.x; r0.y <- rayDirection.y; r0.z <- rayDirection.z

#line 213
dp3 r0.w, r0.xyzx, -r1.xyzx
add r1.w, r0.w, r0.w  // r1.w <- B

#line 214
dp3 r2.x, r1.xyzx, r1.xyzx
mad r2.x, -v1.x, v1.x, r2.x  // r2.x <- C

#line 215
mul r2.x, r2.x, l(4.000000)
mad r1.w, r1.w, r1.w, -r2.x  // r1.w <- det

#line 216
lt r2.x, r1.w, l(0.000000)

#line 217
discard_nz r2.x

#line 218
sqrt r1.w, r1.w  // r1.w <- sqrtDet

#line 219
mad r2.x, -r0.w, l(2.000000), r1.w
mul r2.x, r2.x, l(0.500000)  // r2.x <- posT

#line 220
mad r0.w, -r0.w, l(2.000000), -r1.w
mul r0.w, r0.w, l(0.500000)  // r0.w <- negT

#line 221
min r0.w, r0.w, r2.x  // r0.w <- intersectT

#line 223
mad r0.xyz, r0.xyzx, r0.wwww, -r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- normal.x; r0.y <- normal.y; r0.z <- normal.z

#line 224
dp3 r1.x, r0.xyzx, cb0[4].xyzx
dp3 r1.y, r0.xyzx, cb0[5].xyzx
dp3 r1.z, r0.xyzx, cb0[6].xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r1.xyzx  // r0.x <- normal.x

#line 225
mad r0.xyz, r0.xyzx, v1.xxxx, v0.xyzx  // r0.x <- pos.x; r0.y <- pos.y; r0.z <- pos.z

#line 201
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[18].xyzw  // r1.x <- posWVP.z
dp4 r0.x, r0.xyzw, cb0[19].xyzw  // r0.x <- posWVP.w

#line 205
div oDepth, r1.x, r0.x

#line 286
mov o0.xyzw, l(0,0,0,0)
ret 
// Approximately 42 instruction slots used
***************************
*************************/
static const float3 QuadPositions_id101[4] = { float3(-1, 1, 0), float3(1, 1, 0), float3(-1, -1, 0), float3(1, -1, 0)};
static const float2 QuadUV_id102[4] = { float2(0, 1), float2(1, 1), float2(0, 0), float2(1, 0)};
struct PS_STREAMS 
{
    float PSize_id106;
    float2 TexCoord_id86;
    float4 PositionWS_id16;
    float3 normalWS_id21;
    float3 meshNormalWS_id19;
    float DepthVS_id17;
    float Depth_id10;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float Depth_id10 : SV_Depth;
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 PositionWS_id16 : POSITION_WS;
    float PSize_id106 : PSIZE_ID106_SEM;
    float2 TexCoord_id86 : TEXCOORD0;
    float4 ShadingPosition_id0 : SV_Position;
};
struct GS_STREAMS 
{
    uint VID_id108;
    float4 PositionWS_id16;
    float PSize_id106;
    float2 TexCoord_id86;
    float4 ShadingPosition_id0;
};
struct GS_OUTPUT 
{
    float4 PositionWS_id16 : POSITION_WS;
    float PSize_id106 : PSIZE_ID106_SEM;
    float2 TexCoord_id86 : TEXCOORD0;
    float4 ShadingPosition_id0 : SV_Position;
};
struct GS_INPUT 
{
    uint VID_id108 : VID_ID108_SEM;
    float4 ShadingPosition_id0 : SV_Position;
};
struct VS_STREAMS 
{
    uint VertexID_id107;
    float4 Position_id15;
    uint InstanceID_id13;
    uint VID_id108;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    uint VID_id108 : VID_ID108_SEM;
    float4 ShadingPosition_id0 : SV_Position;
};
struct VS_INPUT 
{
    uint VertexID_id107 : SV_VertexID;
    float4 Position_id15 : POSITION;
};
struct SMGridParticle 
{
    float3 Pos;
    float3 Vel;
    float3 Rot;
    float3 Size;
    float3 Col;
    float Mesh;
};
cbuffer PerDraw 
{
    float4x4 World_id30;
    float4x4 WorldInverse_id31;
    float4x4 WorldInverseTranspose_id32;
    float4x4 WorldView_id33;
    float4x4 WorldViewInverse_id34;
    float4x4 WorldViewProjection_id35;
    float3 WorldScale_id36;
    float4 EyeMS_id37;
};
cbuffer PerMaterial 
{
    float ParticleSize_id105 = 0.1;
};
cbuffer PerView 
{
    float4x4 View_id23;
    float4x4 ViewInverse_id24;
    float4x4 Projection_id25;
    float4x4 ProjectionInverse_id26;
    float4x4 ViewProjection_id27;
    float2 ProjScreenRay_id28;
    float4 Eye_id29;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id39;
    float2 Texture1TexelSize_id41;
    float2 Texture2TexelSize_id43;
    float2 Texture3TexelSize_id45;
    float2 Texture4TexelSize_id47;
    float2 Texture5TexelSize_id49;
    float2 Texture6TexelSize_id51;
    float2 Texture7TexelSize_id53;
    float2 Texture8TexelSize_id55;
    float2 Texture9TexelSize_id57;
};
Texture2D Texture0_id38;
Texture2D Texture1_id40;
Texture2D Texture2_id42;
Texture2D Texture3_id44;
Texture2D Texture4_id46;
Texture2D Texture5_id48;
Texture2D Texture6_id50;
Texture2D Texture7_id52;
Texture2D Texture8_id54;
Texture2D Texture9_id56;
TextureCube TextureCube0_id58;
TextureCube TextureCube1_id59;
TextureCube TextureCube2_id60;
TextureCube TextureCube3_id61;
Texture3D Texture3D0_id62;
Texture3D Texture3D1_id63;
Texture3D Texture3D2_id64;
Texture3D Texture3D3_id65;
SamplerState Sampler_id66;
SamplerState PointSampler_id67 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id68 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id69 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id70 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id71 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id72 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id73 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id74 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id75 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id76;
SamplerState Sampler1_id77;
SamplerState Sampler2_id78;
SamplerState Sampler3_id79;
SamplerState Sampler4_id80;
SamplerState Sampler5_id81;
SamplerState Sampler6_id82;
SamplerState Sampler7_id83;
SamplerState Sampler8_id84;
SamplerState Sampler9_id85;
StructuredBuffer<SMGridParticle> ParticlesBuffer_id104;
float4 Compute_id48()
{
    return 0;
}
float4 Shading_id2()
{
    return Compute_id48();
}
float4 StrideShadingWorldNormal_id17(inout PS_STREAMS streams, float3 worldPos, float3 normal)
{
    streams.PositionWS_id16 = float4(worldPos, 1);
    float4 posWVP = mul(streams.PositionWS_id16, ViewProjection_id27);
    streams.normalWS_id21 = normal;
    streams.meshNormalWS_id19 = normal;
    streams.DepthVS_id17 = posWVP.w;
    streams.Depth_id10 = posWVP.z / posWVP.w;
    return Shading_id2();
}
void sphereImpostor_id45(float2 screenCoord, float3 spherePos, float sphereRadius, out float3 pos, out float3 normal)
{
    float3 cameraSpherePos = mul(float4(spherePos, 1), View_id23).xyz;
    float3 cameraPlanePos = float3(screenCoord * sphereRadius, 0.0) + cameraSpherePos;
    float3 rayDirection = normalize(cameraPlanePos);
    float B = 2.0 * dot(rayDirection, -cameraSpherePos);
    float C = dot(cameraSpherePos, cameraSpherePos) - (sphereRadius * sphereRadius);
    float det = (B * B) - (4 * C);
    if (det < 0.0)
        discard;
    float sqrtDet = sqrt(det);
    float posT = (-B + sqrtDet) / 2;
    float negT = (-B - sqrtDet) / 2;
    float intersectT = min(posT, negT);
    pos = rayDirection * intersectT;
    normal = normalize(pos - cameraSpherePos);
    normal = normalize(mul(float4(normal, 0), ViewInverse_id24).xyz);
    pos = (normal * sphereRadius) + spherePos;
}
float4 Shading_id47(inout PS_STREAMS streams)
{
    float size = streams.PSize_id106;
    float2 mapping = streams.TexCoord_id86;
    float3 worldPos, worldNormal;
    sphereImpostor_id45(mapping, streams.PositionWS_id16.xyz, size, worldPos, worldNormal);
    return StrideShadingWorldNormal_id17(streams, worldPos, worldNormal);
}
void PSMain_id1()
{
}
void PostTransformPosition_id43(inout VS_STREAMS streams)
{
    streams.VID_id108 = streams.VertexID_id107;
    streams.InstanceID_id13 = streams.VertexID_id107;
    streams.ShadingPosition_id0 = streams.Position_id15;
}
void TransformPosition_id42()
{
}
void PreTransformPosition_id41()
{
}
void GenerateNormal_VS_id44()
{
}
void VSMain_id0()
{
}
void PSMain_id3(inout PS_STREAMS streams)
{
    PSMain_id1();
    streams.ColorTarget_id2 = Shading_id47(streams);
}
void GenerateNormal_PS_id5()
{
}
void BaseTransformVS_id15(inout VS_STREAMS streams)
{
    PreTransformPosition_id41();
    TransformPosition_id42();
    PostTransformPosition_id43(streams);
}
void VSMain_id10()
{
    VSMain_id0();
    GenerateNormal_VS_id44();
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.PositionWS_id16 = __input__.PositionWS_id16;
    streams.PSize_id106 = __input__.PSize_id106;
    streams.TexCoord_id86 = __input__.TexCoord_id86;
    GenerateNormal_PS_id5();
    PSMain_id3(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.Depth_id10 = streams.Depth_id10;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
[maxvertexcount(4)]
void GSMain(point GS_INPUT input[1], inout TriangleStream<GS_OUTPUT> triangleStream)
{
    GS_STREAMS streams = (GS_STREAMS)0;
    streams.VID_id108 = input[0].VID_id108;
    streams.ShadingPosition_id0 = input[0].ShadingPosition_id0;
    uint id = streams.VID_id108;
    SMGridParticle p = ParticlesBuffer_id104[id];
    streams.PositionWS_id16 = mul(float4(p.Pos.xyz, 1), World_id30);
    streams.PSize_id106 = ParticleSize_id105 * p.Size.x * 0.5;
    if (streams.PSize_id106 <= 0)
        return;
    float padding = 1.5;
    float2 offset;
    float4 posView = mul(streams.PositionWS_id16, View_id23);

    for (int i = 0; i < 4; i++)
    {
        streams.TexCoord_id86 = QuadUV_id102[i].xy * 2 - 1;
        float4 viewCornerPos = float4(posView.xyz + QuadPositions_id101[i].xyz * streams.PSize_id106, 1);
        streams.ShadingPosition_id0 = mul(viewCornerPos, Projection_id25);

        {
            GS_OUTPUT output = (GS_OUTPUT)0;
            output.PositionWS_id16 = streams.PositionWS_id16;
            output.PSize_id106 = streams.PSize_id106;
            output.TexCoord_id86 = streams.TexCoord_id86;
            output.ShadingPosition_id0 = streams.ShadingPosition_id0;
            triangleStream.Append(output);
        }
    }
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.VertexID_id107 = __input__.VertexID_id107;
    streams.Position_id15 = __input__.Position_id15;
    VSMain_id10();
    BaseTransformVS_id15(streams);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.VID_id108 = streams.VID_id108;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    return __output__;
}
