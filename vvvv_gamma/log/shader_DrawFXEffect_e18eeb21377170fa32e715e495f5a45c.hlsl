/**************************
***** Compiler Parameters *****
***************************
@P EffectName: DrawFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin FuseCommonDrawVector_DrawFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 416]
@C    World_id29 => Transformation.World
@C    WorldInverse_id30 => Transformation.WorldInverse
@C    WorldInverseTranspose_id31 => Transformation.WorldInverseTranspose
@C    WorldView_id32 => Transformation.WorldView
@C    WorldViewInverse_id33 => Transformation.WorldViewInverse
@C    WorldViewProjection_id34 => Transformation.WorldViewProjection
@C    WorldScale_id35 => Transformation.WorldScale
@C    EyeMS_id36 => Transformation.EyeMS
cbuffer PerFrame [Size: 16]
@C    vecDefualt_id40 => FuseCommonDrawVector_DrawFX.vecDefualt
cbuffer PerView [Size: 352]
@C    View_id22 => Transformation.View
@C    ViewInverse_id23 => Transformation.ViewInverse
@C    Projection_id24 => Transformation.Projection
@C    ProjectionInverse_id25 => Transformation.ProjectionInverse
@C    ViewProjection_id26 => Transformation.ViewProjection
@C    ProjScreenRay_id27 => Transformation.ProjScreenRay
@C    Eye_id28 => Transformation.Eye
cbuffer Globals [Size: 16]
@C    Alpha_id39 => FuseCommonDrawVector_DrawFX.Alpha
***************************
******  Resources    ******
***************************
@R    posBuffer_id37 => FuseCommonDrawVector_DrawFX.posBuffer [Stage: Vertex, Slot: (0-0)]
@R    vectorBuffer_id38 => FuseCommonDrawVector_DrawFX.vectorBuffer [Stage: Vertex, Slot: (1-1)]
@R    PerFrame => PerFrame [Stage: Vertex, Slot: (0-0)]
@R    PerDraw => PerDraw [Stage: Geometry, Slot: (0-0)]
@R    PerView => PerView [Stage: Geometry, Slot: (1-1)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    FuseCommonDrawVector_DrawFX => bd64858ba1e9f664e32f167e286b5b51
@S    VS_PS_Base => f089dc4ce5d5868b962b08793ef74fd9
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    PositionStream4 => 992b49e1b4dd13d8ef84a05830d70229
@S    NormalStream => ea68512133899a045766d21afb59733a
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    FuseCommonBuffer => 65b35e271cc4ebdf63ebebd0f53f481c
@S    FuseCommonTypes => 294db151085426350495bb436e7480dd
***************************
*****     Stages      *****
***************************
@G    Vertex => 31373b02207f6a46cb80da3117eeed5f
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerFrame
// {
//
//   float3 vecDefualt_id40;            // Offset:    0 Size:    12
//
// }
//
// Resource bind info for posBuffer_id37
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for vectorBuffer_id38
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// posBuffer_id37                    texture  struct         r/o             t0      1 
// vectorBuffer_id38                 texture  struct         r/o             t1      1 
// PerFrame                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION_WS              0   xyzw        0     NONE   float   xyzw
// VECTOR_ID42_SEM          0   xyz         1     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_resource_structured t0, 12
dcl_resource_structured t1, 12
dcl_input_sgv v0.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_temps 1
//
// Initial variable locations:
//   v0.x <- __input__; 
//   o1.x <- <VSMain return value>.Vector_id42.x; o1.y <- <VSMain return value>.Vector_id42.y; o1.z <- <VSMain return value>.Vector_id42.z; 
//   o0.x <- <VSMain return value>.PositionWS_id15.x; o0.y <- <VSMain return value>.PositionWS_id15.y; o0.z <- <VSMain return value>.PositionWS_id15.z; o0.w <- <VSMain return value>.PositionWS_id15.w
//
#line 140 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_e18eeb21377170fa32e715e495f5a45c.hlsl"
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) o0.xyz, v0.x, l(0), t0.xyzx

#line 145
mov o0.w, l(1.000000)

#line 88
bufinfo_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.x, t1.xyzw  // r0.x <- count

#line 96
udiv null, r0.y, v0.x, r0.x

#line 95
ult r0.x, l(0), r0.x

#line 96
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.y, l(0), t1.xxyz  // r0.y <- value.x; r0.z <- value.y; r0.w <- value.z
movc o1.xyz, r0.xxxx, r0.yzwy, cb0[0].xyzx

#line 145
ret 
// Approximately 8 instruction slots used
@G    Geometry => f23a7e3b3e24916960d2e2dc0d85b93c
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 World_id29;               // Offset:    0 Size:    64 [unused]
//   float4x4 WorldInverse_id30;        // Offset:   64 Size:    64 [unused]
//   float4x4 WorldInverseTranspose_id31;// Offset:  128 Size:    64 [unused]
//   float4x4 WorldView_id32;           // Offset:  192 Size:    64
//   float4x4 WorldViewInverse_id33;    // Offset:  256 Size:    64 [unused]
//   float4x4 WorldViewProjection_id34; // Offset:  320 Size:    64 [unused]
//   float3 WorldScale_id35;            // Offset:  384 Size:    12 [unused]
//   float4 EyeMS_id36;                 // Offset:  400 Size:    16 [unused]
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id22;                // Offset:    0 Size:    64 [unused]
//   float4x4 ViewInverse_id23;         // Offset:   64 Size:    64 [unused]
//   float4x4 Projection_id24;          // Offset:  128 Size:    64
//   float4x4 ProjectionInverse_id25;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id26;      // Offset:  256 Size:    64 [unused]
//   float2 ProjScreenRay_id27;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id28;                   // Offset:  336 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION_WS              0   xyzw        0     NONE   float   xyzw
// VECTOR_ID42_SEM          0   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// VECTOR_ID42_SEM          0   xyz         1     NONE   float   xyz 
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[16], immediateIndexed
dcl_constantbuffer CB1[12], immediateIndexed
dcl_input v[1][0].xyzw
dcl_input v[1][1].xyz
dcl_temps 2
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology linestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_maxout 2
//
// Initial variable locations:
//   m0 <- lineStream; 
//   v[0][0].x <- input[0].PositionWS_id15.x; v[0][0].y <- input[0].PositionWS_id15.y; v[0][0].z <- input[0].PositionWS_id15.z; v[0][0].w <- input[0].PositionWS_id15.w; 
//   v[0][1].x <- input[0].Vector_id42.x; v[0][1].y <- input[0].Vector_id42.y; v[0][1].z <- input[0].Vector_id42.z
//
#line 116 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_e18eeb21377170fa32e715e495f5a45c.hlsl"
dp4 r0.x, v[0][0].xyzw, cb0[12].xyzw  // r0.x <- posView.x
dp4 r0.y, v[0][0].xyzw, cb0[13].xyzw  // r0.y <- posView.y
dp4 r0.z, v[0][0].xyzw, cb0[14].xyzw  // r0.z <- posView.z
dp4 r0.w, v[0][0].xyzw, cb0[15].xyzw  // r0.w <- posView.w

#line 117
dp4 r1.x, r0.xyzw, cb1[8].xyzw  // r1.x <- streams.ShadingPosition_id0.x

#line 123
mov o0.x, r1.x

#line 117
dp4 r1.x, r0.xyzw, cb1[9].xyzw  // r1.x <- streams.ShadingPosition_id0.y

#line 123
mov o0.y, r1.x

#line 117
dp4 r1.x, r0.xyzw, cb1[10].xyzw  // r1.x <- streams.ShadingPosition_id0.z
dp4 r0.x, r0.xyzw, cb1[11].xyzw  // r0.x <- streams.ShadingPosition_id0.w

#line 123
mov o0.z, r1.x
mov o0.w, r0.x
mov o1.xyz, v[0][1].xyzx
emit_stream m0

#line 125
add r0.xyz, v[0][0].xyzx, v[0][1].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[12].xyzw  // r1.x <- targetView.x
dp4 r1.y, r0.xyzw, cb0[13].xyzw  // r1.y <- targetView.y
dp4 r1.z, r0.xyzw, cb0[14].xyzw  // r1.z <- targetView.z
dp4 r1.w, r0.xyzw, cb0[15].xyzw  // r1.w <- targetView.w

#line 126
dp4 r0.x, r1.xyzw, cb1[8].xyzw  // r0.x <- streams.ShadingPosition_id0.x

#line 132
mov o0.x, r0.x

#line 126
dp4 r0.x, r1.xyzw, cb1[9].xyzw  // r0.x <- streams.ShadingPosition_id0.y

#line 132
mov o0.y, r0.x

#line 126
dp4 r0.x, r1.xyzw, cb1[10].xyzw  // r0.x <- streams.ShadingPosition_id0.z
dp4 r0.y, r1.xyzw, cb1[11].xyzw  // r0.y <- streams.ShadingPosition_id0.w

#line 132
mov o0.z, r0.x
mov o0.w, r0.y
mov o1.xyz, v[0][1].xyzx
emit_stream m0

#line 134
ret 
// Approximately 31 instruction slots used
@G    Pixel => e8deefd4073d9b6746dcd5d3d21118f8
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float Alpha_id39;                  // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// VECTOR_ID42_SEM          0   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 1
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.Vector_id42.x; v1.y <- __input__.Vector_id42.y; v1.z <- __input__.Vector_id42.z; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 103 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_e18eeb21377170fa32e715e495f5a45c.hlsl"
dp3 r0.x, v1.xyzx, v1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v1.xyzx
mad_sat o0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)

#line 108
mov o0.w, cb0[0].x
ret 
// Approximately 6 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float3 Vector_id42;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float3 Vector_id42 : VECTOR_ID42_SEM;
};
struct GS_STREAMS 
{
    float4 PositionWS_id15;
    float3 Vector_id42;
    float4 ShadingPosition_id0;
};
struct GS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float3 Vector_id42 : VECTOR_ID42_SEM;
};
struct GS_INPUT 
{
    float4 PositionWS_id15 : POSITION_WS;
    float3 Vector_id42 : VECTOR_ID42_SEM;
};
struct VS_STREAMS 
{
    uint VertexID_id41;
    float4 PositionWS_id15;
    float3 Vector_id42;
};
struct VS_OUTPUT 
{
    float4 PositionWS_id15 : POSITION_WS;
    float3 Vector_id42 : VECTOR_ID42_SEM;
};
struct VS_INPUT 
{
    uint VertexID_id41 : SV_VertexID;
};
struct Matrix4x4 
{
    float4x4 Matrix;
};
struct Ray 
{
    float3 ro, rd, sp, sn;
};
cbuffer PerDraw 
{
    float4x4 World_id29;
    float4x4 WorldInverse_id30;
    float4x4 WorldInverseTranspose_id31;
    float4x4 WorldView_id32;
    float4x4 WorldViewInverse_id33;
    float4x4 WorldViewProjection_id34;
    float3 WorldScale_id35;
    float4 EyeMS_id36;
};
cbuffer PerFrame 
{
    float3 vecDefualt_id40;
};
cbuffer PerView 
{
    float4x4 View_id22;
    float4x4 ViewInverse_id23;
    float4x4 Projection_id24;
    float4x4 ProjectionInverse_id25;
    float4x4 ViewProjection_id26;
    float2 ProjScreenRay_id27;
    float4 Eye_id28;
};
cbuffer Globals 
{
    float Alpha_id39;
};
StructuredBuffer<float3> posBuffer_id37;
StructuredBuffer<float3> vectorBuffer_id38;
uint sbSize3_id5(StructuredBuffer<float3> sBuffer)
{
    uint count, dummy;
    sBuffer.GetDimensions(count, dummy);
    return count;
}
float3 sbLoad_id11(uint index, StructuredBuffer<float3> sBuffer, float3 defaultValue = 0.)
{
    float3 value = defaultValue;
    uint count = sbSize3_id5(sBuffer);
    if (count > 0)
        value = sBuffer[index % count];
    return value;
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.Vector_id42 = __input__.Vector_id42;
    float3 rgb = normalize(streams.Vector_id42) * .5 + .5;
    rgb = saturate(rgb);
    streams.ColorTarget_id2 = float4(rgb, Alpha_id39);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
[maxvertexcount(2)]
void GSMain(point GS_INPUT input[1], inout LineStream<GS_OUTPUT> lineStream)
{
    GS_STREAMS streams = (GS_STREAMS)0;
    streams.PositionWS_id15 = input[0].PositionWS_id15;
    streams.Vector_id42 = input[0].Vector_id42;
    float4 posView = mul(streams.PositionWS_id15, WorldView_id32);
    streams.ShadingPosition_id0 = mul(posView, Projection_id24);

    {
        GS_OUTPUT output = (GS_OUTPUT)0;
        output.ShadingPosition_id0 = streams.ShadingPosition_id0;
        output.Vector_id42 = streams.Vector_id42;
        lineStream.Append(output);
    }
    float4 targetView = mul(float4(streams.Vector_id42 + streams.PositionWS_id15.xyz, 1.), WorldView_id32);
    streams.ShadingPosition_id0 = mul(targetView, Projection_id24);

    {
        GS_OUTPUT output = (GS_OUTPUT)0;
        output.ShadingPosition_id0 = streams.ShadingPosition_id0;
        output.Vector_id42 = streams.Vector_id42;
        lineStream.Append(output);
    }
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.VertexID_id41 = __input__.VertexID_id41;
    uint id = streams.VertexID_id41;
    streams.PositionWS_id15 = float4(posBuffer_id37[id], 1);
    streams.Vector_id42 = sbLoad_id11(id, vectorBuffer_id38, vecDefualt_id40);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.PositionWS_id15 = streams.PositionWS_id15;
    __output__.Vector_id42 = streams.Vector_id42;
    return __output__;
}
