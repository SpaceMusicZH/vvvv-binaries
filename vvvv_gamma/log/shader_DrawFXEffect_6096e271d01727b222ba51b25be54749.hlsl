/**************************
***** Compiler Parameters *****
***************************
@P EffectName: DrawFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMDrawParticleSpritesShadow_DrawFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 416]
@C    World_id29 => Transformation.World
@C    WorldInverse_id30 => Transformation.WorldInverse
@C    WorldInverseTranspose_id31 => Transformation.WorldInverseTranspose
@C    WorldView_id32 => Transformation.WorldView
@C    WorldViewInverse_id33 => Transformation.WorldViewInverse
@C    WorldViewProjection_id34 => Transformation.WorldViewProjection
@C    WorldScale_id35 => Transformation.WorldScale
@C    EyeMS_id36 => Transformation.EyeMS
cbuffer PerFrame [Size: 32]
@C    Col_id46 => SMDrawParticleSpritesShadow_DrawFX.Col
@C    ParticleSize_id47 => SMDrawParticleSpritesShadow_DrawFX.ParticleSize
cbuffer PerView [Size: 352]
@C    View_id22 => Transformation.View
@C    ViewInverse_id23 => Transformation.ViewInverse
@C    Projection_id24 => Transformation.Projection
@C    ProjectionInverse_id25 => Transformation.ProjectionInverse
@C    ViewProjection_id26 => Transformation.ViewProjection
@C    ProjScreenRay_id27 => Transformation.ProjScreenRay
@C    Eye_id28 => Transformation.Eye
***************************
******  Resources    ******
***************************
@R    ParticlesBuffer_id45 => SMDrawParticleSpritesShadow_DrawFX.ParticlesBuffer [Stage: Geometry, Slot: (0-0)]
@R    PerDraw => PerDraw [Stage: Geometry, Slot: (0-0)]
@R    PerFrame => PerFrame [Stage: Geometry, Slot: (1-1)]
@R    PerView => PerView [Stage: Geometry, Slot: (2-2)]
***************************
*****     Sources     *****
***************************
@S    SMDrawParticleSpritesShadow_DrawFX => 9d1f6caf0c2ceaa71bc7178530e18149
@S    VS_PS_Base => f089dc4ce5d5868b962b08793ef74fd9
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    PositionStream4 => 992b49e1b4dd13d8ef84a05830d70229
@S    NormalStream => ea68512133899a045766d21afb59733a
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    SMGridParticleStruct => 1101aaa3dabe64320f382d670ccb694d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
***************************
*****     Stages      *****
***************************
@G    Vertex => 55237389a68bcafa15d61a50d079aec0
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ID_ID50_SEM              0   x           0     NONE    uint   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_input_sgv v0.x, vertex_id
dcl_output o0.x
//
// Initial variable locations:
//   v0.x <- __input__; 
//   o0.x <- <VSMain return value>
//
#line 126 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_6096e271d01727b222ba51b25be54749.hlsl"
mov o0.x, v0.x
ret 
// Approximately 2 instruction slots used
@G    Geometry => 0dd4121a74928e3385bf88af070093bb
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 World_id29;               // Offset:    0 Size:    64 [unused]
//   float4x4 WorldInverse_id30;        // Offset:   64 Size:    64 [unused]
//   float4x4 WorldInverseTranspose_id31;// Offset:  128 Size:    64 [unused]
//   float4x4 WorldView_id32;           // Offset:  192 Size:    64
//   float4x4 WorldViewInverse_id33;    // Offset:  256 Size:    64 [unused]
//   float4x4 WorldViewProjection_id34; // Offset:  320 Size:    64 [unused]
//   float3 WorldScale_id35;            // Offset:  384 Size:    12 [unused]
//   float4 EyeMS_id36;                 // Offset:  400 Size:    16 [unused]
//
// }
//
// cbuffer PerFrame
// {
//
//   float4 Col_id46;                   // Offset:    0 Size:    16 [unused]
//   float ParticleSize_id47;           // Offset:   16 Size:     4
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id22;                // Offset:    0 Size:    64 [unused]
//   float4x4 ViewInverse_id23;         // Offset:   64 Size:    64 [unused]
//   float4x4 Projection_id24;          // Offset:  128 Size:    64
//   float4x4 ProjectionInverse_id25;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id26;      // Offset:  256 Size:    64 [unused]
//   float2 ProjScreenRay_id27;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id28;                   // Offset:  336 Size:    16 [unused]
//
// }
//
// Resource bind info for ParticlesBuffer_id45
// {
//
//   struct SMGridParticle
//   {
//       
//       float3 Pos;                    // Offset:    0
//       float3 Vel;                    // Offset:   12
//       float3 Rot;                    // Offset:   24
//       float3 Size;                   // Offset:   36
//       float3 Col;                    // Offset:   48
//       float Mesh;                    // Offset:   60
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ParticlesBuffer_id45              texture  struct         r/o             t0      1 
// PerDraw                           cbuffer      NA          NA            cb0      1 
// PerFrame                          cbuffer      NA          NA            cb1      1 
// PerView                           cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ID_ID50_SEM              0   x           0     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD_ID48_SEM        0   xy          0     NONE   float   xy  
// SV_Position              0   xyzw        1      POS   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 1.000000, 0, 0},
                              { 1.000000, 1.000000, 0, 0},
                              { 0, 0, -1.000000, 1.000000},
                              { 1.000000, 0, 1.000000, 1.000000},
                              { 0, 0, -1.000000, -1.000000},
                              { 0, 0, 1.000000, -1.000000} }
dcl_constantbuffer CB0[15], immediateIndexed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_constantbuffer CB2[12], immediateIndexed
dcl_resource_structured t0, 64
dcl_input v[1][0].x
dcl_temps 4
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output o0.xy
dcl_output_siv o1.xyzw, position
dcl_maxout 4
//
// Initial variable locations:
//   m0 <- triangleStream; 
//   v[0][0].x <- input
//
#line 100 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_6096e271d01727b222ba51b25be54749.hlsl"
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.xyz, v[0][0].x, l(0), t0.xyzx  // r0.x <- p.Pos.x; r0.y <- p.Pos.y; r0.z <- p.Pos.z
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r1.x, v[0][0].x, l(36), t0.xxxx  // r1.x <- p.Size.x

#line 103
mov r0.w, l(1.000000)
dp4 r2.x, r0.xyzw, cb0[12].xyzw  // r2.x <- posView.x
dp4 r2.y, r0.xyzw, cb0[13].xyzw  // r2.y <- posView.y
dp4 r2.z, r0.xyzw, cb0[14].xyzw  // r2.z <- posView.z

#line 108
mov r0.z, l(0)

#line 109
mov r3.w, l(1.000000)

#line 105
mov r0.w, l(0)  // r0.w <- i
loop 
  ige r1.y, r0.w, l(4)
  breakc_nz r1.y

#line 108
  mov r1.yz, icb[r0.w + 2].zzwz
  mul r1.yz, r1.yyzy, cb1[1].xxxx
  mul r0.xy, r1.xxxx, r1.yzyy
  add r3.xyz, r0.xyzx, r2.xyzx  // r3.x <- pos.x; r3.y <- pos.y; r3.z <- pos.z

#line 109
  dp4 r0.x, r3.xyzw, cb2[8].xyzw  // r0.x <- streams.ShadingPosition_id0.x
  dp4 r0.y, r3.xyzw, cb2[9].xyzw  // r0.y <- streams.ShadingPosition_id0.y
  dp4 r1.y, r3.xyzw, cb2[10].xyzw  // r1.y <- streams.ShadingPosition_id0.z
  dp4 r1.z, r3.xyzw, cb2[11].xyzw  // r1.z <- streams.ShadingPosition_id0.w

#line 115
  mov o0.xy, icb[r0.w + 0].xyxx
  mov o1.x, r0.x
  mov o1.y, r0.y
  mov o1.z, r1.y
  mov o1.w, r1.z
  emit_stream m0

#line 117
  iadd r0.w, r0.w, l(1)
endloop 

#line 118
ret 
// Approximately 29 instruction slots used
@G    Pixel => 69cc79041ff01c69a89f34206649ffa8
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD_ID48_SEM        0   xy          0     NONE   float   xy  
// SV_Position              0   xyzw        1      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_input_ps linear v0.xy
dcl_output o0.xyzw
dcl_temps 1
//
// Initial variable locations:
//   v0.x <- __input__.TexCoord_id48.x; v0.y <- __input__.TexCoord_id48.y; 
//   v1.x <- __input__.ShadingPosition_id0.x; v1.y <- __input__.ShadingPosition_id0.y; v1.z <- __input__.ShadingPosition_id0.z; v1.w <- __input__.ShadingPosition_id0.w; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 85 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_6096e271d01727b222ba51b25be54749.hlsl"
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)  // r0.x <- l.x; r0.y <- l.y

#line 86
dp2 r0.x, r0.xyxx, r0.xyxx
lt r0.x, l(0.250000), r0.x

#line 88
discard_nz r0.x

#line 93
mov o0.xyzw, l(0,0,0,0)
ret 
// Approximately 6 instruction slots used
***************************
*************************/
static const float3 QuadPositions_id42[4] = { float3(-1, 1, 0), float3(1, 1, 0), float3(-1, -1, 0), float3(1, -1, 0)};
static const float2 QuadUV_id43[4] = { float2(0, 1), float2(1, 1), float2(0, 0), float2(1, 0)};
struct PS_STREAMS 
{
    float2 TexCoord_id48;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float2 TexCoord_id48 : TEXCOORD_ID48_SEM;
    float4 ShadingPosition_id0 : SV_Position;
};
struct GS_STREAMS 
{
    uint Id_id50;
    float2 TexCoord_id48;
    float4 ShadingPosition_id0;
};
struct GS_OUTPUT 
{
    float2 TexCoord_id48 : TEXCOORD_ID48_SEM;
    float4 ShadingPosition_id0 : SV_Position;
};
struct GS_INPUT 
{
    uint Id_id50 : ID_ID50_SEM;
};
struct VS_STREAMS 
{
    uint VertexID_id49;
    uint Id_id50;
};
struct VS_OUTPUT 
{
    uint Id_id50 : ID_ID50_SEM;
};
struct VS_INPUT 
{
    uint VertexID_id49 : SV_VertexID;
};
struct SMGridParticle 
{
    float3 Pos;
    float3 Vel;
    float3 Rot;
    float3 Size;
    float3 Col;
    float Mesh;
};
cbuffer PerDraw 
{
    float4x4 World_id29;
    float4x4 WorldInverse_id30;
    float4x4 WorldInverseTranspose_id31;
    float4x4 WorldView_id32;
    float4x4 WorldViewInverse_id33;
    float4x4 WorldViewProjection_id34;
    float3 WorldScale_id35;
    float4 EyeMS_id36;
};
cbuffer PerFrame 
{
    float4 Col_id46;
    float ParticleSize_id47;
};
cbuffer PerView 
{
    float4x4 View_id22;
    float4x4 ViewInverse_id23;
    float4x4 Projection_id24;
    float4x4 ProjectionInverse_id25;
    float4x4 ViewProjection_id26;
    float2 ProjScreenRay_id27;
    float4 Eye_id28;
};
StructuredBuffer<SMGridParticle> ParticlesBuffer_id45;
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id48 = __input__.TexCoord_id48;
    float2 l = streams.TexCoord_id48 - 0.5f;
    if (dot(l, l) > 0.25)
    {
        discard;
    }
    streams.ColorTarget_id2 = 0;
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
[maxvertexcount(4)]
void GSMain(point GS_INPUT input[1], inout TriangleStream<GS_OUTPUT> triangleStream)
{
    GS_STREAMS streams = (GS_STREAMS)0;
    streams.Id_id50 = input[0].Id_id50;
    SMGridParticle p = ParticlesBuffer_id45[streams.Id_id50];
    float pSize = p.Size.x;
    float4 pPos = float4(p.Pos.xyz, 1);
    float4 posView = mul(pPos, WorldView_id32);

    for (int i = 0; i < 4; i++)
    {
        streams.TexCoord_id48 = QuadUV_id43[i].xy;
        float3 pos = posView.xyz + QuadPositions_id42[i].xyz * ParticleSize_id47 * pSize;
        streams.ShadingPosition_id0 = mul(float4(pos, 1), Projection_id24);

        {
            GS_OUTPUT output = (GS_OUTPUT)0;
            output.TexCoord_id48 = streams.TexCoord_id48;
            output.ShadingPosition_id0 = streams.ShadingPosition_id0;
            triangleStream.Append(output);
        }
    }
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.VertexID_id49 = __input__.VertexID_id49;
    streams.Id_id50 = streams.VertexID_id49;
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.Id_id50 = streams.Id_id50;
    return __output__;
}
