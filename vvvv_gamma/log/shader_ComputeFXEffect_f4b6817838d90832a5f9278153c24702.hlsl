/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin LineMesh_ComputeFX [{Color = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {RibbonUp = InputFloat3<ShaderFX.InputValueFloat3,PerUpdate>}, {TubeUp = InputFloat3<ShaderFX.InputValueFloat3.i1,PerUpdate>}, {Width = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}]
@P Width: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P Color: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
@P RibbonUp: InputFloat3<ShaderFX.InputValueFloat3,PerUpdate>
@P TubeUp: InputFloat3<ShaderFX.InputValueFloat3.i1,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDispatch [Size: 112]
@C    ThreadGroupCountGlobal_id10 => ComputeShaderBase.ThreadGroupCountGlobal
@C    ThicknessSpace_id45 => LineMesh_ComputeFX.ThicknessSpace
@C    MeshType_id46 => LineMesh_ComputeFX.MeshType
@C    Transform_id47 => LineMesh_ComputeFX.Transform
@C    ViewAlign_id48 => LineMesh_ComputeFX.ViewAlign
@C    NormalBend_id49 => LineMesh_ComputeFX.NormalBend
@C    Resolution_id50 => LineMesh_ComputeFX.Resolution
@C    SegmentCountGlobal_id51 => LineMesh_ComputeFX.SegmentCountGlobal
cbuffer PerUpdate [Size: 48]
@C    InputValue_id57 => ShaderFX.InputValueFloat4
@C    InputValue_id58 => ShaderFX.InputValueFloat3
@C    InputValue_id59 => ShaderFX.InputValueFloat3.i1
@C    InputValue_id60 => ShaderFX.InputValueFloat
cbuffer PerView [Size: 384]
@C    View_id11 => Transformation.View
@C    ViewInverse_id12 => Transformation.ViewInverse
@C    Projection_id13 => Transformation.Projection
@C    ProjectionInverse_id14 => Transformation.ProjectionInverse
@C    ViewProjection_id15 => Transformation.ViewProjection
@C    ProjScreenRay_id16 => Transformation.ProjScreenRay
@C    Eye_id17 => Transformation.Eye
@C    NearClipPlane_id26 => Camera.NearClipPlane
@C    FarClipPlane_id27 => Camera.FarClipPlane
@C    ZProjection_id28 => Camera.ZProjection
@C    ViewSize_id29 => Camera.ViewSize
@C    AspectRatio_id30 => Camera.AspectRatio
***************************
******  Resources    ******
***************************
@R    PositionBuffer_id43 => LineMesh_ComputeFX.PositionBuffer [Stage: Compute, Slot: (0-0)]
@R    InfoBuffer_id52 => LineMesh_ComputeFX.InfoBuffer [Stage: Compute, Slot: (1-1)]
@R    outputBuffer_id44 => LineMesh_ComputeFX.outputBuffer [Stage: Compute, Slot: (0-0)]
@R    PerDispatch => PerDispatch [Stage: Compute, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Compute, Slot: (1-1)]
@R    PerView => PerView [Stage: Compute, Slot: (2-2)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    LineMesh_ComputeFX => aa201721f28516e65f01e1d6eff94a0f
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    FuseCommonBuffer => 65b35e271cc4ebdf63ebebd0f53f481c
@S    FuseCommonTypes => 294db151085426350495bb436e7480dd
@S    LineAttributeStream => c7aed8089f4a7eedb3fda14d4c26e4b9
@S    LineCommon => 6f3c9bb0f15c5b291748baebfb4315ac
@S    FuseCoreMath => fdeacca3b2f02b9acb6430ed603f50b4
@S    Pos3Norm3Col4Tex2Tan4Vertex => fbfbdc4d1671a224b444e9e4cfddfd89
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    ComputeFloat4 => bc345c7d961ff4b1766c5b1d5e15bd5a
@S    ComputeFloat3 => fcd85992058d53e05e3805fecfe8c7a7
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat3 => 8982608ad2ca3465dcfa300c570359d5
@S    DeclFloat3 => f8ad0be4bea340b9223aeec02eb4c744
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Compute => 55218b04c2c2dbf920d2bd0ade43bd0a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDispatch
// {
//
//   int3 ThreadGroupCountGlobal_id10;  // Offset:    0 Size:    12 [unused]
//   int ThicknessSpace_id45;           // Offset:   12 Size:     4
//      = 0x00000000 
//   int MeshType_id46;                 // Offset:   16 Size:     4
//      = 0x00000000 
//   float4x4 Transform_id47;           // Offset:   32 Size:    64
//   bool ViewAlign_id48;               // Offset:   96 Size:     4
//   bool NormalBend_id49;              // Offset:  100 Size:     4
//   int Resolution_id50;               // Offset:  104 Size:     4
//   int SegmentCountGlobal_id51;       // Offset:  108 Size:     4
//
// }
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id57;            // Offset:    0 Size:    16
//   float3 InputValue_id58;            // Offset:   16 Size:    12
//   float3 InputValue_id59;            // Offset:   32 Size:    12
//   float InputValue_id60;             // Offset:   44 Size:     4
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id11;                // Offset:    0 Size:    64 [unused]
//   float4x4 ViewInverse_id12;         // Offset:   64 Size:    64
//   float4x4 Projection_id13;          // Offset:  128 Size:    64 [unused]
//   float4x4 ProjectionInverse_id14;   // Offset:  192 Size:    64
//   float4x4 ViewProjection_id15;      // Offset:  256 Size:    64 [unused]
//   float2 ProjScreenRay_id16;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id17;                   // Offset:  336 Size:    16 [unused]
//   float NearClipPlane_id26;          // Offset:  352 Size:     4 [unused]
//      = 0x3f800000 
//   float FarClipPlane_id27;           // Offset:  356 Size:     4 [unused]
//      = 0x42c80000 
//   float2 ZProjection_id28;           // Offset:  360 Size:     8 [unused]
//   float2 ViewSize_id29;              // Offset:  368 Size:     8 [unused]
//   float AspectRatio_id30;            // Offset:  376 Size:     4 [unused]
//
// }
//
// Resource bind info for PositionBuffer_id43
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for InfoBuffer_id52
// {
//
//   struct LineInfo
//   {
//       
//       int id;                        // Offset:    0
//       int start;                     // Offset:    4
//       int count;                     // Offset:    8
//
//   } $Element;                        // Offset:    0 Size:    12
//
// }
//
// Resource bind info for outputBuffer_id44
// {
//
//   struct Pos3Norm3Col4Tex2Tan4Id2
//   {
//       
//       float3 Position;               // Offset:    0
//       float3 Normal;                 // Offset:   12
//       float4 Color;                  // Offset:   24
//       float2 TexCoord;               // Offset:   40
//       float4 Tangent;                // Offset:   48
//       uint LineId;                   // Offset:   64
//       uint SegmentId;                // Offset:   68
//
//   } $Element;                        // Offset:    0 Size:    72
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PositionBuffer_id43               texture  struct         r/o             t0      1 
// InfoBuffer_id52                   texture  struct         r/o             t1      1 
// outputBuffer_id44                     UAV  struct         r/w             u0      1 
// PerDispatch                       cbuffer      NA          NA            cb0      1 
// PerUpdate                         cbuffer      NA          NA            cb1      1 
// PerView                           cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_constantbuffer CB1[3], immediateIndexed
dcl_constantbuffer CB2[14], immediateIndexed
dcl_resource_structured t0, 12
dcl_resource_structured t1, 12
dcl_uav_structured u0, 72
dcl_input vThreadID.x
dcl_temps 24
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 206 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_f4b6817838d90832a5f9278153c24702.hlsl"
bufinfo_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.x, t0.xyzw  // r0.x <- count

#line 215
ult r0.x, vThreadID.x, r0.x
if_nz r0.x

#line 217
  bufinfo_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.x, t1.xyzw  // r0.x <- count

#line 218
  ult r0.y, l(0), r0.x

#line 220
  iadd r0.x, r0.x, l(-1)
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.xz, r0.x, l(4), t1.xxyx  // r0.x <- info.start; r0.z <- info.count

#line 221
  iadd r0.x, r0.z, r0.x

#line 223
  uge r0.x, vThreadID.x, r0.x

#line 233
  and r0.x, r0.x, r0.y

#line 234
  if_z r0.x

#line 223
    ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r1.yzw, vThreadID.x, l(0), t1.xxyz  // r1.y <- info.id; r1.z <- info.start; r1.w <- info.count

#line 224
    iadd r1.x, -r1.z, vThreadID.x  // r1.x <- segmentId

#line 230
    udiv r0.x, r2.x, vThreadID.x, cb0[6].w  // r2.x <- segmentId; r0.x <- lineId

#line 233
    mov r2.y, r0.x
    mov r2.z, cb0[6].w
    movc r0.xyz, r0.yyyy, r1.xywx, r2.xyzx  // r0.x <- segmentId; r0.y <- lineId; r0.z <- segmentCount

#line 237
    iadd r1.xy, vThreadID.xxxx, l(-1, 1, 0, 0)

#line 236
    movc r0.w, r0.x, r1.x, vThreadID.x  // r0.w <- prevId

#line 237
    iadd r1.x, r0.z, l(-1)
    ieq r1.z, r0.x, r1.x
    movc r1.y, r1.z, vThreadID.x, r1.y  // r1.y <- nextId

#line 238
    ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r2.xyz, vThreadID.x, l(0), t0.xyzx  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z

#line 239
    ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r3.xyz, r0.w, l(0), t0.xyzx  // r3.x <- prevPt.x; r3.y <- prevPt.y; r3.z <- prevPt.z

#line 240
    ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r1.yzw, r1.y, l(0), t0.xxyz  // r1.y <- nextPt.x; r1.z <- nextPt.y; r1.w <- nextPt.z

#line 241
    add r1.yzw, -r3.xxyz, r1.yyzw
    dp3 r3.x, r1.yzwy, cb0[2].xyzx  // r3.x <- t.x
    dp3 r3.y, r1.yzwy, cb0[3].xyzx  // r3.y <- t.y
    dp3 r3.z, r1.yzwy, cb0[4].xyzx  // r3.z <- t.z

#line 242
    mov r2.w, l(1.000000)
    dp4 r4.x, r2.xyzw, cb0[2].xyzw  // r4.x <- p.x
    dp4 r4.y, r2.xyzw, cb0[3].xyzw  // r4.y <- p.y
    dp4 r4.z, r2.xyzw, cb0[4].xyzw  // r4.z <- p.z

#line 244
    add r2.x, -r4.x, cb2[4].w  // r2.x <- viewDir.x
    add r2.y, -r4.y, cb2[5].w  // r2.y <- viewDir.y
    add r2.z, -r4.z, cb2[6].w  // r2.z <- viewDir.z

#line 246
    ieq r0.w, cb0[0].w, l(1)
    mov r5.x, cb2[4].z
    mov r5.y, cb2[5].z
    mov r5.z, cb2[6].z
    dp3 r5.x, r5.xyzx, r2.xyzx
    mov r5.y, l(1.000000)
    dp4 r1.y, r5.xxxy, cb2[13].xyzw
    mul r1.y, r1.y, l(0.200000)
    movc r0.w, r0.w, r1.y, l(1.000000)  // r0.w <- scale

#line 247
    mul r0.w, r0.w, cb1[2].w

#line 248
    if_z cb0[1].x

#line 250
      iadd r1.y, -r0.y, vThreadID.x
      dp3 r1.z, r2.xyzx, r2.xyzx
      rsq r1.z, r1.z
      mul r2.xyz, r1.zzzz, r2.xyzx
      movc r2.xyz, cb0[6].xxxx, r2.xyzx, cb1[1].xyzx

#line 118
      mul r5.xyz, r2.yzxy, r3.zxyz
      mad r5.xyz, r3.yzxy, r2.zxyz, -r5.xyzx
      dp3 r1.z, r5.xyzx, r5.xyzx
      rsq r1.z, r1.z
      mul r6.xyz, r1.zzzz, r5.xyzx  // r6.x <- dir.x; r6.y <- dir.y; r6.z <- dir.z

#line 119
      mul r7.xyz, r0.wwww, r6.xyzx
      mad r8.xyz, r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r4.xyzx  // r8.x <- v0.Position.x; r8.y <- v0.Position.y; r8.z <- v0.Position.z

#line 120
      mad r7.xyz, -r7.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r4.xyzx  // r7.x <- v1.Position.x; r7.y <- v1.Position.y; r7.z <- v1.Position.z

#line 121
      movc r1.w, cb0[6].y, l(0.500000), l(1.000000)  // r1.w <- t

#line 122
      mad r9.xyz, -r5.xyzx, r1.zzzz, r2.xyzx
      mad r9.xyz, r1.wwww, r9.xyzx, r6.xyzx
      dp3 r2.w, r9.xyzx, r9.xyzx
      rsq r2.w, r2.w
      mul r9.xyz, r2.wwww, r9.yzxy  // r9.x <- v0.Normal.y; r9.y <- v0.Normal.z; r9.z <- v0.Normal.x

#line 123
      mad r2.xyz, r5.xyzx, r1.zzzz, r2.xyzx
      mad r2.xyz, r1.wwww, r2.xyzx, -r6.xyzx
      dp3 r1.z, r2.xyzx, r2.xyzx
      rsq r1.z, r1.z
      mul r2.xyz, r1.zzzz, r2.yzxy  // r2.x <- v1.Normal.y; r2.y <- v1.Normal.z; r2.z <- v1.Normal.x

#line 125
      itof r1.z, r1.x
      div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z  // r1.z <- div

#line 126
      utof r1.w, r0.x
      mul r5.z, r1.w, r1.z  // r5.z <- v0.TexCoord.x

#line 132
      imul null, r1.z, r1.y, l(6)

#line 134
      if_nz r0.x

#line 138
        imad r6.xyz, r1.yyyy, l(6, 6, 6, 0), l(-6, -2, -1, 0)  // r6.x <- pOffset

#line 136
        iadd r1.w, r6.x, l(1)
        mov r8.w, r9.z
        store_structured u0.xyzw, r1.w, l(0), r8.xyzw
        mov r10.xy, r9.xyxx
        mov r10.zw, cb1[0].xxxy
        store_structured u0.xyzw, r1.w, l(16), r10.xyzw
        mov r5.xy, cb1[0].zwzz
        mov r5.w, l(1.000000)
        store_structured u0.xyzw, r1.w, l(32), r5.xyzw
        mov r3.w, l(-1.000000)
        store_structured u0.xyzw, r1.w, l(48), r3.xyzw
        store_structured u0.xy, r1.w, l(64), r0.yxyy

#line 137
        mov r7.w, r2.z
        store_structured u0.xyzw, r6.y, l(0), r7.xyzw
        mov r11.xy, r2.xyxx
        mov r11.zw, cb1[0].xxxy
        store_structured u0.xyzw, r6.y, l(16), r11.xyzw
        mov r11.xyz, r5.xyzx
        mov r11.w, l(0)
        store_structured u0.xyzw, r6.y, l(32), r11.xyzw
        store_structured u0.xyzw, r6.y, l(48), r3.xyzw
        store_structured u0.xy, r6.y, l(64), r0.yxyy

#line 138
        store_structured u0.xyzw, r6.z, l(0), r8.xyzw
        store_structured u0.xyzw, r6.z, l(16), r10.xyzw
        store_structured u0.xyzw, r6.z, l(32), r5.xyzw
        store_structured u0.xyzw, r6.z, l(48), r3.xyzw
        store_structured u0.xy, r6.z, l(64), r0.yxyy

#line 139
      endif 

#line 140
      ine r1.w, r0.x, r1.x
      if_nz r1.w

#line 142
        mov r7.w, r2.z
        store_structured u0.xyzw, r1.z, l(0), r7.xyzw
        mov r2.zw, cb1[0].xxxy
        store_structured u0.xyzw, r1.z, l(16), r2.xyzw
        mov r5.xy, cb1[0].zwzz
        mov r5.w, l(0)
        store_structured u0.xyzw, r1.z, l(32), r5.xyzw
        mov r3.w, l(-1.000000)
        store_structured u0.xyzw, r1.z, l(48), r3.xyzw
        store_structured u0.xy, r1.z, l(64), r0.yxyy

#line 144
        imad r1.yw, r1.yyyy, l(0, 6, 0, 6), l(0, 2, 0, 3)

#line 143
        mov r8.w, r9.z
        store_structured u0.xyzw, r1.y, l(0), r8.xyzw
        mov r9.zw, cb1[0].xxxy
        store_structured u0.xyzw, r1.y, l(16), r9.xyzw
        mov r6.xyz, r5.xyzx
        mov r6.w, l(1.000000)
        store_structured u0.xyzw, r1.y, l(32), r6.xyzw
        store_structured u0.xyzw, r1.y, l(48), r3.xyzw
        store_structured u0.xy, r1.y, l(64), r0.yxyy

#line 144
        store_structured u0.xyzw, r1.w, l(0), r7.xyzw
        store_structured u0.xyzw, r1.w, l(16), r2.xyzw
        store_structured u0.xyzw, r1.w, l(32), r5.xyzw
        store_structured u0.xyzw, r1.w, l(48), r3.xyzw
        store_structured u0.xy, r1.w, l(64), r0.yxyy

#line 145
      endif 

#line 251
    else   // Prior locations: r2.x <- viewDir.x; r2.y <- viewDir.y; r2.z <- viewDir.z

#line 254
      iadd r1.y, -r0.y, vThreadID.x

#line 154
      mul r2.xyz, r3.xyzx, cb1[2].zxyz
      mad r2.xyz, r3.zxyz, cb1[2].xyzx, -r2.xyzx
      mul r5.xyz, r2.xyzx, r3.zxyz
      mad r2.xyz, r3.yzxy, r2.yzxy, -r5.xyzx
      dp3 r1.z, r2.xyzx, r2.xyzx
      rsq r1.z, r1.z
      mul r2.xyz, r1.zzzz, r2.xyzx  // r2.x <- dir.x; r2.y <- dir.y; r2.z <- dir.z

#line 155
      dp3 r1.z, r3.xyzx, r3.xyzx
      rsq r1.z, r1.z
      mul r5.xyz, r1.zzzz, r3.zxyz
      itof r1.z, cb0[6].z
      div r1.w, l(6.283185), r1.z

#line 108
      sincos r6.x, r7.x, r1.w  // r7.x <- c; r6.x <- s

#line 109
      add r1.w, -r7.x, l(1.000000)  // r1.w <- t

#line 113
      mul r8.xyzw, r5.yyyz, r1.wwww
      mul r6.xyz, r5.xyzx, r6.xxxx
      mad r9.xy, r8.zyzz, r5.xzxx, r6.zxzz  // r9.x <- <rot3D_id50 return value>._m02; r9.y <- <rot3D_id50 return value>._m10
      mad r10.xy, r8.xwxx, r5.yzyy, r7.xxxx  // r10.x <- <rot3D_id50 return value>._m00; r10.y <- <rot3D_id50 return value>._m11
      mad r9.z, r8.w, r5.x, -r6.y  // r9.z <- <rot3D_id50 return value>._m12
      mad r11.xy, r8.yzyy, r5.zxzz, -r6.xzxx  // r11.x <- <rot3D_id50 return value>._m01; r11.y <- <rot3D_id50 return value>._m20
      mad r11.z, r8.w, r5.x, r6.y  // r11.z <- <rot3D_id50 return value>._m21
      mul r2.w, r5.x, r5.x
      mad r9.w, r2.w, r1.w, r7.x  // r9.w <- <rot3D_id50 return value>._m22

#line 156
      mul r5.xyz, r0.wwww, r2.xyzx
      mad r5.xyz, r5.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r4.xyzx  // r5.x <- v0.Position.x; r5.y <- v0.Position.y; r5.z <- v0.Position.z

#line 158
      itof r0.z, r0.z
      div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z  // r0.z <- divX

#line 159
      div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z  // r1.z <- divY

#line 160
      utof r1.w, r0.x
      mul r6.z, r0.z, r1.w  // r6.z <- v0.TexCoord.x

#line 173
      imul null, r0.z, r1.y, l(6)
      imad r1.y, r1.y, l(6), l(-6)

#line 181
      ine r1.x, r0.x, r1.x

#line 169
      mov r10.z, r9.y
      mov r10.w, r11.y
      mov r11.w, r10.y

#line 177
      mov r7.zw, cb1[0].xxxy
      mov r8.xy, cb1[0].zwzz
      mov r12.xyz, r3.xyzx
      mov r12.w, l(-1.000000)

#line 178
      mov r13.zw, cb1[0].xxxy
      mov r6.xy, cb1[0].zwzz

#line 183
      mov r14.zw, cb1[0].xxxy
      mov r15.xy, cb1[0].zwzz
      mov r3.w, l(-1.000000)

#line 184
      mov r16.zw, cb1[0].xxxy
      mov r17.xy, cb1[0].zwzz

#line 166
      mov r18.xyz, r5.xyzx  // r18.x <- v0.Position.x; r18.y <- v0.Position.y; r18.z <- v0.Position.z
      mov r18.w, r6.z  // r18.w <- v0.TexCoord.x
      mov r19.xyz, r2.xyzx  // r19.x <- dir.x; r19.y <- dir.y; r19.z <- dir.z
      mov r17.w, l(0)  // r17.w <- v0.TexCoord.y
      mov r1.w, l(0)  // r1.w <- i
      loop 
        uge r2.w, r1.w, cb0[6].z
        breakc_nz r2.w

#line 169
        dp3 r20.x, r19.xyzx, r10.xzwx  // r20.x <- dir.x
        dp3 r20.y, r19.xzyx, r11.xzwx  // r20.y <- dir.y
        dp3 r20.z, r19.xyzx, r9.xzwx  // r20.z <- dir.z

#line 170
        mul r21.xyz, r0.wwww, r20.xyzx
        mad r21.xyz, r21.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r4.xyzx  // r21.x <- v1.Position.x; r21.y <- v1.Position.y; r21.z <- v1.Position.z

#line 172
        iadd r2.w, r1.w, l(1)
        utof r4.w, r2.w
        mul r6.w, r1.z, r4.w  // r6.w <- v1.TexCoord.y

#line 173
        imul null, r4.w, r1.w, l(6)

#line 175
        if_nz r0.x

#line 173
          imad r5.w, r1.y, cb0[6].z, r4.w  // r5.w <- prevOffset

#line 179
          iadd r22.xyz, r5.wwww, l(1, 4, 5, 0)

#line 177
          mov r23.xyz, r18.xyzx
          mov r23.w, r19.x
          store_structured u0.xyzw, r22.x, l(0), r23.xyzw
          mov r7.xy, r19.yzyy
          store_structured u0.xyzw, r22.x, l(16), r7.xyzw
          mov r8.z, r18.w
          mov r8.w, r17.w
          store_structured u0.xyzw, r22.x, l(32), r8.xyzw
          store_structured u0.xyzw, r22.x, l(48), r12.xyzw
          store_structured u0.xy, r22.x, l(64), r0.yxyy

#line 178
          mov r21.w, r20.x
          store_structured u0.xyzw, r22.y, l(0), r21.xyzw
          mov r13.xy, r20.yzyy
          store_structured u0.xyzw, r22.y, l(16), r13.xyzw
          store_structured u0.xyzw, r22.y, l(32), r6.xyzw
          store_structured u0.xyzw, r22.y, l(48), r12.xyzw
          store_structured u0.xy, r22.y, l(64), r0.yxyy

#line 179
          store_structured u0.xyzw, r22.z, l(0), r23.xyzw
          store_structured u0.xyzw, r22.z, l(16), r7.xyzw
          store_structured u0.xyzw, r22.z, l(32), r8.xyzw
          store_structured u0.xyzw, r22.z, l(48), r12.xyzw
          store_structured u0.xy, r22.z, l(64), r0.yxyy

#line 180
        endif 

#line 181
        if_nz r1.x

#line 174
          imad r4.w, r0.z, cb0[6].z, r4.w  // r4.w <- offset

#line 183
          mov r21.w, r20.x
          store_structured u0.xyzw, r4.w, l(0), r21.xyzw
          mov r14.xy, r20.yzyy
          store_structured u0.xyzw, r4.w, l(16), r14.xyzw
          mov r15.zw, r6.zzzw
          store_structured u0.xyzw, r4.w, l(32), r15.xyzw
          store_structured u0.xyzw, r4.w, l(48), r3.xyzw
          store_structured u0.xy, r4.w, l(64), r0.yxyy

#line 185
          iadd r7.xy, r4.wwww, l(2, 3, 0, 0)

#line 184
          mov r22.xyz, r18.xyzx
          mov r22.w, r19.x
          store_structured u0.xyzw, r7.x, l(0), r22.xyzw
          mov r16.xy, r19.yzyy
          store_structured u0.xyzw, r7.x, l(16), r16.xyzw
          mov r17.z, r18.w
          store_structured u0.xyzw, r7.x, l(32), r17.xyzw
          store_structured u0.xyzw, r7.x, l(48), r3.xyzw
          store_structured u0.xy, r7.x, l(64), r0.yxyy

#line 185
          store_structured u0.xyzw, r7.y, l(0), r21.xyzw
          store_structured u0.xyzw, r7.y, l(16), r14.xyzw
          store_structured u0.xyzw, r7.y, l(32), r15.xyzw
          store_structured u0.xyzw, r7.y, l(48), r3.xyzw
          store_structured u0.xy, r7.y, l(64), r0.yxyy

#line 186
        endif 

#line 189
        mov r18.xyz, r21.xyzx
        mov r18.w, r6.z
        mov r19.xyz, r20.xyzx  // r19.x <- dir.x; r19.y <- dir.y; r19.z <- dir.z
        mov r17.w, r6.w
        mov r1.w, r2.w
      endloop 

#line 255
    endif 
  endif 
endif 

#line 270
ret 
// Approximately 262 instruction slots used
***************************
*************************/
static const float PI_id34 = 3.1415926535897;
static const float TWOPI_id37 = 6.28318531;
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
    uint SegmentId_id33;
    uint LineId_id32;
    float3 LinePosition_id31;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct Matrix4x4 
{
    float4x4 Matrix;
};
struct Ray 
{
    float3 ro, rd, sp, sn;
};
struct LineAttribute 
{
    float w;
    float4 c;
};
struct LineInfo 
{
    int id;
    int start;
    int count;
};
struct Pos3Norm3Col4Tex2 
{
    float3 Position;
    float3 Normal;
    float4 Color;
    float2 TexCoord;
};
struct Pos3Norm3Col4Tex2Tan4Id2 
{
    float3 Position;
    float3 Normal;
    float4 Color;
    float2 TexCoord;
    float4 Tangent;
    uint LineId;
    uint SegmentId;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
    int ThicknessSpace_id45 = 0;
    int MeshType_id46 = 0;
    float4x4 Transform_id47;
    bool ViewAlign_id48;
    bool NormalBend_id49;
    int Resolution_id50;
    int SegmentCountGlobal_id51;
};
cbuffer PerDraw 
{
    float4x4 World_id18;
    float4x4 WorldInverse_id19;
    float4x4 WorldInverseTranspose_id20;
    float4x4 WorldView_id21;
    float4x4 WorldViewInverse_id22;
    float4x4 WorldViewProjection_id23;
    float3 WorldScale_id24;
    float4 EyeMS_id25;
};
cbuffer PerUpdate 
{
    float4 InputValue_id57;
    float3 InputValue_id58;
    float3 InputValue_id59;
    float InputValue_id60;
};
cbuffer PerView 
{
    float4x4 View_id11;
    float4x4 ViewInverse_id12;
    float4x4 Projection_id13;
    float4x4 ProjectionInverse_id14;
    float4x4 ViewProjection_id15;
    float2 ProjScreenRay_id16;
    float4 Eye_id17;
    float NearClipPlane_id26 = 1.0f;
    float FarClipPlane_id27 = 100.0f;
    float2 ZProjection_id28;
    float2 ViewSize_id29;
    float AspectRatio_id30;
};
StructuredBuffer<float3> PositionBuffer_id43;
RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer_id44;
StructuredBuffer<LineInfo> InfoBuffer_id52;
float3x3 rot3D_id50(float3 axis, float angle)
{
    float c, s;
    sincos(angle, s, c);
    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;
    return float3x3(t * x * x + c, t * x * y - s * z, t * x * z + s * y, t * x * y + s * z, t * y * y + c, t * y * z - s * x, t * x * z - s * y, t * y * z + s * x, t * z * z + c);
}
void FlatMeshLineStrip_id52(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id, uint lineId, uint segmentId, float3 pos, float3 tan, float scale, float4 color, int sampleCnt, bool normalBend, float3 up = float3(0, 1, 0))
{
    Pos3Norm3Col4Tex2Tan4Id2 v0, v1;
    float3 dir = normalize(cross(tan, up));
    v0.Position = pos + dir * .5 * scale;
    v1.Position = pos - dir * .5 * scale;
    float t = normalBend ? .5 : 1;
    v0.Normal = normalize(lerp(dir, up, t));
    v1.Normal = normalize(lerp(-dir, up, t));
    v0.Color = v1.Color = color;
    float div = 1.0 / (sampleCnt - 1);
    v0.TexCoord = float2(div * segmentId, 1);
    v1.TexCoord = float2(div * segmentId, 0);
    v0.Tangent = float4(tan, -1);
    v1.Tangent = float4(tan, -1);
    v0.LineId = v1.LineId = lineId;
    v0.SegmentId = v1.SegmentId = segmentId;
    uint pOffset = (id - 1) * 6;
    uint offset = id * 6;
    if (segmentId != 0)
    {
        outputBuffer[pOffset + 1] = v0;
        outputBuffer[pOffset + 4] = v1;
        outputBuffer[pOffset + 5] = v0;
    }
    if (segmentId != sampleCnt - 1)
    {
        outputBuffer[offset + 0] = v1;
        outputBuffer[offset + 2] = v0;
        outputBuffer[offset + 3] = v1;
    }
}
float3 Compute_id59()
{
    return InputValue_id58;
}
void TubeMeshLineStrip_id54(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id, uint lineId, uint segmentId, float3 pos, float3 tan, float scale, float4 color, int sampleCnt, int resolution, float3 up = float3(0, 1, 0))
{
    Pos3Norm3Col4Tex2Tan4Id2 v0, v1;
    float3 dir = normalize(cross(tan, cross(tan, up)));
    float3x3 r = rot3D_id50(normalize(tan), TWOPI_id37 / resolution);
    v0.Position = pos + dir * .5 * scale;
    v0.Color = v1.Color = color;
    float divX = 1.0 / (float)sampleCnt;
    float divY = 1.0 / resolution;
    v0.TexCoord = float2(divX * segmentId, 0);
    v0.Tangent = float4(tan, -1);
    v1.Tangent = float4(tan, -1);
    v0.LineId = v1.LineId = lineId;
    v0.SegmentId = v1.SegmentId = segmentId;

    for (uint i = 0; i < resolution; i++)
    {
        v0.Normal = dir;
        dir = mul(dir, r);
        v1.Position = pos + dir * .5 * scale;
        v1.Normal = dir;
        v1.TexCoord = float2(divX * segmentId, divY * (i + 1));
        uint prevOffset = (id - 1) * 6 * resolution + 6 * i;
        uint offset = id * 6 * resolution + 6 * i;
        if (segmentId != 0)
        {
            outputBuffer[prevOffset + 1] = v0;
            outputBuffer[prevOffset + 4] = v1;
            outputBuffer[prevOffset + 5] = v0;
        }
        if (segmentId != sampleCnt - 1)
        {
            outputBuffer[offset + 0] = v1;
            outputBuffer[offset + 2] = v0;
            outputBuffer[offset + 3] = v1;
        }
        v0.Position = v1.Position;
        v0.TexCoord = v1.TexCoord;
    }
}
float3 Compute_id58()
{
    return InputValue_id59;
}
float4 Compute_id57()
{
    return InputValue_id57;
}
float Compute_id56()
{
    return InputValue_id60;
}
uint sbSize3_id5(StructuredBuffer<float3> sBuffer)
{
    uint count, dummy;
    sBuffer.GetDimensions(count, dummy);
    return count;
}
void Compute_id55(inout CS_STREAMS streams)
{
    uint dtid = streams.DispatchThreadId_id1.x;
    uint n = sbSize3_id5(PositionBuffer_id43);
    if (dtid >= n)
        return;
    uint segmentId, lineId, segmentCount;
    uint count, dummy;
    InfoBuffer_id52.GetDimensions(count, dummy);
    if (count > 0)
    {
        LineInfo info = InfoBuffer_id52[count - 1];
        if (dtid >= info.start + info.count)
            return;
        info = InfoBuffer_id52[dtid];
        segmentId = dtid - info.start;
        lineId = info.id;
        segmentCount = info.count;
    }
    else
    {
        segmentId = dtid % SegmentCountGlobal_id51;
        lineId = dtid / SegmentCountGlobal_id51;
        segmentCount = SegmentCountGlobal_id51;
    }
    streams.SegmentId_id33 = segmentId;
    streams.LineId_id32 = lineId;
    uint prevId = segmentId == 0 ? dtid : dtid - 1;
    uint nextId = segmentId == segmentCount - 1 ? dtid : dtid + 1;
    float3 p = PositionBuffer_id43[dtid];
    float3 prevPt = PositionBuffer_id43[prevId];
    float3 nextPt = PositionBuffer_id43[nextId];
    float3 t = mul(nextPt - prevPt, (float3x3)Transform_id47);
    p = mul(float4(p, 1), Transform_id47).xyz;
    streams.LinePosition_id31 = p;
    float3 viewDir = ViewInverse_id12[3].xyz - p;
    float3 viewFront = ViewInverse_id12[2].xyz;
    float scale = ThicknessSpace_id45 == 1 ? mul(float4(dot(viewFront, viewDir).xxx, 1.0), ProjectionInverse_id14).y * .2 : 1;
    scale *= Compute_id56();
    if (MeshType_id46 == 0)
    {
        FlatMeshLineStrip_id52(outputBuffer_id44, dtid - lineId, lineId, segmentId, p, t, scale, Compute_id57(), segmentCount, NormalBend_id49, ViewAlign_id48 ? normalize(viewDir) : Compute_id59());
    }
    else
    {
        TubeMeshLineStrip_id54(outputBuffer_id44, dtid - lineId, lineId, segmentId, p, t, scale, Compute_id57(), segmentCount, Resolution_id50, Compute_id58());
    }
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id55(streams);
}
