/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ShaderFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SetNormalMap_ShaderFX [{Provider = InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>}, {ShadingColor0 = ComputeColor}]
@P Provider: InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>
@P ShadingColor0: ComputeColor
***************************
*****     Sources     *****
***************************
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    SetNormalMap_ShaderFX => 2cb628a772976a32d3352f29f12e4b10
@S    FlipNormals_ShaderFX => 9c3c30f5650b735ea5de25c5cf15e2a3
@S    MaterialExtension => bd314d2afed93384fa52af5d242de440
@S    ShadingBase => b0f11f286acc22f5586417a8311cb632
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    PositionStream4 => 992b49e1b4dd13d8ef84a05830d70229
@S    NormalBase => b2b31addde884722f942622026837c39
@S    NormalUpdate => 6fd3c9b8fa943d9951400645fe40502e
@S    NormalStream => ea68512133899a045766d21afb59733a
@S    TransformationBase => 21981c533d88209fdcf07f258ddf01c2
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    ComputeFloat2 => 4826dbf2e774b7283c93b6121c851c5d
@S    InputFloat2 => d6238a7d677592382c8158617d803399
@S    DeclFloat2 => d5fe6f879293db53179d13cf4b1d1f3d
***************************
*****     Stages      *****
***************************
@G    Vertex => 6b076546190236f5c6447c492dab897f
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// NORMAL                   0   xyz         0     NONE   float       
// TANGENT                  0   xyzw        1     NONE   float       
// POSITION_WS              0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// NORMALWS                 0   xyz         0     NONE   float   xyz 
// POSITION_WS              0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_input v2.xyzw
dcl_output o0.xyz
dcl_output o1.xyzw
//
// Initial variable locations:
//   v0.x <- __input__.meshNormal_id18.x; v0.y <- __input__.meshNormal_id18.y; v0.z <- __input__.meshNormal_id18.z; 
//   v1.x <- __input__.meshTangent_id20.x; v1.y <- __input__.meshTangent_id20.y; v1.z <- __input__.meshTangent_id20.z; v1.w <- __input__.meshTangent_id20.w; 
//   v2.x <- __input__.PositionWS_id16.x; v2.y <- __input__.PositionWS_id16.y; v2.z <- __input__.PositionWS_id16.z; v2.w <- __input__.PositionWS_id16.w; 
//   o1.x <- <VSMain return value>.PositionWS_id16.x; o1.y <- <VSMain return value>.PositionWS_id16.y; o1.z <- <VSMain return value>.PositionWS_id16.z; o1.w <- <VSMain return value>.PositionWS_id16.w; 
//   o0.x <- <VSMain return value>.normalWS_id21.x; o0.y <- <VSMain return value>.normalWS_id21.y; o0.z <- <VSMain return value>.normalWS_id21.z
//
#line 269 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_6150e74648012dcfe16f31a4a5512517.hlsl"
mov o0.xyz, l(0,0,0,0)
mov o1.xyzw, v2.xyzw
ret 
// Approximately 3 instruction slots used
@G    Pixel => 0c34834b86c06e7b539e69815e8e4f41
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// NORMALWS                 0   xyz         0     NONE   float       
// POSITION_WS              0   xyzw        1     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_output o0.xyzw
//
// Initial variable locations:
//   v0.x <- __input__.normalWS_id21.x; v0.y <- __input__.normalWS_id21.y; v0.z <- __input__.normalWS_id21.z; 
//   v1.x <- __input__.PositionWS_id16.x; v1.y <- __input__.PositionWS_id16.y; v1.z <- __input__.PositionWS_id16.z; v1.w <- __input__.PositionWS_id16.w; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 256 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_6150e74648012dcfe16f31a4a5512517.hlsl"
mov o0.xyzw, l(0,0,0,0)
ret 
// Approximately 2 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float4 PositionWS_id16;
    float3 normalWS_id21;
    float3 meshNormalWS_id19;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float3 normalWS_id21 : NORMALWS;
    float4 PositionWS_id16 : POSITION_WS;
};
struct VS_STREAMS 
{
    float3 meshNormal_id18;
    float4 meshTangent_id20;
    float4 PositionWS_id16;
    float3 normalWS_id21;
};
struct VS_OUTPUT 
{
    float3 normalWS_id21 : NORMALWS;
    float4 PositionWS_id16 : POSITION_WS;
};
struct VS_INPUT 
{
    float3 meshNormal_id18 : NORMAL;
    float4 meshTangent_id20 : TANGENT;
    float4 PositionWS_id16 : POSITION_WS;
};
cbuffer PerDraw 
{
    float4x4 World_id30;
    float4x4 WorldInverse_id31;
    float4x4 WorldInverseTranspose_id32;
    float4x4 WorldView_id33;
    float4x4 WorldViewInverse_id34;
    float4x4 WorldViewProjection_id35;
    float3 WorldScale_id36;
    float4 EyeMS_id37;
};
cbuffer PerMaterial 
{
    bool FlipNormal_id96;
    bool FlipTangent_id97;
    float strength_id100 = 1.0;
};
cbuffer PerUpdate 
{
    float2 InputValue_id102;
};
cbuffer PerView 
{
    float4x4 View_id23;
    float4x4 ViewInverse_id24;
    float4x4 Projection_id25;
    float4x4 ProjectionInverse_id26;
    float4x4 ViewProjection_id27;
    float2 ProjScreenRay_id28;
    float4 Eye_id29;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id39;
    float2 Texture1TexelSize_id41;
    float2 Texture2TexelSize_id43;
    float2 Texture3TexelSize_id45;
    float2 Texture4TexelSize_id47;
    float2 Texture5TexelSize_id49;
    float2 Texture6TexelSize_id51;
    float2 Texture7TexelSize_id53;
    float2 Texture8TexelSize_id55;
    float2 Texture9TexelSize_id57;
};
Texture2D Texture0_id38;
Texture2D Texture1_id40;
Texture2D Texture2_id42;
Texture2D Texture3_id44;
Texture2D Texture4_id46;
Texture2D Texture5_id48;
Texture2D Texture6_id50;
Texture2D Texture7_id52;
Texture2D Texture8_id54;
Texture2D Texture9_id56;
TextureCube TextureCube0_id58;
TextureCube TextureCube1_id59;
TextureCube TextureCube2_id60;
TextureCube TextureCube3_id61;
Texture3D Texture3D0_id62;
Texture3D Texture3D1_id63;
Texture3D Texture3D2_id64;
Texture3D Texture3D3_id65;
SamplerState Sampler_id66;
SamplerState PointSampler_id67 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id68 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id69 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id70 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id71 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id72 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id73 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id74 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id75 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id76;
SamplerState Sampler1_id77;
SamplerState Sampler2_id78;
SamplerState Sampler3_id79;
SamplerState Sampler4_id80;
SamplerState Sampler5_id81;
SamplerState Sampler6_id82;
SamplerState Sampler7_id83;
SamplerState Sampler8_id84;
SamplerState Sampler9_id85;
Texture2D<float4> NormalMap_id98;
SamplerState NormalSampler_id99;
float4 Compute_id21()
{
    return 0;
}
float4 Shading_id2()
{
    return Compute_id21();
}
float4 Shading_id16()
{
    return Shading_id2();
}
float2 Compute_id22()
{
    return InputValue_id102;
}
float4 StrideShadingWorldNormal_id19(inout PS_STREAMS streams, float3 worldPos, float3 normal)
{
    float2 uv = Compute_id22();
    float3 bumpsNormal = NormalMap_id98.Sample(NormalSampler_id99, uv).xyz;
    float3 p_dx = ddx(worldPos);
    float3 p_dy = ddy(worldPos);
    float2 tc_dx = ddx(uv);
    float2 tc_dy = ddy(uv);
    float3 t = normalize(tc_dy.y * p_dx - tc_dx.y * p_dy);
    float3 b = normalize(tc_dy.x * p_dx - tc_dx.x * p_dy);
    float3 n = normalize(normal);
    float3 x = cross(n, t);
    t = cross(x, n);
    t = normalize(t);
    x = cross(b, n);
    b = cross(n, x);
    b = normalize(b);
    bumpsNormal = bumpsNormal * 2.0 - 1.0;
    streams.normalWS_id21 = normalize(streams.normalWS_id21 + (bumpsNormal.x * t + bumpsNormal.y * b) * strength_id100);
    streams.meshNormalWS_id19 = streams.normalWS_id21;
    return Shading_id16();
}
void PreTransformPosition_id11()
{
}
float4 Shading_id20(inout PS_STREAMS streams)
{
    return StrideShadingWorldNormal_id19(streams, streams.PositionWS_id16, streams.normalWS_id21);
}
void PSMain_id1()
{
}
void PostTransformPosition_id13()
{
}
void TransformPosition_id12()
{
}
void PreTransformPosition_id18(inout VS_STREAMS streams)
{
    if (FlipNormal_id96)
        streams.meshNormal_id18.xyz = -streams.meshNormal_id18.xyz;
    if (FlipTangent_id97)
        streams.meshTangent_id20.xyz = -streams.meshTangent_id20.xyz;
    PreTransformPosition_id11();
}
void GenerateNormal_VS_id4(inout VS_STREAMS streams)
{
    streams.normalWS_id21 = 0.0f;
}
void VSMain_id0()
{
}
void PSMain_id3(inout PS_STREAMS streams)
{
    PSMain_id1();
    streams.ColorTarget_id2 = Shading_id20(streams);
}
void GenerateNormal_PS_id5()
{
}
void BaseTransformVS_id15(inout VS_STREAMS streams)
{
    PreTransformPosition_id18(streams);
    TransformPosition_id12();
    PostTransformPosition_id13();
}
void VSMain_id10(inout VS_STREAMS streams)
{
    VSMain_id0();
    GenerateNormal_VS_id4(streams);
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.normalWS_id21 = __input__.normalWS_id21;
    streams.PositionWS_id16 = __input__.PositionWS_id16;
    GenerateNormal_PS_id5();
    PSMain_id3(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.meshNormal_id18 = __input__.meshNormal_id18;
    streams.meshTangent_id20 = __input__.meshTangent_id20;
    streams.PositionWS_id16 = __input__.PositionWS_id16;
    VSMain_id10(streams);
    BaseTransformVS_id15(streams);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.normalWS_id21 = streams.normalWS_id21;
    __output__.PositionWS_id16 = streams.PositionWS_id16;
    return __output__;
}
