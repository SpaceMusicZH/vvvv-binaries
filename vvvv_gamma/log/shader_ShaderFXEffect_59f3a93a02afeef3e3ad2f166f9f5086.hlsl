/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ShaderFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMGridSimulation_ShaderFX [{Color = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {Dim = InputFloat3<ShaderFX.InputValueFloat3.i2,PerUpdate>}, {Mesh = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}, {Piv = InputFloat3<ShaderFX.InputValueFloat3.i3,PerUpdate>}, {Rot = InputFloat3<ShaderFX.InputValueFloat3.i1,PerUpdate>}, {Trans = InputFloat3<ShaderFX.InputValueFloat3,PerUpdate>}]
@P Color: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
@P Mesh: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P Trans: InputFloat3<ShaderFX.InputValueFloat3,PerUpdate>
@P Rot: InputFloat3<ShaderFX.InputValueFloat3.i1,PerUpdate>
@P Dim: InputFloat3<ShaderFX.InputValueFloat3.i2,PerUpdate>
@P Piv: InputFloat3<ShaderFX.InputValueFloat3.i3,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerFrame [Size: 32]
@C    ParticlesCount_id98 => SMGridSimulation_ShaderFX.ParticlesCount
@C    Fake_id99 => SMGridSimulation_ShaderFX.Fake
@C    MeshCount_id100 => SMGridSimulation_ShaderFX.MeshCount
@C    GlobalDamping_id101 => SMGridSimulation_ShaderFX.GlobalDamping
@C    ColorDamping_id102 => SMGridSimulation_ShaderFX.ColorDamping
cbuffer PerUpdate [Size: 96]
@C    InputValue_id107 => ShaderFX.InputValueFloat3.i2
@C    InputValue_id108 => ShaderFX.InputValueFloat3.i3
@C    InputValue_id109 => ShaderFX.InputValueFloat3.i1
@C    InputValue_id110 => ShaderFX.InputValueFloat3
@C    InputValue_id111 => ShaderFX.InputValueFloat4
@C    InputValue_id112 => ShaderFX.InputValueFloat
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id26 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id28 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id30 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id32 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id34 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id36 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id38 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id40 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id42 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id44 => Texturing.Texture9TexelSize
@C    Reset_id95 => GPUMappingDamper_ShaderFX.Reset
***************************
******  Resources    ******
***************************
@R    Damping_id97 => GPUMappingDamper_ShaderFX.Damping [Stage: Compute, Slot: (0-0)]
@R    PlacementVertices_id104 => SMGridSimulation_ShaderFX.PlacementVertices [Stage: Compute, Slot: (1-1)]
@R    LastValues_id96 => GPUMappingDamper_ShaderFX.LastValues [Stage: Compute, Slot: (0-0)]
@R    ParticlesBuffer_id103 => SMGridSimulation_ShaderFX.ParticlesBuffer [Stage: Compute, Slot: (1-1)]
@R    PerFrame => PerFrame [Stage: Compute, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Compute, Slot: (1-1)]
@R    Globals => Globals [Stage: Compute, Slot: (2-2)]
***************************
*****     Sources     *****
***************************
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    SMGridSimulation_ShaderFX => 04c69cbff012df22c0e9117d456e7681
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SMGridParticleStruct => 1101aaa3dabe64320f382d670ccb694d
@S    SMPlacementVertexStruct => d7db2b1ae2bb867d6babd72d88045d05
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    GPUMappingDamper_ShaderFX => c33c3e7638c5f1d0d237d63f62958652
@S    SMMappingValuesStruct => 954c1a692dee3148d1e131c056afac72
@S    ComputeFloat3 => fcd85992058d53e05e3805fecfe8c7a7
@S    ComputeFloat4 => bc345c7d961ff4b1766c5b1d5e15bd5a
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat3 => 8982608ad2ca3465dcfa300c570359d5
@S    DeclFloat3 => f8ad0be4bea340b9223aeec02eb4c744
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Compute => 89516c9fa124d078c3bf6384657f8bd9
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerFrame
// {
//
//   uint ParticlesCount_id98;          // Offset:    0 Size:     4
//   bool Fake_id99;                    // Offset:    4 Size:     4
//   uint MeshCount_id100;              // Offset:    8 Size:     4
//   float GlobalDamping_id101;         // Offset:   12 Size:     4
//   float ColorDamping_id102;          // Offset:   16 Size:     4
//
// }
//
// cbuffer PerUpdate
// {
//
//   float3 InputValue_id107;           // Offset:    0 Size:    12
//   float3 InputValue_id108;           // Offset:   16 Size:    12
//   float3 InputValue_id109;           // Offset:   32 Size:    12
//   float3 InputValue_id110;           // Offset:   48 Size:    12
//   float4 InputValue_id111;           // Offset:   64 Size:    16
//   float InputValue_id112;            // Offset:   80 Size:     4
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id26;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id28;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id30;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id32;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id34;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id36;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id38;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id40;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id42;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id44;     // Offset:   72 Size:     8 [unused]
//   bool Reset_id95;                   // Offset:   80 Size:     4
//
// }
//
// Resource bind info for Damping_id97
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for PlacementVertices_id104
// {
//
//   struct PlacementVertex
//   {
//       
//       float3 Pos;                    // Offset:    0
//       float4 Rot;                    // Offset:   12
//       float3 UVW;                    // Offset:   28
//       float2 Pad;                    // Offset:   40
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for LastValues_id96
// {
//
//   struct SMMappingValues
//   {
//       
//       float3 Trans;                  // Offset:    0
//       float3 Rot;                    // Offset:   12
//       float3 Dim;                    // Offset:   24
//       float3 Piv;                    // Offset:   36
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for ParticlesBuffer_id103
// {
//
//   struct SMGridParticle
//   {
//       
//       float3 Pos;                    // Offset:    0
//       float3 Vel;                    // Offset:   12
//       float3 Rot;                    // Offset:   24
//       float3 Size;                   // Offset:   36
//       float3 Col;                    // Offset:   48
//       float Mesh;                    // Offset:   60
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Damping_id97                      texture  struct         r/o             t0      1 
// PlacementVertices_id104           texture  struct         r/o             t1      1 
// LastValues_id96                       UAV  struct         r/w             u0      1 
// ParticlesBuffer_id103                 UAV  struct         r/w             u1      1 
// PerFrame                          cbuffer      NA          NA            cb0      1 
// PerUpdate                         cbuffer      NA          NA            cb1      1 
// Globals                           cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_constantbuffer CB2[6], immediateIndexed
dcl_resource_structured t0, 12
dcl_resource_structured t1, 48
dcl_uav_structured u0, 48
dcl_uav_structured u1, 64
dcl_input vThreadID.x
dcl_temps 13
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id14.x; vThreadGroupID.y <- __input__.GroupId_id14.y; vThreadGroupID.z <- __input__.GroupId_id14.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id15.x; vThreadID.y <- __input__.DispatchThreadId_id15.y; vThreadID.z <- __input__.DispatchThreadId_id15.z
//
#line 260 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_59f3a93a02afeef3e3ad2f166f9f5086.hlsl"
ult r0.x, vThreadID.x, cb0[0].x
if_nz r0.x
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.xyzw, vThreadID.x, l(0), u1.xyzw  // r0.x <- POut.Pos.x; r0.y <- POut.Pos.y; r0.z <- POut.Pos.z; r0.w <- POut.Vel.x
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r1.xyzw, vThreadID.x, l(16), u1.zwxy  // r1.z <- POut.Vel.y; r1.w <- POut.Vel.z; r1.x <- POut.Rot.x; r1.y <- POut.Rot.y
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, vThreadID.x, l(32), u1.yzwx  // r2.w <- POut.Rot.z; r2.x <- POut.Size.x; r2.y <- POut.Size.y; r2.z <- POut.Size.z
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.xyz, vThreadID.x, l(48), u1.xyzx  // r3.x <- POut.Col.x; r3.y <- POut.Col.y; r3.z <- POut.Col.z

#line 261
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r4.xyzw, vThreadID.x, l(0), t1.xyzw  // r4.x <- p.Pos.x; r4.y <- p.Pos.y; r4.z <- p.Pos.z; r4.w <- p.Rot.x
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r5.xy, vThreadID.x, l(16), t1.xyxx  // r5.x <- p.Rot.y; r5.y <- p.Rot.z
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r3.w, vThreadID.x, l(28), t1.xxxx  // r3.w <- p.UVW.x

#line 272
  if_nz cb2[5].x

#line 282
    mov r6.xyz, l(0,0,0,0)  // r6.x <- POut.Vel.x; r6.y <- POut.Vel.y; r6.z <- POut.Vel.z
    mov r0.xyz, r4.xyzx  // r0.x <- oldPos.x; r0.y <- oldPos.y; r0.z <- oldPos.z
    mov r5.z, r4.w
    mov r1.xyz, r5.zxyz  // r1.x <- oldRot.x; r1.y <- oldRot.y; r1.z <- oldRot.z
    mov r2.xyz, l(0.010000,0.010000,0.010000,0)  // r2.x <- oldSize.x; r2.y <- oldSize.y; r2.z <- oldSize.z
    mov r3.xyz, l(1.000000,1.000000,1.000000,0)  // r3.x <- oldCol.x; r3.y <- oldCol.y; r3.z <- oldCol.z
  else   // Prior locations: r0.x <- POut.Pos.x; r0.y <- POut.Pos.y; r0.z <- POut.Pos.z; r0.w <- POut.Vel.x; r1.z <- POut.Vel.y; r1.w <- POut.Vel.z; r1.x <- POut.Rot.x; r1.y <- POut.Rot.y; r2.x <- POut.Size.x; r2.y <- POut.Size.y; r2.z <- POut.Size.z; r3.x <- POut.Col.x; r3.y <- POut.Col.y; r3.z <- POut.Col.z
    mov r6.x, r0.w  // r6.x <- POut.Vel.x
    mov r6.yz, r1.zzwz  // r6.y <- POut.Vel.y; r6.z <- POut.Vel.z
    mov r1.z, r2.w  // r0.x <- oldPos.x; r0.y <- oldPos.y; r0.z <- oldPos.z; r1.x <- oldRot.x; r1.y <- oldRot.y; r1.z <- oldRot.z; r2.x <- oldSize.x; r2.y <- oldSize.y; r2.z <- oldSize.z; r3.x <- oldCol.x; r3.y <- oldCol.y; r3.z <- oldCol.z
  endif 

#line 233
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r7.xyzw, vThreadID.x, l(0), u0.wxyz  // r7.y <- m.Trans.x; r7.z <- m.Trans.y; r7.w <- m.Trans.z; r7.x <- m.Rot.x
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r8.xyzw, vThreadID.x, l(16), u0.xzwy  // r8.x <- m.Rot.y; r8.w <- m.Rot.z; r8.y <- m.Dim.x; r8.z <- m.Dim.y
  ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r9.xyzw, vThreadID.x, l(32), u0.xyzw  // r9.x <- m.Dim.z; r9.y <- m.Piv.x; r9.z <- m.Piv.y; r9.w <- m.Piv.z

#line 236
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r10.xyz, l(0), l(0), t0.xyzx
  add r11.xyz, r7.yzwy, -cb1[3].xyzx
  mad r10.xyz, r10.xyzx, r11.xyzx, cb1[3].xyzx  // r10.x <- m.Trans.x; r10.y <- m.Trans.y; r10.z <- m.Trans.z

#line 237
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r11.xyz, l(1), l(0), t0.xyzx
  mov r7.yz, r8.xxwx
  add r7.xyz, r7.xyzx, -cb1[2].xyzx
  mad r7.xyz, r11.xyzx, r7.xyzx, cb1[2].xyzx  // r7.x <- m.Rot.x; r7.y <- m.Rot.y; r7.z <- m.Rot.z

#line 238
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r11.xyz, l(2), l(0), t0.xyzx
  mov r8.w, r9.x
  add r8.xyz, r8.yzwy, -cb1[0].xyzx
  mad r8.xyz, r11.xyzx, r8.xyzx, cb1[0].xyzx  // r8.x <- m.Dim.x; r8.y <- m.Dim.y; r8.z <- m.Dim.z

#line 239
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r11.xyz, l(3), l(0), t0.xyzx
  add r9.xyz, r9.yzwy, -cb1[1].xyzx
  mad r9.yzw, r11.xxyz, r9.xxyz, cb1[1].xxyz  // r9.y <- m.Piv.x; r9.z <- m.Piv.y

#line 241
  mov r10.w, r7.x
  store_structured u0.xyzw, vThreadID.x, l(0), r10.xyzw
  mov r11.xy, r7.yzyy
  mov r11.zw, r8.xxxy
  store_structured u0.xyzw, vThreadID.x, l(16), r11.xyzw
  mov r9.x, r8.z
  store_structured u0.xyzw, vThreadID.x, l(32), r9.xyzw

#line 248
  mov r5.w, r4.w
  add r7.xyz, r5.wxyw, r7.xyzx

#line 220
  mul r11.xyz, r7.xyzx, l(6.283185, 6.283185, 6.283185, 0.000000)  // r11.x <- angle.x; r11.y <- angle.y; r11.z <- angle.z

#line 192
  sincos r9.x, r12.x, r11.z  // r12.x <- c; r9.x <- s

#line 195
  mul r11.zw, r9.zzzy, r9.xxxx

#line 194
  mad r0.w, r12.x, r9.y, -r11.z  // r0.w <- p.x

#line 195
  mad r1.w, r12.x, r9.z, r11.w  // r1.w <- p.y

#line 182
  sincos r9.x, r11.x, r11.x  // r11.x <- c; r9.x <- s

#line 184
  mul r2.w, r9.w, r9.x
  mad r12.y, r11.x, r1.w, -r2.w  // r12.y <- p.y

#line 185
  mul r2.w, r9.w, r11.x
  mad r1.w, r9.x, r1.w, r2.w  // r1.w <- p.z

#line 172
  sincos r9.x, r11.x, r11.y  // r11.x <- c; r9.x <- s

#line 174
  mul r2.w, r1.w, r9.x
  mad r12.x, r11.x, r0.w, r2.w  // r12.x <- p.x

#line 175
  mul r1.w, r1.w, r11.x
  mad r12.z, -r9.x, r0.w, r1.w  // r12.z <- p.z

#line 220
  mul r5.xyz, r5.wxyw, l(6.283185, 6.283185, 6.283185, 0.000000)  // r5.x <- angle.x; r5.y <- angle.y; r5.z <- angle.z

#line 192
  sincos r9.x, r11.x, r5.z  // r11.x <- c; r9.x <- s

#line 195
  mul r5.zw, r10.yyyx, r9.xxxx

#line 194
  mad r0.w, r11.x, r10.x, -r5.z

#line 195
  mad r1.w, r11.x, r10.y, r5.w  // r1.w <- p.y

#line 182
  sincos r5.x, r9.x, r5.x  // r9.x <- c; r5.x <- s

#line 184
  mul r2.w, r10.z, r5.x
  mad r11.y, r9.x, r1.w, -r2.w  // r11.y <- p.y

#line 185
  mul r2.w, r10.z, r9.x
  mad r1.w, r5.x, r1.w, r2.w  // r1.w <- p.z

#line 172
  sincos r5.x, r9.x, r5.y  // r9.x <- c; r5.x <- s

#line 174
  mul r2.w, r1.w, r5.x
  mad r11.x, r9.x, r0.w, r2.w  // r11.x <- p.x

#line 175
  mul r1.w, r1.w, r9.x
  mad r11.z, -r5.x, r0.w, r1.w  // r11.z <- p.z

#line 249
  add r5.xyz, r12.xyzx, r11.xyzx
  add r4.xyz, r4.xyzx, r5.xyzx  // r4.x <- p.Pos.x; r4.y <- p.Pos.y; r4.z <- p.Pos.z

#line 284
  add r0.xyz, r0.xyzx, -r4.xyzx
  mad r0.xyz, cb0[0].wwww, r0.xyzx, r4.xyzx  // r0.x <- POut.Pos.x; r0.y <- POut.Pos.y; r0.z <- POut.Pos.z

#line 285
  add r1.xyz, r1.xyzx, -r7.xyzx
  mad r1.xyz, cb0[0].wwww, r1.xyzx, r7.xyzx  // r1.x <- POut.Rot.x; r1.y <- POut.Rot.y; r1.z <- POut.Rot.z

#line 286
  add r2.xyz, r2.xyzx, -r8.xyzx
  mad r2.yzw, cb0[0].wwww, r2.xxyz, r8.xxyz  // r2.y <- POut.Size.x; r2.z <- POut.Size.y; r2.w <- POut.Size.z

#line 287
  add r3.xyz, r3.xyzx, -cb1[4].xyzx
  mad r4.xyz, cb0[1].xxxx, r3.xyzx, cb1[4].xyzx  // r4.x <- POut.Col.x; r4.y <- POut.Col.y; r4.z <- POut.Col.z

#line 288
  utof r1.w, cb0[0].z
  mul r1.w, r1.w, cb1[5].x
  iadd r3.x, cb0[0].z, l(-1)
  utof r3.x, r3.x
  max r1.w, r1.w, l(0.000000)
  min r4.w, r3.x, r1.w  // r4.w <- POut.Mesh

#line 292
  movc r3.xyz, cb0[0].yyyy, r3.wwww, r6.yzxy  // r3.x <- POut.Vel.y; r3.y <- POut.Vel.z; r3.z <- POut.Vel.x

#line 293
  mov r0.w, r3.z
  store_structured u1.xyzw, vThreadID.x, l(0), r0.xyzw
  mov r3.zw, r1.xxxy
  store_structured u1.xyzw, vThreadID.x, l(16), r3.xyzw
  mov r2.x, r1.z
  store_structured u1.xyzw, vThreadID.x, l(32), r2.xyzw
  store_structured u1.xyzw, vThreadID.x, l(48), r4.xyzw
endif 

#line 308
ret 
// Approximately 103 instruction slots used
***************************
*************************/
static const float TwoPi_id84 = 6.283185307179586476925286766559;
struct CS_STREAMS 
{
    uint3 GroupId_id14;
    uint3 DispatchThreadId_id15;
    int ThreadCountX_id21;
    int ThreadCountY_id22;
    int ThreadCountZ_id23;
    uint ThreadCountPerGroup_id19;
    uint3 ThreadGroupCount_id18;
    uint ThreadGroupIndex_id20;
    float2 TexCoord_id73;
    float2 TexCoord1_id74;
    float2 TexCoord2_id75;
    uint InstanceID_id13;
};
struct CS_INPUT 
{
    uint3 GroupId_id14 : SV_GroupID;
    uint3 DispatchThreadId_id15 : SV_DispatchThreadID;
};
struct VS_STREAMS 
{
};
struct VS_INPUT 
{
};
struct SMGridParticle 
{
    float3 Pos;
    float3 Vel;
    float3 Rot;
    float3 Size;
    float3 Col;
    float Mesh;
};
struct PlacementVertex 
{
    float3 Pos;
    float4 Rot;
    float3 UVW;
    float2 Pad;
};
struct SMMappingValues 
{
    float3 Trans;
    float3 Rot;
    float3 Dim;
    float3 Piv;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id24;
};
cbuffer PerFrame 
{
    uint ParticlesCount_id98;
    bool Fake_id99;
    uint MeshCount_id100;
    float GlobalDamping_id101;
    float ColorDamping_id102;
};
cbuffer PerUpdate 
{
    float3 InputValue_id107;
    float3 InputValue_id108;
    float3 InputValue_id109;
    float3 InputValue_id110;
    float4 InputValue_id111;
    float InputValue_id112;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id26;
    float2 Texture1TexelSize_id28;
    float2 Texture2TexelSize_id30;
    float2 Texture3TexelSize_id32;
    float2 Texture4TexelSize_id34;
    float2 Texture5TexelSize_id36;
    float2 Texture6TexelSize_id38;
    float2 Texture7TexelSize_id40;
    float2 Texture8TexelSize_id42;
    float2 Texture9TexelSize_id44;
    bool Reset_id95;
};
Texture2D Texture0_id25;
Texture2D Texture1_id27;
Texture2D Texture2_id29;
Texture2D Texture3_id31;
Texture2D Texture4_id33;
Texture2D Texture5_id35;
Texture2D Texture6_id37;
Texture2D Texture7_id39;
Texture2D Texture8_id41;
Texture2D Texture9_id43;
TextureCube TextureCube0_id45;
TextureCube TextureCube1_id46;
TextureCube TextureCube2_id47;
TextureCube TextureCube3_id48;
Texture3D Texture3D0_id49;
Texture3D Texture3D1_id50;
Texture3D Texture3D2_id51;
Texture3D Texture3D3_id52;
SamplerState Sampler_id53;
SamplerState PointSampler_id54 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id55 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id56 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id57 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id58 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id59 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id60 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id61 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id62 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id63;
SamplerState Sampler1_id64;
SamplerState Sampler2_id65;
SamplerState Sampler3_id66;
SamplerState Sampler4_id67;
SamplerState Sampler5_id68;
SamplerState Sampler6_id69;
SamplerState Sampler7_id70;
SamplerState Sampler8_id71;
SamplerState Sampler9_id72;
RWStructuredBuffer<SMMappingValues> LastValues_id96;
StructuredBuffer<float3> Damping_id97;
RWStructuredBuffer<SMGridParticle> ParticlesBuffer_id103;
StructuredBuffer<PlacementVertex> PlacementVertices_id104;
float3 rCY_id31(float3 p, float a, float3 ce)
{
    float c, s;
    float3 q = p - ce;
    c = cos(a);
    s = sin(a);
    p.x = c * q.x + s * q.z;
    p.z = -s * q.x + c * q.z;
    return p + ce;
}
float3 rCX_id30(float3 p, float a, float3 ce)
{
    float c, s;
    float3 q = p - ce;
    c = cos(a);
    s = sin(a);
    p.y = c * q.y - s * q.z;
    p.z = s * q.y + c * q.z;
    return p + ce;
}
float3 rCZ_id29(float3 p, float a, float3 ce)
{
    float c, s;
    float3 q = p - ce;
    c = cos(a);
    s = sin(a);
    p.x = c * q.x - s * q.y;
    p.y = s * q.x + c * q.y;
    return p + ce;
}
float3 Compute_id36()
{
    return InputValue_id108;
}
float3 Compute_id35()
{
    return InputValue_id107;
}
float3 Compute_id34()
{
    return InputValue_id109;
}
float3 Compute_id33()
{
    return InputValue_id110;
}
float Compute_id38()
{
    return InputValue_id112;
}
float3 RotatePlacement_id27(float3 v, float3 angle, float3 center)
{
    angle *= TwoPi_id84;
    v = rCZ_id29(v, angle.z, center);
    v = rCX_id30(v, angle.x, center);
    v = rCY_id31(v, angle.y, center);
    return v;
}
float4 Compute_id37()
{
    return InputValue_id111;
}
SMMappingValues ComputeDamping_id26(inout CS_STREAMS streams)
{
    uint index = streams.DispatchThreadId_id15.x;
    SMMappingValues m = LastValues_id96[index];

    {
        m.Trans = lerp(Compute_id33(), m.Trans, Damping_id97[0]);
        m.Rot = lerp(Compute_id34(), m.Rot, Damping_id97[1]);
        m.Dim = lerp(Compute_id35(), m.Dim, Damping_id97[2]);
        m.Piv = lerp(Compute_id36(), m.Piv, Damping_id97[3]);
    }
    LastValues_id96[index] = m;
    return m;
}
SMGridParticle Modify_id28(inout CS_STREAMS streams, SMGridParticle p)
{
    SMMappingValues m = ComputeDamping_id26(streams);
    p.Col = Compute_id37();
    float3 piv = RotatePlacement_id27(m.Piv, p.Rot + m.Rot, 0);
    p.Pos += RotatePlacement_id27(m.Trans, p.Rot, 0) + piv;
    p.Rot += m.Rot;
    p.Size = m.Dim;
    p.Mesh = Compute_id38();
    return p;
}
void Compute_id32(inout CS_STREAMS streams)
{
    uint id = streams.DispatchThreadId_id15.x;
    if (id >= ParticlesCount_id98)
        return;
    SMGridParticle POut = ParticlesBuffer_id103[id];
    PlacementVertex p = PlacementVertices_id104[id];
    streams.TexCoord_id73 = p.UVW.xy;
    streams.TexCoord1_id74 = p.UVW.zy;
    streams.TexCoord2_id75 = p.UVW.xz;
    streams.InstanceID_id13 = id;
    float3 oldPos = POut.Pos.xyz;
    float3 oldRot = POut.Rot.xyz;
    float3 oldSize = POut.Size.xyz;
    float3 oldCol = POut.Col.xyz;
    POut.Pos.xyz = p.Pos;
    POut.Rot.xyz = p.Rot;
    if (Reset_id95)
    {
        POut.Vel = 0;
        POut.Size = 0.01;
        POut.Col = 1;
        POut.Mesh = 0;
        oldPos = POut.Pos.xyz;
        oldRot = POut.Rot.xyz;
        oldSize = POut.Size.xyz;
        oldCol = POut.Col.xyz;
    }
    POut = Modify_id28(streams, POut);
    POut.Pos.xyz = lerp(POut.Pos.xyz, oldPos, GlobalDamping_id101);
    POut.Rot.xyz = lerp(POut.Rot.xyz, oldRot, GlobalDamping_id101);
    POut.Size.xyz = lerp(POut.Size.xyz, oldSize, GlobalDamping_id101);
    POut.Col.xyz = lerp(POut.Col.xyz, oldCol, ColorDamping_id102);
    POut.Mesh = clamp(POut.Mesh * MeshCount_id100, 0, MeshCount_id100 - 1);
    if (Fake_id99)
    {
        POut.Vel = streams.TexCoord_id73.xxx;
    }
    ParticlesBuffer_id103[id] = POut;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id14 = __input__.GroupId_id14;
    streams.DispatchThreadId_id15 = __input__.DispatchThreadId_id15;
    streams.ThreadCountX_id21 = 1;
    streams.ThreadCountY_id22 = 1;
    streams.ThreadCountZ_id23 = 1;
    streams.ThreadCountPerGroup_id19 = 1 * 1 * 1;
    streams.ThreadGroupCount_id18 = ThreadGroupCountGlobal_id24;
    streams.ThreadGroupIndex_id20 = (streams.GroupId_id14.z * streams.ThreadGroupCount_id18.y + streams.GroupId_id14.y) * streams.ThreadGroupCount_id18.x + streams.GroupId_id14.x;
    Compute_id32(streams);
}
void VSMain()
{
    VS_STREAMS streams = (VS_STREAMS)0;
}
