/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ShaderFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin BoxGeomExtVS_ShaderFX [{ShadingColor0 = ComputeColor}]
@P ShadingColor0: ComputeColor
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 416]
@C    World_id30 => Transformation.World
@C    WorldInverse_id31 => Transformation.WorldInverse
@C    WorldInverseTranspose_id32 => Transformation.WorldInverseTranspose
@C    WorldView_id33 => Transformation.WorldView
@C    WorldViewInverse_id34 => Transformation.WorldViewInverse
@C    WorldViewProjection_id35 => Transformation.WorldViewProjection
@C    WorldScale_id36 => Transformation.WorldScale
@C    EyeMS_id37 => Transformation.EyeMS
cbuffer PerView [Size: 352]
@C    View_id23 => Transformation.View
@C    ViewInverse_id24 => Transformation.ViewInverse
@C    Projection_id25 => Transformation.Projection
@C    ProjectionInverse_id26 => Transformation.ProjectionInverse
@C    ViewProjection_id27 => Transformation.ViewProjection
@C    ProjScreenRay_id28 => Transformation.ProjScreenRay
@C    Eye_id29 => Transformation.Eye
***************************
******  Resources    ******
***************************
@R    Particles_id98 => ParticleBuffer.Particles [Stage: None, Slot: (-1--1)]
@R    Particles_id98 => ParticleBuffer.Particles [Stage: None, Slot: (-1--1)]
@R    Particles_id98 => ParticleBuffer.Particles [Stage: Vertex, Slot: (0-0)]
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    PerView => PerView [Stage: Vertex, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    BoxGeomExtVS_ShaderFX => 07b65c4359642e4f16ee9153c87f9e8e
@S    MaterialExtension => bd314d2afed93384fa52af5d242de440
@S    ShadingBase => b0f11f286acc22f5586417a8311cb632
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    PositionStream4 => 992b49e1b4dd13d8ef84a05830d70229
@S    NormalBase => b2b31addde884722f942622026837c39
@S    NormalUpdate => 6fd3c9b8fa943d9951400645fe40502e
@S    NormalStream => ea68512133899a045766d21afb59733a
@S    TransformationBase => 21981c533d88209fdcf07f258ddf01c2
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    VertexIDStream => 9d1d889df6ab3d2e141f4e6e5d369333
@S    ParticleBuffer => a64a4612fd198ca64a3658584f8219de
***************************
*****     Stages      *****
***************************
@G    Vertex => 8256007f946453c331c478c18bc17f4e
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 World_id30;               // Offset:    0 Size:    64
//   float4x4 WorldInverse_id31;        // Offset:   64 Size:    64 [unused]
//   float4x4 WorldInverseTranspose_id32;// Offset:  128 Size:    64 [unused]
//   float4x4 WorldView_id33;           // Offset:  192 Size:    64 [unused]
//   float4x4 WorldViewInverse_id34;    // Offset:  256 Size:    64 [unused]
//   float4x4 WorldViewProjection_id35; // Offset:  320 Size:    64 [unused]
//   float3 WorldScale_id36;            // Offset:  384 Size:    12 [unused]
//   float4 EyeMS_id37;                 // Offset:  400 Size:    16 [unused]
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id23;                // Offset:    0 Size:    64 [unused]
//   float4x4 ViewInverse_id24;         // Offset:   64 Size:    64 [unused]
//   float4x4 Projection_id25;          // Offset:  128 Size:    64 [unused]
//   float4x4 ProjectionInverse_id26;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id27;      // Offset:  256 Size:    64
//   float2 ProjScreenRay_id28;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id29;                   // Offset:  336 Size:    16 [unused]
//
// }
//
// Resource bind info for Particles_id98
// {
//
//   struct Particle
//   {
//       
//       float3 Velocity;               // Offset:    0
//       float3 Position;               // Offset:   12
//       float4 Color;                  // Offset:   24
//       float Drag;                    // Offset:   40
//       int Cycle;                     // Offset:   44
//       float Age;                     // Offset:   48
//       float LifeTime;                // Offset:   52
//       int Id;                        // Offset:   56
//       float3 AxisY;                  // Offset:   60
//       float3 AxisX;                  // Offset:   72
//       float3 AxisZ;                  // Offset:   84
//       float3 Size3;                  // Offset:   96
//
//   } $Element;                        // Offset:    0 Size:   108
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Particles_id98                    texture  struct         r/o             t0      1 
// PerDraw                           cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// NORMALWS                 0   xyz         0     NONE   float       
// SV_VertexID              0   x           1   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[20], immediateIndexed
dcl_resource_structured t0, 108
dcl_input_sgv v1.x, vertex_id
dcl_output_siv o0.xyzw, position
dcl_temps 6
//
// Initial variable locations:
//   o0.x <- streams.ShadingPosition_id0.x; o0.y <- streams.ShadingPosition_id0.y; o0.z <- streams.ShadingPosition_id0.z; o0.w <- streams.ShadingPosition_id0.w; 
//   v0.x <- __input__.normalWS_id21.x; v0.y <- __input__.normalWS_id21.y; v0.z <- __input__.normalWS_id21.z; 
//   v1.x <- __input__.VertexID_VS_id96
//
#line 185 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_f052658393b89f5837bea6d7246fe110.hlsl"
udiv r0.x, null, v1.x, l(12)  // r0.x <- iid

#line 187
ld_structured_indexable(structured_buffer, stride=108)(mixed,mixed,mixed,mixed) r0.yz, r0.x, l(44), t0.xxyx  // r0.y <- p.Cycle; r0.z <- p.Age

#line 188
ieq r0.y, r0.y, l(0)
lt r0.z, r0.z, l(0.000000)
or r0.y, r0.z, r0.y

#line 190
if_z r0.y

#line 184
  udiv null, r0.y, v1.x, l(12)  // r0.y <- vid

#line 187
  ld_structured_indexable(structured_buffer, stride=108)(mixed,mixed,mixed,mixed) r1.xyz, r0.x, l(12), t0.xyzx  // r1.x <- p.Position.x; r1.y <- p.Position.y; r1.z <- p.Position.z
  ld_structured_indexable(structured_buffer, stride=108)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(60), t0.xyzw  // r2.x <- p.AxisY.x; r2.y <- p.AxisY.y; r2.z <- p.AxisY.z; r2.w <- p.AxisX.x
  ld_structured_indexable(structured_buffer, stride=108)(mixed,mixed,mixed,mixed) r3.xyzw, r0.x, l(76), t0.xyzw  // r3.x <- p.AxisX.y; r3.y <- p.AxisX.z; r3.z <- p.AxisZ.x; r3.w <- p.AxisZ.y
  ld_structured_indexable(structured_buffer, stride=108)(mixed,mixed,mixed,mixed) r4.xyzw, r0.x, l(92), t0.yzxw  // r4.z <- p.AxisZ.z; r4.x <- p.Size3.x; r4.y <- p.Size3.y; r4.w <- p.Size3.z

#line 171
  ishl r0.x, l(1), r0.y  // r0.x <- b

#line 172
  and r0.xyz, r0.xxxx, l(0x0000a55a, 3891, 0x0000330f, 0)
  movc r0.xyz, r0.xyzx, l(0.500000,0.500000,0.500000,0), l(-0.500000,-0.500000,-0.500000,0)  // r0.x <- <CubeVert_id19 return value>.x; r0.y <- <CubeVert_id19 return value>.y; r0.z <- <CubeVert_id19 return value>.z

#line 201
  mov r5.x, r2.w
  mov r5.yz, r3.xxyx
  mul r5.xyz, r0.xxxx, r5.xyzx
  mad r1.xyz, r5.xyzx, r4.xxxx, r1.xyzx  // r1.x <- posWorld.x; r1.y <- posWorld.y; r1.z <- posWorld.z

#line 202
  mul r0.xyw, r2.xyxz, r0.yyyy
  mad r0.xyw, r0.xyxw, r4.yyyy, r1.xyxz  // r0.x <- posWorld.x; r0.y <- posWorld.y; r0.w <- posWorld.z

#line 203
  mov r4.xy, r3.zwzz
  mul r1.xyz, r0.zzzz, r4.xyzx
  mad r0.xyz, r1.xyzx, r4.wwww, r0.xywx  // r0.z <- posWorld.z

#line 204
  mov r0.w, l(1.000000)
  dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- posWorld.x
  dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- posWorld.y
  dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- posWorld.z
  dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- posWorld.w

#line 207
  dp4 o0.x, r1.xyzw, cb1[16].xyzw
  dp4 o0.y, r1.xyzw, cb1[17].xyzw
  dp4 o0.z, r1.xyzw, cb1[18].xyzw
  dp4 o0.w, r1.xyzw, cb1[19].xyzw

#line 208
else   // Prior locations: r0.x <- iid
  mov o0.xyzw, l(0,0,0,0)  // o0.x <- streams.ShadingPosition_id0.x; o0.y <- streams.ShadingPosition_id0.y; o0.z <- streams.ShadingPosition_id0.z; o0.w <- streams.ShadingPosition_id0.w
endif 

#line 260
ret 
// Approximately 36 instruction slots used
@G    Pixel => 1e4661860b473dbad885e3752643153d
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_output o0.xyzw
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 249 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_f052658393b89f5837bea6d7246fe110.hlsl"
mov o0.xyzw, l(0,0,0,0)
ret 
// Approximately 2 instruction slots used
***************************
*************************/
static const float2 QuadUV_id100[4] = { float2(0, 1), float2(1, 1), float2(0, 0), float2(1, 0)};
struct PS_STREAMS 
{
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
};
struct VS_STREAMS 
{
    float3 normalWS_id21;
    uint VertexID_VS_id96;
    float3 meshNormalWS_id19;
    float2 TexCoord_id86;
    float4 PositionWS_id16;
    float DepthVS_id17;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
};
struct VS_INPUT 
{
    float3 normalWS_id21 : NORMALWS;
    uint VertexID_VS_id96 : SV_VertexID;
};
struct Particle 
{
    float3 Velocity;
    float3 Position;
    float4 Color;
    float Drag;
    int Cycle;
    float Age;
    float LifeTime;
    int Id;
    float3 AxisY;
    float3 AxisX;
    float3 AxisZ;
    float3 Size3;
};
cbuffer PerDraw 
{
    float4x4 World_id30;
    float4x4 WorldInverse_id31;
    float4x4 WorldInverseTranspose_id32;
    float4x4 WorldView_id33;
    float4x4 WorldViewInverse_id34;
    float4x4 WorldViewProjection_id35;
    float3 WorldScale_id36;
    float4 EyeMS_id37;
};
cbuffer PerView 
{
    float4x4 View_id23;
    float4x4 ViewInverse_id24;
    float4x4 Projection_id25;
    float4x4 ProjectionInverse_id26;
    float4x4 ViewProjection_id27;
    float2 ProjScreenRay_id28;
    float4 Eye_id29;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id39;
    float2 Texture1TexelSize_id41;
    float2 Texture2TexelSize_id43;
    float2 Texture3TexelSize_id45;
    float2 Texture4TexelSize_id47;
    float2 Texture5TexelSize_id49;
    float2 Texture6TexelSize_id51;
    float2 Texture7TexelSize_id53;
    float2 Texture8TexelSize_id55;
    float2 Texture9TexelSize_id57;
};
Texture2D Texture0_id38;
Texture2D Texture1_id40;
Texture2D Texture2_id42;
Texture2D Texture3_id44;
Texture2D Texture4_id46;
Texture2D Texture5_id48;
Texture2D Texture6_id50;
Texture2D Texture7_id52;
Texture2D Texture8_id54;
Texture2D Texture9_id56;
TextureCube TextureCube0_id58;
TextureCube TextureCube1_id59;
TextureCube TextureCube2_id60;
TextureCube TextureCube3_id61;
Texture3D Texture3D0_id62;
Texture3D Texture3D1_id63;
Texture3D Texture3D2_id64;
Texture3D Texture3D3_id65;
SamplerState Sampler_id66;
SamplerState PointSampler_id67 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id68 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id69 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id70 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id71 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id72 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id73 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id74 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id75 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id76;
SamplerState Sampler1_id77;
SamplerState Sampler2_id78;
SamplerState Sampler3_id79;
SamplerState Sampler4_id80;
SamplerState Sampler5_id81;
SamplerState Sampler6_id82;
SamplerState Sampler7_id83;
SamplerState Sampler8_id84;
SamplerState Sampler9_id85;
StructuredBuffer<Particle> Particles_id98;
float4 Compute_id25()
{
    return 0;
}
float4 Shading_id2()
{
    return Compute_id25();
}
float3 CubeVert_id19(in uint vertexID)
{
    uint b = 1 << vertexID;
    return float3((0xFA55A & b) != 0, (0x5A0F33 & b) != 0, (0x33330F & b) != 0) - 0.5;
}
float4 Shading_id16()
{
    return Shading_id2();
}
void PSMain_id1()
{
}
void PostTransformPosition_id23(inout VS_STREAMS streams)
{
    uint id = streams.VertexID_VS_id96;
    uint vid = id % 12;
    uint iid = id / 12;
    uint nid = vid / 4;
    Particle p = Particles_id98[iid];
    if (p.Cycle == 0 || p.Age < 0)
        return;
    float3 normals[6];
    normals[0] = p.AxisZ;
    normals[1] = -p.AxisZ;
    normals[2] = p.AxisY;
    normals[3] = -p.AxisY;
    normals[4] = p.AxisX;
    normals[5] = -p.AxisX;
    uint i = vid;
    streams.TexCoord_id86 = QuadUV_id100[i % 4].xy;
    float4 posWorld = float4(p.Position, 1);
    float3 qPos = CubeVert_id19(i);
    posWorld.xyz += qPos.x * p.AxisX * p.Size3.x;
    posWorld.xyz += qPos.y * p.AxisY * p.Size3.y;
    posWorld.xyz += qPos.z * p.AxisZ * p.Size3.z;
    posWorld = mul(posWorld, World_id30);
    streams.PositionWS_id16 = posWorld;
    streams.normalWS_id21 = normals[nid];
    streams.ShadingPosition_id0 = mul(posWorld, ViewProjection_id27);
    streams.DepthVS_id17 = streams.ShadingPosition_id0.w;
}
void TransformPosition_id22()
{
}
void PreTransformPosition_id21()
{
}
void GenerateNormal_VS_id24(inout VS_STREAMS streams)
{
    streams.meshNormalWS_id19 = streams.normalWS_id21;
}
void VSMain_id0()
{
}
void PSMain_id3(inout PS_STREAMS streams)
{
    PSMain_id1();
    streams.ColorTarget_id2 = Shading_id16();
}
void GenerateNormal_PS_id5()
{
}
void BaseTransformVS_id15(inout VS_STREAMS streams)
{
    PreTransformPosition_id21();
    TransformPosition_id22();
    PostTransformPosition_id23(streams);
}
void VSMain_id10(inout VS_STREAMS streams)
{
    VSMain_id0();
    GenerateNormal_VS_id24(streams);
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    GenerateNormal_PS_id5();
    PSMain_id3(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.normalWS_id21 = __input__.normalWS_id21;
    streams.VertexID_VS_id96 = __input__.VertexID_VS_id96;
    VSMain_id10(streams);
    BaseTransformVS_id15(streams);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    return __output__;
}
