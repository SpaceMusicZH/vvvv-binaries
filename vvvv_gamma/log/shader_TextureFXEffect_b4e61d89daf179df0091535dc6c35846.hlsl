/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin ColorPalette_TextureFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer Globals [Size: 160]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Transform_id87 => ColorPalette_TextureFX.Transform
@C    Type_id88 => ColorPalette_TextureFX.Type
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ColorPalette_TextureFX => 46b5a2f776a6a0c58dd90e552a6afa7b
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 205 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_TextureFXEffect_b4e61d89daf179df0091535dc6c35846.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 209
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => a33f87ded7ae08fa4f3c63eca932d3da
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   float4x4 Transform_id87;           // Offset:   80 Size:    64
//   int Type_id88;                     // Offset:  144 Size:     4
//      = 0x00000000 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[10], immediateIndexed
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 174 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_TextureFXEffect_b4e61d89daf179df0091535dc6c35846.hlsl"
mad r0.xy, v1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), l(-0.500000, 0.500000, 0.000000, 0.000000)
mov r0.z, l(1.000000)
dp3 r1.x, r0.xyzx, cb0[5].xywx
dp3 r1.y, r0.xyzx, cb0[6].xywx
mul r0.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mad r0.zw, r1.xxxy, l(0.000000, 0.000000, 1.000000, -1.000000), l(0.000000, 0.000000, 0.500000, 0.500000)  // r0.z <- uv.x; r0.w <- uv.y

#line 176
udiv null, r1.x, cb0[9].x, l(3)
switch r1.x

#line 179
  case l(0)

#line 168
  mad_sat r2.xy, -r0.wwww, l(2.000000, 2.000000, 0.000000, 0.000000), l(2.000000, 1.000000, 0.000000, 0.000000)

#line 138
  frc r1.w, r0.z  // r1.w <- H

#line 141
  mad r3.xyz, r1.wwww, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 142
  mad_sat r3.xyz, |r3.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r3.x <- <HUEtoRGB_id8 return value>.x; r3.y <- <HUEtoRGB_id8 return value>.y; r3.z <- <HUEtoRGB_id8 return value>.z

#line 153
  mul r4.xyz, r2.xxxx, r3.xyzx  // r4.x <- <HSVtoRGB_id9 return value>.x; r4.y <- <HSVtoRGB_id9 return value>.y; r4.z <- <HSVtoRGB_id9 return value>.z

#line 168
  max r1.w, r4.z, r4.y
  max r1.w, r1.w, r4.x
  mad r2.xzw, -r3.xxyz, r2.xxxx, r1.wwww
  mad r1.xyz, r2.yyyy, r2.xzwx, r4.xyzx  // r1.x <- col.x; r1.y <- col.y; r1.z <- col.z

#line 181
  break 

#line 182
  case l(1)

#line 162
  add r0.w, -r0.w, l(1.000000)

#line 138
  frc r0.z, r0.z  // r0.z <- H

#line 141
  mad r2.xyz, r0.zzzz, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 142
  mad_sat r2.xyz, |r2.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r2.x <- <HUEtoRGB_id8 return value>.x; r2.y <- <HUEtoRGB_id8 return value>.y; r2.z <- <HUEtoRGB_id8 return value>.z

#line 153
  mul r1.xyz, r0.wwww, r2.xyzx  // r1.x <- <HSVtoRGB_id9 return value>.x; r1.y <- <HSVtoRGB_id9 return value>.y; r1.z <- <HSVtoRGB_id9 return value>.z

#line 184
  break   // r0.z <- uv.x; r0.w <- uv.y

#line 185
  case l(2)

#line 157
  min r0.z, |r0.x|, |r0.y|
  max r0.w, |r0.x|, |r0.y|
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  mul r0.z, r0.w, r0.z
  mul r0.w, r0.z, r0.z
  mad r1.w, r0.w, l(0.020835), l(-0.085133)
  mad r1.w, r0.w, r1.w, l(0.180141)
  mad r1.w, r0.w, r1.w, l(-0.330299)
  mad r0.w, r0.w, r1.w, l(0.999866)
  mul r1.w, r0.w, r0.z
  lt r2.x, |r0.x|, |r0.y|
  mad r1.w, r1.w, l(-2.000000), l(1.570796)
  and r1.w, r2.x, r1.w
  mad r0.z, r0.z, r0.w, r1.w
  lt r0.w, r0.x, -r0.x
  and r0.w, r0.w, l(0xc0490fdb)
  add r0.z, r0.w, r0.z
  min r0.w, r0.x, r0.y
  max r1.w, r0.x, r0.y
  lt r0.w, r0.w, -r0.w
  ge r1.w, r1.w, -r1.w
  and r0.w, r0.w, r1.w
  movc r0.z, r0.w, -r0.z, r0.z
  mul r0.z, r0.z, l(0.159155)
  dp2 r0.x, r0.xyxx, r0.xyxx
  sqrt r0.x, r0.x

#line 138
  frc r0.y, r0.z  // r0.y <- H

#line 141
  mad r0.yzw, r0.yyyy, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 142
  mad_sat r0.yzw, |r0.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r0.y <- <HUEtoRGB_id8 return value>.x; r0.z <- <HUEtoRGB_id8 return value>.y; r0.w <- <HUEtoRGB_id8 return value>.z

#line 147
  mad r1.w, r0.x, l(2.000000), l(-1.000000)
  add r1.w, -|r1.w|, l(1.000000)  // r1.w <- C

#line 148
  add r0.yzw, r0.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
  mad r1.xyz, r0.yzwy, r1.wwww, r0.xxxx  // r1.x <- <HSLtoRGB_id10 return value>.x; r1.y <- <HSLtoRGB_id10 return value>.y; r1.z <- <HSLtoRGB_id10 return value>.z

#line 187
  break   // r0.z <- uv.x; r0.w <- uv.y

#line 188
endswitch 
mov o0.xyz, r1.xyzx

#line 198
mov o0.w, l(1.000000)
ret 
// Approximately 65 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    float4x4 Transform_id87;
    int Type_id88 = 0;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id8(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 HSLtoRGB_id10(in float3 HSL)
{
    float3 RGB = HUEtoRGB_id8(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}
float3 HSVtoRGB_id9(in float3 HSV)
{
    float3 RGB = HUEtoRGB_id8(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float4 Radial_id30(float4 col, float2 uv)
{
    col.rgb = HSLtoRGB_id10(float3(atan2(uv.y - .5, uv.x - .5) / acos(-1) / 2, 1, length(uv - .5)));
    return col;
}
float4 HSV_id29(float4 col, float2 uv)
{
    col.rgb = HSVtoRGB_id9(float3(uv.x, 1, 1 - uv.y));
    return col;
}
float4 HSL_id28(float4 col, float2 uv)
{
    col.rgb = HSVtoRGB_id9(float3(uv.x, 1, saturate(2 - 2 * uv.y)));
    col.rgb = lerp(col.rgb, max(col.r, max(col.g, col.b)), saturate(1 - uv.y * 2));
    return col;
}
float4 Shading_id31(inout PS_STREAMS streams)
{
    float2 uv = streams.TexCoord_id62;
    uv = mul(float4((uv.xy * 2 - 1) * float2(1, -1) * .5, 0, 1), Transform_id87).xy * float2(1, -1) + 0.5;
    float4 col = 1;
    switch ((uint)Type_id88 % 3)

    {
        case 0:
            col = HSL_id28(col, uv);
            break;
        case 1:
            col = HSV_id29(col, uv);
            break;
        case 2:
            col = Radial_id30(col, uv);
            break;
    }
    return col;
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id31(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
