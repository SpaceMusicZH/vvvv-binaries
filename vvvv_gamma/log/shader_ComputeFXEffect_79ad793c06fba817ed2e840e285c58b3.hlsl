/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin PosToHeadingMatrix_ComputeFX
***************************
******  Resources    ******
***************************
@R    posBuffer_id20 => PosToHeadingMatrix_ComputeFX.posBuffer [Stage: Compute, Slot: (0-0)]
@R    prevPosBuffer_id21 => PosToHeadingMatrix_ComputeFX.prevPosBuffer [Stage: Compute, Slot: (1-1)]
@R    OutputBuffer_id22 => PosToHeadingMatrix_ComputeFX.OutputBuffer [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    PosToHeadingMatrix_ComputeFX => b906b6dafc504ae7af932a2d3e0e9dd4
@S    FuseCoreTransform => 2cbaeb06b0367b954ef12b555e3c4d7a
@S    FuseCoreMath => fdeacca3b2f02b9acb6430ed603f50b4
@S    FuseCommonTypes => 294db151085426350495bb436e7480dd
@S    FuseCommonBuffer => 65b35e271cc4ebdf63ebebd0f53f481c
***************************
*****     Stages      *****
***************************
@G    Compute => 5d823e899ff81f228618e5f438778906
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for OutputBuffer_id22
// {
//
//   struct Matrix4x4
//   {
//       
//       float4x4 Matrix;               // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// posBuffer_id20                    texture  float3         buf             t0      1 
// prevPosBuffer_id21                texture  float3         buf             t1      1 
// OutputBuffer_id22                     UAV  struct         r/w             u0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_resource_buffer (float,float,float,float) t0
dcl_resource_buffer (float,float,float,float) t1
dcl_uav_structured u0, 64
dcl_input vThreadID.x
dcl_temps 4
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 58 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_79ad793c06fba817ed2e840e285c58b3.hlsl"
ld_indexable(buffer)(float,float,float,float) r0.xyz, vThreadID.xxxx, t1.xyzw  // r0.x <- prevPos.x; r0.y <- prevPos.y; r0.z <- prevPos.z

#line 57
ld_indexable(buffer)(float,float,float,float) r1.xyz, vThreadID.xxxx, t0.xyzw  // r1.x <- pos.x; r1.y <- pos.y; r1.z <- pos.z

#line 63
add r0.xyz, r0.zxyz, -r1.zxyz

#line 40
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- z.z; r0.y <- z.x; r0.z <- z.y

#line 41
mul r2.xyz, r0.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
mad r2.xyz, r0.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000), -r2.xyzx
dp2 r1.w, r2.yzyy, r2.yzyy
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.zxyz  // r2.x <- x.x; r2.y <- x.y; r2.z <- x.z

#line 42
mul r3.xyz, r0.xyzx, r2.yzxy
mad r3.xyz, r0.zxyz, r2.zxyz, -r3.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xzyx  // r3.x <- y.x; r3.y <- y.z; r3.z <- y.y

#line 64
mov r2.y, r3.x
mov r3.x, r2.z
mov r2.z, r0.y
mov r2.w, r1.x
store_structured u0.xyzw, vThreadID.x, l(0), r2.xyzw
mov r0.y, r3.z
mov r0.w, r1.y
mov r3.w, r1.z
mov r3.z, r0.x
mov r0.x, l(0)
store_structured u0.xyzw, vThreadID.x, l(16), r0.xyzw
store_structured u0.xyzw, vThreadID.x, l(32), r3.xyzw
store_structured u0.xyzw, vThreadID.x, l(48), l(0,0,0,1.000000)

#line 79
ret 
// Approximately 30 instruction slots used
***************************
*************************/
static const float PI_id11 = 3.1415926535897;
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct Matrix4x4 
{
    float4x4 Matrix;
};
struct Ray 
{
    float3 ro, rd, sp, sn;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
Buffer<float3> posBuffer_id20;
Buffer<float3> prevPosBuffer_id21;
RWStructuredBuffer<Matrix4x4> OutputBuffer_id22;
float4x4 as4x4_id43(float3x3 m)
{
    float4x4 newM = { m._11, m._12, m._13, 0, m._21, m._22, m._23, 0, m._31, m._32, m._33, 0, 0, 0, 0, 1};
    return newM;
}
float3x3 lookat_id44(float3 dir, float3 up = float3(0, 1, 0))
{
    float3 z = normalize(dir);
    float3 x = normalize(cross(up, z));
    float3 y = normalize(cross(z, x));
    return float3x3(x, y, z);
}
float4x4 lookat4x4_id45(float3 dir, float3 up = float3(0, 1, 0))
{
    return as4x4_id43(lookat_id44(dir, up));
}
float4x4 identity4x4_id41()
{
    float4x4 m = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};
    return m;
}
void Compute_id93(inout CS_STREAMS streams)
{
    uint index = streams.DispatchThreadId_id1.x;
    float3 pos = posBuffer_id20[index];
    float3 prevPos = prevPosBuffer_id21[index];
    float4x4 mT = identity4x4_id41();
    mT._41 = pos.x;
    mT._42 = pos.y;
    mT._43 = pos.z;
    float4x4 mR = lookat4x4_id45(prevPos - pos);
    OutputBuffer_id22[index].Matrix = mul(mR, mT);
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id93(streams);
}
