/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeEffectShader
@P   - ComputeEffectShader.ThreadNumbers: X:16 Y:16 Z:1
@P ComputeEffectShader.ComputeShaderName: Histogram
***************************
******  Resources    ******
***************************
@R    ColorInput_id11 => Histogram.ColorInput [Stage: Compute, Slot: (0-0)]
@R    Exposure_id13 => Histogram.Exposure [Stage: Compute, Slot: (1-1)]
@R    HistogramBuffer_id12 => Histogram.HistogramBuffer [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    Histogram => 85e15bf727f0cb54f429385a45336686
@S    PostEffectCommon => af38cf1814fc29be0c21f6c2a879be01
***************************
*****     Stages      *****
***************************
@G    Compute => 22ffbcd58345615bb03d863e3f65b840
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for Exposure_id13
// {
//
//   float $Element;                    // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ColorInput_id11                   texture  float4          2d             t0      1 
// Exposure_id13                     texture  struct         r/o             t1      1 
// HistogramBuffer_id12                  UAV    byte         r/w             u0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_structured t1, 4
dcl_uav_raw u0
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadID.xy
dcl_temps 2
dcl_tgsm_structured g0, 4, 256
dcl_thread_group 16, 16, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadIDInGroupFlattened.x <- __input__.GroupIndex_id3; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 46 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeEffectShader_76a676ff734115aa38d6564da300c696.hlsl"
store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), l(0)

#line 47
sync_g_t

#line 49
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.xy, l(0), t0.xyzw  // r0.x <- dimensions.x; r0.y <- dimensions.y

#line 50
ult r0.xy, vThreadID.xyxx, r0.xyxx
and r0.x, r0.y, r0.x
if_nz r0.x

#line 44
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, l(4), l(0), t1.xxxx  // r0.x <- MinLog

#line 45
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.y, l(7), l(0), t1.xxxx  // r0.y <- RcpLogRange

#line 52
  mov r1.xy, vThreadID.xyxx
  mov r1.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t0.xyzw  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 32
  dp3 r0.z, r1.xyzx, l(0.212700, 0.715200, 0.072100, 0.000000)  // r0.z <- <CalculateLuminance_id2 return value>

#line 39
  ge r0.w, r0.z, l(0.005000)
  log r0.z, r0.z
  add r0.x, -r0.x, r0.z
  mul_sat r0.x, r0.y, r0.x  // r0.x <- logLuminance

#line 40
  mad r0.x, r0.x, l(254.000000), l(1.000000)
  ftou r0.x, r0.x  // r0.x <- <ColorToBin_id5 return value>
  and r0.x, r0.x, r0.w

#line 54
  mov r0.y, l(0)
  atomic_iadd g0, r0.xyxx, l(1)

#line 55
endif 

#line 56
sync_g_t

#line 58
ishl r0.x, vThreadIDInGroupFlattened.x, l(2)
ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
atomic_iadd u0, r0.x, r0.y

#line 74
ret 
// Approximately 27 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint GroupIndex_id3;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint GroupIndex_id3 : SV_GroupIndex;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    groupshared uint HistogramShared_id14[256];
};
Texture2D<float4> ColorInput_id11;
RWByteAddressBuffer HistogramBuffer_id12;
StructuredBuffer<float> Exposure_id13;
float CalculateLuminance_id2(float3 c)
{
    return dot(c, float3(0.2127f, 0.7152f, 0.0721f));
}
uint ColorToBin_id5(float3 color, float minLogLuminance, float inverseLogLuminanceRange)
{
    float luminance = CalculateLuminance_id2(color);
    if (luminance < 0.005)
        return 0;
    float logLuminance = saturate((log2(luminance) - minLogLuminance) * inverseLogLuminanceRange);
    return uint(logLuminance * 254.0 + 1.0);
}
void Compute_id6(inout CS_STREAMS streams)
{
    float MinLog = Exposure_id13[4];
    float RcpLogRange = Exposure_id13[7];
    HistogramShared_id14[streams.GroupIndex_id3 + 0] = 0;
    GroupMemoryBarrierWithGroupSync();
    uint2 dimensions;
    ColorInput_id11.GetDimensions(dimensions.x, dimensions.y);
    if (streams.DispatchThreadId_id1.x < dimensions.x && streams.DispatchThreadId_id1.y < dimensions.y)
    {
        float3 color = ColorInput_id11.Load(int3(streams.DispatchThreadId_id1.xy, 0)).xyz;
        uint binIndex = ColorToBin_id5(color, MinLog, RcpLogRange);
        InterlockedAdd(HistogramShared_id14[binIndex], 1);
    }
    GroupMemoryBarrierWithGroupSync();
    uint org;
    HistogramBuffer_id12.InterlockedAdd(streams.GroupIndex_id3 * 4, HistogramShared_id14[streams.GroupIndex_id3], org);
}
[numthreads(16, 16, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.GroupIndex_id3 = __input__.GroupIndex_id3;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 16;
    streams.ThreadCountY_id8 = 16;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 16 * 16 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id6(streams);
}
