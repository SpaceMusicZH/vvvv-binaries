/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin XeGTAO_PrefilterDepth_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:8 Y:8 Z:1
***************************
******  Resources    ******
***************************
@R    PointClampSampler_id12 => XeGTAO_Common.PointClampSampler [Stage: Compute, Slot: (0-0)]
@R    GTAOConsts_id11 => XeGTAO_Common.GTAOConsts [Stage: Compute, Slot: (0-0)]
@R    SrcRawDepth_id14 => XeGTAO_PrefilterDepth_ComputeFX.SrcRawDepth [Stage: Compute, Slot: (1-1)]
@R    OutWorkingDepthMIP0_id15 => XeGTAO_PrefilterDepth_ComputeFX.OutWorkingDepthMIP0 [Stage: Compute, Slot: (0-0)]
@R    OutWorkingDepthMIP1_id16 => XeGTAO_PrefilterDepth_ComputeFX.OutWorkingDepthMIP1 [Stage: Compute, Slot: (1-1)]
@R    OutWorkingDepthMIP2_id17 => XeGTAO_PrefilterDepth_ComputeFX.OutWorkingDepthMIP2 [Stage: Compute, Slot: (2-2)]
@R    OutWorkingDepthMIP3_id18 => XeGTAO_PrefilterDepth_ComputeFX.OutWorkingDepthMIP3 [Stage: Compute, Slot: (3-3)]
@R    OutWorkingDepthMIP4_id19 => XeGTAO_PrefilterDepth_ComputeFX.OutWorkingDepthMIP4 [Stage: Compute, Slot: (4-4)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    XeGTAO_PrefilterDepth_ComputeFX => fa754fe7cf99fc6b1426275dec437bf7
@S    XeGTAO_Common => 5520834cac689aa7bb9df583ac43c08d
***************************
*****     Stages      *****
***************************
@G    Compute => 8addebf76970ec0d4188e0b5d16430f9
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// Resource bind info for GTAOConsts_id11
// {
//
//   struct GTAOConstants
//   {
//       
//       int2 ViewportSize;             // Offset:    0
//       float2 ViewportPixelSize;      // Offset:    8
//       float2 DepthUnpackConsts;      // Offset:   16
//       float2 CameraTanHalfFOV;       // Offset:   24
//       float2 NDCToViewMul;           // Offset:   32
//       float2 NDCToViewAdd;           // Offset:   40
//       float2 NDCToViewMul_x_PixelSize;// Offset:   48
//       float EffectRadius;            // Offset:   56
//       float EffectFalloffRange;      // Offset:   60
//       float RadiusMultiplier;        // Offset:   64
//       float Padding0;                // Offset:   68
//       float FinalValuePower;         // Offset:   72
//       float DenoiseBlurBeta;         // Offset:   76
//       float SampleDistributionPower; // Offset:   80
//       float ThinOccluderCompensation;// Offset:   84
//       float DepthMIPSamplingOffset;  // Offset:   88
//       int NoiseIndex;                // Offset:   92
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PointClampSampler_id12            sampler      NA          NA             s0      1 
// GTAOConsts_id11                   texture  struct         r/o             t0      1 
// SrcRawDepth_id14                  texture   float          2d             t1      1 
// OutWorkingDepthMIP0_id15              UAV   float          2d             u0      1 
// OutWorkingDepthMIP1_id16              UAV   float          2d             u1      1 
// OutWorkingDepthMIP2_id17              UAV   float          2d             u2      1 
// OutWorkingDepthMIP3_id18              UAV   float          2d             u3      1 
// OutWorkingDepthMIP4_id19              UAV   float          2d             u4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_sampler s0, mode_default
dcl_resource_structured t0, 96
dcl_resource_texture2d (float,float,float,float) t1
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_typed_texture2d (float,float,float,float) u1
dcl_uav_typed_texture2d (float,float,float,float) u2
dcl_uav_typed_texture2d (float,float,float,float) u3
dcl_uav_typed_texture2d (float,float,float,float) u4
dcl_input vThreadIDInGroup.xy
dcl_input vThreadID.xy
dcl_temps 4
dcl_tgsm_structured g0, 32, 8
dcl_thread_group 8, 8, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z; 
//   vThreadIDInGroup.x <- __input__.GroupThreadId_id2.x; vThreadIDInGroup.y <- __input__.GroupThreadId_id2.y; vThreadIDInGroup.z <- __input__.GroupThreadId_id2.z
//
#line 90 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_a8f8ba55ae400b22e4c9ee334123aa1c.hlsl"
ishl r0.xyzw, vThreadID.xyyy, l(1, 1, 1, 1)  // r0.x <- pixCoord.x; r0.w <- pixCoord.y

#line 91
utof r1.xy, r0.xwxx

#line 84
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r2.xyzw, l(0), l(8), t0.xyzw  // r2.z <- depthLinearizeMul; r2.w <- depthLinearizeAdd

#line 91
mul r1.xy, r1.xyxx, r2.xyxx
gather4_aoffimmi_indexable(1,1,0)(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t1.xyzw, s0.x  // r1.x <- depths4.x; r1.y <- depths4.y; r1.z <- depths4.z; r1.w <- depths4.w

#line 85
add r1.w, -r1.w, r2.w
div r1.w, r2.z, r1.w  // r1.w <- <XeGTAO_ScreenSpaceToViewSpaceDepth_id7 return value>

#line 79
max r1.w, r1.w, l(0.000000)

#line 84
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r2.xy, l(0), l(16), t0.xyxx  // r2.x <- depthLinearizeMul; r2.y <- depthLinearizeAdd

#line 85
add r1.xyz, -r1.zxyz, r2.yyyy
div r1.xyz, r2.xxxx, r1.xyzx  // r1.z <- <XeGTAO_ScreenSpaceToViewSpaceDepth_id7 return value>

#line 79
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r1.xyzw, r1.xyzw, l(65504.000000, 65504.000000, 65504.000000, 65504.000000)  // r1.w <- <XeGTAO_ClampDepth_id19 return value>

#line 96
store_uav_typed u0.xyzw, r0.xyzw, r1.wwww

#line 98
imad r2.xyzw, vThreadID.xyxy, l(2, 2, 2, 2), l(1, 0, 0, 1)

#line 97
store_uav_typed u0.xyzw, r2.xyyy, r1.xxxx

#line 98
store_uav_typed u0.xyzw, r2.zwww, r1.yyyy

#line 99
imad r2.xyzw, vThreadID.xyyy, l(2, 2, 2, 2), l(1, 1, 1, 1)
store_uav_typed u0.xyzw, r2.xyzw, r1.zzzz

#line 63
max r0.xy, r1.xzxx, r1.wyww
max r0.x, r0.y, r0.x  // r0.x <- maxDepth

#line 65
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.yzw, l(0), l(56), t0.xxyz
mul r0.y, r0.y, r0.w
mul r0.y, r0.y, l(0.750000)  // r0.y <- effectRadius

#line 66
mul r0.z, r0.y, r0.z  // r0.z <- falloffRange

#line 67
ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r0.w, l(0), l(60), t0.xxxx
add r0.w, -r0.w, l(1.000000)
mul r0.y, r0.w, r0.y  // r0.y <- falloffFrom

#line 68
div r0.w, l(-1.000000), r0.z  // r0.w <- falloffMul

#line 69
div r0.y, r0.y, r0.z
add r0.y, r0.y, l(1.000000)  // r0.y <- falloffAdd

#line 70
add r0.z, -r1.w, r0.x
mad_sat r0.z, r0.z, r0.w, r0.y  // r0.z <- weight0

#line 73
add r2.xyz, -r1.xyzx, r0.xxxx
mad_sat r2.xyz, r2.xyzx, r0.wwww, r0.yyyy  // r2.x <- weight1; r2.y <- weight2; r2.z <- weight3

#line 74
add r0.x, r0.z, r2.x
add r0.x, r2.y, r0.x
add r0.x, r2.z, r0.x  // r0.x <- weightSum

#line 75
mul r1.x, r1.x, r2.x
mad r0.z, r0.z, r1.w, r1.x
mad r0.z, r2.y, r1.y, r0.z
mad r0.z, r2.z, r1.z, r0.z
div r0.x, r0.z, r0.x  // r0.x <- <XeGTAO_DepthMIPFilter_id18 return value>

#line 101
store_uav_typed u1.xyzw, vThreadID.xyyy, r0.xxxx

#line 102
ishl r0.z, vThreadIDInGroup.y, l(2)
store_structured g0.x, vThreadIDInGroup.x, r0.z, r0.x

#line 103
sync_g_t

#line 117
and r1.xyzw, vThreadIDInGroup.xyxy, l(1, 1, 3, 3)
ieq r1.xyzw, r1.xyzw, l(0, 0, 0, 0)
and r1.xy, r1.ywyy, r1.xzxx

#line 105
if_nz r1.x

#line 107
  ld_structured r0.x, vThreadIDInGroup.x, r0.z, g0.xxxx  // r0.x <- inTL

#line 108
  iadd r1.x, vThreadIDInGroup.x, l(1)
  ld_structured r1.z, r1.x, r0.z, g0.xxxx  // r1.z <- inTR

#line 109
  iadd r1.w, r0.z, l(4)
  ld_structured r2.x, vThreadIDInGroup.x, r1.w, g0.xxxx  // r2.x <- inBL

#line 110
  ld_structured r1.x, r1.x, r1.w, g0.xxxx  // r1.x <- inBR

#line 63
  max r1.w, r0.x, r1.z
  max r2.y, r1.x, r2.x
  max r1.w, r1.w, r2.y  // r1.w <- maxDepth

#line 70
  add r2.y, -r0.x, r1.w
  mad_sat r2.y, r2.y, r0.w, r0.y  // r2.y <- weight0

#line 71
  add r2.z, -r1.z, r1.w
  mad_sat r2.z, r2.z, r0.w, r0.y  // r2.z <- weight1

#line 72
  add r2.w, -r2.x, r1.w
  mad_sat r2.w, r2.w, r0.w, r0.y  // r2.w <- weight2

#line 73
  add r1.w, -r1.x, r1.w
  mad_sat r1.w, r1.w, r0.w, r0.y  // r1.w <- weight3

#line 74
  add r3.x, r2.z, r2.y
  add r3.x, r2.w, r3.x
  add r3.x, r1.w, r3.x  // r3.x <- weightSum

#line 75
  mul r1.z, r1.z, r2.z
  mad r0.x, r2.y, r0.x, r1.z
  mad r0.x, r2.w, r2.x, r0.x
  mad r0.x, r1.w, r1.x, r0.x
  div r0.x, r0.x, r3.x  // r0.x <- <XeGTAO_DepthMIPFilter_id18 return value>

#line 112
  ushr r2.xyzw, vThreadID.xyyy, l(1, 1, 1, 1)
  store_uav_typed u2.xyzw, r2.xyzw, r0.xxxx

#line 113
  store_structured g0.x, vThreadIDInGroup.x, r0.z, r0.x

#line 114
endif 

#line 115
sync_g_t

#line 117
if_nz r1.y

#line 119
  ld_structured r0.x, vThreadIDInGroup.x, r0.z, g0.xxxx  // r0.x <- inTL

#line 120
  iadd r1.x, vThreadIDInGroup.x, l(2)
  ld_structured r1.y, r1.x, r0.z, g0.xxxx  // r1.y <- inTR

#line 121
  iadd r1.z, r0.z, l(8)
  ld_structured r1.w, vThreadIDInGroup.x, r1.z, g0.xxxx  // r1.w <- inBL

#line 122
  ld_structured r1.x, r1.x, r1.z, g0.xxxx  // r1.x <- inBR

#line 63
  max r1.z, r0.x, r1.y
  max r2.x, r1.x, r1.w
  max r1.z, r1.z, r2.x  // r1.z <- maxDepth

#line 70
  add r2.x, -r0.x, r1.z
  mad_sat r2.x, r2.x, r0.w, r0.y  // r2.x <- weight0

#line 72
  add r2.yz, -r1.yywy, r1.zzzz

#line 71
  mad_sat r2.y, r2.y, r0.w, r0.y  // r2.y <- weight1

#line 72
  mad_sat r2.z, r2.z, r0.w, r0.y  // r2.z <- weight2

#line 73
  add r1.z, -r1.x, r1.z
  mad_sat r1.z, r1.z, r0.w, r0.y  // r1.z <- weight3

#line 74
  add r2.w, r2.y, r2.x
  add r2.w, r2.z, r2.w
  add r2.w, r1.z, r2.w  // r2.w <- weightSum

#line 75
  mul r1.y, r1.y, r2.y
  mad r0.x, r2.x, r0.x, r1.y
  mad r0.x, r2.z, r1.w, r0.x
  mad r0.x, r1.z, r1.x, r0.x
  div r0.x, r0.x, r2.w  // r0.x <- <XeGTAO_DepthMIPFilter_id18 return value>

#line 124
  ushr r1.xyzw, vThreadID.xyyy, l(2, 2, 2, 2)
  store_uav_typed u3.xyzw, r1.xyzw, r0.xxxx

#line 125
  store_structured g0.x, vThreadIDInGroup.x, r0.z, r0.x

#line 126
endif 

#line 127
sync_g_t

#line 129
ieq r1.xy, vThreadIDInGroup.xyxx, l(0, 0, 0, 0)
and r0.x, r1.y, r1.x
if_nz r0.x

#line 131
  ld_structured r0.x, vThreadIDInGroup.x, r0.z, g0.xxxx  // r0.x <- inTL

#line 132
  ld_structured r1.x, l(4), r0.z, g0.xxxx  // r1.x <- inTR

#line 133
  iadd r0.z, r0.z, l(16)
  ld_structured r1.y, vThreadIDInGroup.x, r0.z, g0.xxxx  // r1.y <- inBL

#line 134
  ld_structured r0.z, l(4), r0.z, g0.xxxx  // r0.z <- inBR

#line 63
  max r1.z, r0.x, r1.x
  max r1.w, r0.z, r1.y
  max r1.z, r1.w, r1.z  // r1.z <- maxDepth

#line 70
  add r1.w, -r0.x, r1.z
  mad_sat r1.w, r1.w, r0.w, r0.y  // r1.w <- weight0

#line 72
  add r2.xy, -r1.xyxx, r1.zzzz

#line 71
  mad_sat r2.x, r2.x, r0.w, r0.y  // r2.x <- weight1

#line 72
  mad_sat r2.y, r2.y, r0.w, r0.y  // r2.y <- weight2

#line 73
  add r1.z, -r0.z, r1.z
  mad_sat r0.y, r1.z, r0.w, r0.y  // r0.y <- weight3

#line 74
  add r0.w, r1.w, r2.x
  add r0.w, r2.y, r0.w
  add r0.w, r0.y, r0.w  // r0.w <- weightSum

#line 75
  mul r1.x, r1.x, r2.x
  mad r0.x, r1.w, r0.x, r1.x
  mad r0.x, r2.y, r1.y, r0.x
  mad r0.x, r0.y, r0.z, r0.x
  div r0.x, r0.x, r0.w  // r0.x <- <XeGTAO_DepthMIPFilter_id18 return value>

#line 136
  ushr r1.xyzw, vThreadID.xyyy, l(3, 3, 3, 3)
  store_uav_typed u4.xyzw, r1.xyzw, r0.xxxx

#line 137
endif 

#line 157
ret 
// Approximately 141 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    uint3 GroupThreadId_id2;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
    uint3 GroupThreadId_id2 : SV_GroupThreadID;
};
typedef float AOTermType;
struct GTAOConstants 
{
    int2 ViewportSize;
    float2 ViewportPixelSize;
    float2 DepthUnpackConsts;
    float2 CameraTanHalfFOV;
    float2 NDCToViewMul;
    float2 NDCToViewAdd;
    float2 NDCToViewMul_x_PixelSize;
    float EffectRadius;
    float EffectFalloffRange;
    float RadiusMultiplier;
    float Padding0;
    float FinalValuePower;
    float DenoiseBlurBeta;
    float SampleDistributionPower;
    float ThinOccluderCompensation;
    float DepthMIPSamplingOffset;
    int NoiseIndex;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    groupshared float g_scratchDepths_id13[8][8];
};
SamplerState PointClampSampler_id12 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = clamp;
    AddressV = clamp;
};
StructuredBuffer<GTAOConstants> GTAOConsts_id11;
Texture2D<float> SrcRawDepth_id14;
RWTexture2D<float> OutWorkingDepthMIP0_id15;
RWTexture2D<float> OutWorkingDepthMIP1_id16;
RWTexture2D<float> OutWorkingDepthMIP2_id17;
RWTexture2D<float> OutWorkingDepthMIP3_id18;
RWTexture2D<float> OutWorkingDepthMIP4_id19;
float XeGTAO_DepthMIPFilter_id18(float depth0, float depth1, float depth2, float depth3, const GTAOConstants consts)
{
    float maxDepth = max(max(depth0, depth1), max(depth2, depth3));
    const float depthRangeScaleFactor = 0.75;
    const float effectRadius = depthRangeScaleFactor * (float)consts.EffectRadius * (float)consts.RadiusMultiplier;
    const float falloffRange = (float)consts.EffectFalloffRange * effectRadius;
    const float falloffFrom = effectRadius * ((float)1 - (float)consts.EffectFalloffRange);
    const float falloffMul = (float)-1.0 / (falloffRange);
    const float falloffAdd = falloffFrom / (falloffRange) + (float)1.0;
    float weight0 = saturate((maxDepth - depth0) * falloffMul + falloffAdd);
    float weight1 = saturate((maxDepth - depth1) * falloffMul + falloffAdd);
    float weight2 = saturate((maxDepth - depth2) * falloffMul + falloffAdd);
    float weight3 = saturate((maxDepth - depth3) * falloffMul + falloffAdd);
    float weightSum = weight0 + weight1 + weight2 + weight3;
    return (weight0 * depth0 + weight1 * depth1 + weight2 * depth2 + weight3 * depth3) / weightSum;
}
float XeGTAO_ClampDepth_id19(float depth)
{
    return (float)clamp(depth, 0.0, 65504.0);
}
float XeGTAO_ScreenSpaceToViewSpaceDepth_id7(const float screenDepth, const GTAOConstants consts)
{
    float depthLinearizeMul = consts.DepthUnpackConsts.x;
    float depthLinearizeAdd = consts.DepthUnpackConsts.y;
    return depthLinearizeMul / (depthLinearizeAdd - screenDepth);
}
void XeGTAO_PrefilterDepths16x16_id20(uint2 dispatchThreadID, uint2 groupThreadID, const GTAOConstants consts, Texture2D<float> sourceNDCDepth, SamplerState depthSampler, RWTexture2D<float> outDepth0, RWTexture2D<float> outDepth1, RWTexture2D<float> outDepth2, RWTexture2D<float> outDepth3, RWTexture2D<float> outDepth4)
{
    const uint2 baseCoord = dispatchThreadID;
    const uint2 pixCoord = baseCoord * 2;
    float4 depths4 = sourceNDCDepth.GatherRed(depthSampler, float2(pixCoord * consts.ViewportPixelSize), int2(1, 1));
    float depth0 = XeGTAO_ClampDepth_id19(XeGTAO_ScreenSpaceToViewSpaceDepth_id7(depths4.w, consts));
    float depth1 = XeGTAO_ClampDepth_id19(XeGTAO_ScreenSpaceToViewSpaceDepth_id7(depths4.z, consts));
    float depth2 = XeGTAO_ClampDepth_id19(XeGTAO_ScreenSpaceToViewSpaceDepth_id7(depths4.x, consts));
    float depth3 = XeGTAO_ClampDepth_id19(XeGTAO_ScreenSpaceToViewSpaceDepth_id7(depths4.y, consts));
    outDepth0[pixCoord + uint2(0, 0)] = (float)depth0;
    outDepth0[pixCoord + uint2(1, 0)] = (float)depth1;
    outDepth0[pixCoord + uint2(0, 1)] = (float)depth2;
    outDepth0[pixCoord + uint2(1, 1)] = (float)depth3;
    float dm1 = XeGTAO_DepthMIPFilter_id18(depth0, depth1, depth2, depth3, consts);
    outDepth1[baseCoord] = (float)dm1;
    g_scratchDepths_id13[groupThreadID.x][groupThreadID.y] = dm1;
    GroupMemoryBarrierWithGroupSync();
    [branch]
    if (all((groupThreadID.xy % (2).xx) == 0))
    {
        float inTL = g_scratchDepths_id13[groupThreadID.x + 0][groupThreadID.y + 0];
        float inTR = g_scratchDepths_id13[groupThreadID.x + 1][groupThreadID.y + 0];
        float inBL = g_scratchDepths_id13[groupThreadID.x + 0][groupThreadID.y + 1];
        float inBR = g_scratchDepths_id13[groupThreadID.x + 1][groupThreadID.y + 1];
        float dm2 = XeGTAO_DepthMIPFilter_id18(inTL, inTR, inBL, inBR, consts);
        outDepth2[baseCoord / 2] = (float)dm2;
        g_scratchDepths_id13[groupThreadID.x][groupThreadID.y] = dm2;
    }
    GroupMemoryBarrierWithGroupSync();
    [branch]
    if (all((groupThreadID.xy % (4).xx) == 0))
    {
        float inTL = g_scratchDepths_id13[groupThreadID.x + 0][groupThreadID.y + 0];
        float inTR = g_scratchDepths_id13[groupThreadID.x + 2][groupThreadID.y + 0];
        float inBL = g_scratchDepths_id13[groupThreadID.x + 0][groupThreadID.y + 2];
        float inBR = g_scratchDepths_id13[groupThreadID.x + 2][groupThreadID.y + 2];
        float dm3 = XeGTAO_DepthMIPFilter_id18(inTL, inTR, inBL, inBR, consts);
        outDepth3[baseCoord / 4] = (float)dm3;
        g_scratchDepths_id13[groupThreadID.x][groupThreadID.y] = dm3;
    }
    GroupMemoryBarrierWithGroupSync();
    [branch]
    if (all((groupThreadID.xy % (8).xx) == 0))
    {
        float inTL = g_scratchDepths_id13[groupThreadID.x + 0][groupThreadID.y + 0];
        float inTR = g_scratchDepths_id13[groupThreadID.x + 4][groupThreadID.y + 0];
        float inBL = g_scratchDepths_id13[groupThreadID.x + 0][groupThreadID.y + 4];
        float inBR = g_scratchDepths_id13[groupThreadID.x + 4][groupThreadID.y + 4];
        float dm4 = XeGTAO_DepthMIPFilter_id18(inTL, inTR, inBL, inBR, consts);
        outDepth4[baseCoord / 8] = (float)dm4;
    }
}
void Compute_id27(inout CS_STREAMS streams)
{
    XeGTAO_PrefilterDepths16x16_id20(streams.DispatchThreadId_id1.xy, streams.GroupThreadId_id2.xy, GTAOConsts_id11[0], SrcRawDepth_id14, PointClampSampler_id12, OutWorkingDepthMIP0_id15, OutWorkingDepthMIP1_id16, OutWorkingDepthMIP2_id17, OutWorkingDepthMIP3_id18, OutWorkingDepthMIP4_id19);
}
[numthreads(8, 8, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.GroupThreadId_id2 = __input__.GroupThreadId_id2;
    streams.ThreadCountX_id7 = 8;
    streams.ThreadCountY_id8 = 8;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 8 * 8 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id27(streams);
}
