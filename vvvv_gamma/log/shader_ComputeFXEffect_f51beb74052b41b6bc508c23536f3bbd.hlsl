/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin Fluid3DConfinement_Internal_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 32]
@C    FluidDimensions_id11 => Fluid3DGlobals.FluidDimensions
@C    Timestep_id12 => Fluid3DGlobals.Timestep
@C    Epsilon_id16 => Fluid3DConfinement_Internal_ComputeFX.Epsilon
***************************
******  Resources    ******
***************************
@R    Texture_Vorticity_id13 => Fluid3DConfinement_Internal_ComputeFX.Texture_Vorticity [Stage: Compute, Slot: (0-0)]
@R    Texture_Velocity_id14 => Fluid3DConfinement_Internal_ComputeFX.Texture_Velocity [Stage: Compute, Slot: (1-1)]
@R    Texture_Velocity_RW_id15 => Fluid3DConfinement_Internal_ComputeFX.Texture_Velocity_RW [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    Fluid3DConfinement_Internal_ComputeFX => 41fc4f2aca6c116bbb28f7905073a6e9
@S    Fluid3DGlobals => fbecbddf8a1fd6a33748892251f2ebdf
***************************
*****     Stages      *****
***************************
@G    Compute => 5a47538628180a48f6d7485cf1a69dca
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float3 FluidDimensions_id11;       // Offset:    0 Size:    12
//   float Timestep_id12;               // Offset:   12 Size:     4
//   float Epsilon_id16;                // Offset:   16 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Texture_Vorticity_id13            texture  float3          3d             t0      1 
// Texture_Velocity_id14             texture  float3          3d             t1      1 
// Texture_Velocity_RW_id15              UAV  float3          3d             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadID.xyz
dcl_temps 6
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 33 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_f51beb74052b41b6bc508c23536f3bbd.hlsl"
ftou r0.xyz, cb0[0].xyzx  // r0.x <- dim.x; r0.y <- dim.y; r0.z <- dim.z

#line 39
iadd r0.xyz, r0.xyzx, l(-1, -1, -1, 0)
iadd r1.xz, vThreadID.zzzz, l(1, 0, -1, 0)  // r1.z <- DOWNCELL.z
umin r2.z, r0.z, r1.x  // r2.z <- UPCELL.z

#line 40
mov r3.xyz, vThreadID.xyzx
mov r3.w, l(0)

#line 45
mov r1.xyw, r3.xyxw

#line 46
mov r2.xyw, r1.xyxw

#line 45
ld_indexable(texture3d)(float,float,float,float) r1.xyz, r1.xyzw, t0.xyzw
dp3 r0.z, r1.xyzx, r1.xyzx

#line 46
ld_indexable(texture3d)(float,float,float,float) r1.xyz, r2.xyzw, t0.xyzw
dp3 r0.w, r1.xyzx, r1.xyzx

#line 45
sqrt r0.zw, r0.zzzw  // r0.z <- omegaD; r0.w <- omegaU

#line 47
add r1.yz, -r0.zzzz, r0.wwww

#line 37
iadd r2.xyzw, vThreadID.xyxy, l(-1, -1, 1, 1)  // r2.x <- LEFTCELL.x; r2.y <- BOTTOMCELL.y
umin r0.xy, r0.xyxx, r2.zwzz  // r0.x <- RIGHTCELL.x; r0.y <- TOPCELL.y

#line 42
mov r4.x, r0.x

#line 41
mov r4.yzw, r3.yyzw

#line 42
ld_indexable(texture3d)(float,float,float,float) r5.xyz, r4.xyzw, t0.xyzw
dp3 r5.x, r5.xyzx, r5.xyzx
sqrt r5.x, r5.x  // r5.x <- omegaR

#line 41
mov r4.x, r2.x
ld_indexable(texture3d)(float,float,float,float) r4.xyz, r4.xyzw, t0.xyzw
dp3 r4.x, r4.xyzx, r4.xyzx
sqrt r4.x, r4.x  // r4.x <- omegaL

#line 47
add r1.w, -r4.x, r5.x

#line 43
mov r2.xzw, r3.xxzw

#line 44
mov r0.xzw, r2.xxzw

#line 43
ld_indexable(texture3d)(float,float,float,float) r2.xyz, r2.xyzw, t0.xyzw
dp3 r2.x, r2.xyzx, r2.xyzx
sqrt r2.x, r2.x  // r2.x <- omegaB

#line 44
ld_indexable(texture3d)(float,float,float,float) r0.xyz, r0.xyzw, t0.xyzw
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x  // r0.x <- omegaT

#line 47
add r1.x, -r2.x, r0.x

#line 48
mad r0.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.001000, 0.001000, 0.001000, 0.001000)
dp3 r1.x, r0.xzwx, r0.xzwx
rsq r1.x, r1.x
mul r0.xyzw, r0.xyzw, r1.xxxx  // r0.x <- eta.y; r0.z <- eta.z; r0.w <- eta.x

#line 40
ld_indexable(texture3d)(float,float,float,float) r1.xyz, r3.xyzw, t0.xyzw  // r1.x <- omega.x; r1.y <- omega.y; r1.z <- omega.z

#line 50
ld_indexable(texture3d)(float,float,float,float) r2.xyz, r3.xyzw, t1.xyzw  // r2.x <- vel.x; r2.y <- vel.y; r2.z <- vel.z

#line 49
mul r3.xy, r0.ywyy, r1.yzyy
mad r3.xyw, r0.xzxx, r1.zxzz, -r3.xyxx
mul r0.x, r0.x, r1.x
mad r3.z, r0.w, r1.y, -r0.x
mul r0.x, cb0[0].w, cb0[1].x

#line 51
mad r0.xyzw, r0.xxxx, r3.xyzw, r2.xyzx
store_uav_typed u0.xyzw, vThreadID.xyzz, r0.xyzw

#line 66
ret 
// Approximately 49 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float3 FluidDimensions_id11;
    float Timestep_id12;
    float Epsilon_id16;
};
Texture3D<float3> Texture_Vorticity_id13;
Texture3D<float3> Texture_Velocity_id14;
RWTexture3D<float3> Texture_Velocity_RW_id15;
void Compute_id2(inout CS_STREAMS streams)
{
    uint3 i = streams.DispatchThreadId_id1;
    uint3 dim = FluidDimensions_id11;
    uint3 LEFTCELL = uint3(max(i.x - 1, 0), i.y, i.z);
    uint3 RIGHTCELL = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
    uint3 BOTTOMCELL = uint3(i.x, max(i.y - 1, 0), i.z);
    uint3 TOPCELL = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
    uint3 DOWNCELL = uint3(i.x, i.y, max(i.z - 1, 0));
    uint3 UPCELL = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));
    float3 omega = Texture_Vorticity_id13[i];
    float omegaL = length(Texture_Vorticity_id13[LEFTCELL]);
    float omegaR = length(Texture_Vorticity_id13[RIGHTCELL]);
    float omegaB = length(Texture_Vorticity_id13[BOTTOMCELL]);
    float omegaT = length(Texture_Vorticity_id13[TOPCELL]);
    float omegaD = length(Texture_Vorticity_id13[DOWNCELL]);
    float omegaU = length(Texture_Vorticity_id13[UPCELL]);
    float3 eta = 0.5 * float3(omegaR - omegaL, omegaT - omegaB, omegaU - omegaD);
    eta = normalize(eta + float3(0.001, 0.001, 0.001));
    float3 force = Timestep_id12 * Epsilon_id16 * float3(eta.y * omega.z - eta.z * omega.y, eta.z * omega.x - eta.x * omega.z, eta.x * omega.y - eta.y * omega.x);
    float3 vel = Texture_Velocity_id14[i];
    Texture_Velocity_RW_id15[i] = vel + force;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2(streams);
}
