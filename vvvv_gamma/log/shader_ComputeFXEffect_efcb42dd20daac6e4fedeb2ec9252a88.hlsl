/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin Fluid3DComputePressure_Internal_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 32]
@C    FluidDimensions_id11 => Fluid3DGlobals.FluidDimensions
@C    Timestep_id12 => Fluid3DGlobals.Timestep
@C    CoordsOffset_id17 => Fluid3DComputePressure_Internal_ComputeFX.CoordsOffset
***************************
******  Resources    ******
***************************
@R    Texture_ObstaclesGradient_id13 => Fluid3DComputePressure_Internal_ComputeFX.Texture_ObstaclesGradient [Stage: Compute, Slot: (0-0)]
@R    Texture_Divergence_id14 => Fluid3DComputePressure_Internal_ComputeFX.Texture_Divergence [Stage: Compute, Slot: (1-1)]
@R    Texture_Pressure_id15 => Fluid3DComputePressure_Internal_ComputeFX.Texture_Pressure [Stage: Compute, Slot: (2-2)]
@R    Texture_Pressure_RW_id16 => Fluid3DComputePressure_Internal_ComputeFX.Texture_Pressure_RW [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    Fluid3DComputePressure_Internal_ComputeFX => bc467951b2ae8888d01a61168c61274a
@S    Fluid3DGlobals => fbecbddf8a1fd6a33748892251f2ebdf
***************************
*****     Stages      *****
***************************
@G    Compute => a371c3b0b5c0e286bcf1cb7c7c145345
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float3 FluidDimensions_id11;       // Offset:    0 Size:    12
//   float Timestep_id12;               // Offset:   12 Size:     4 [unused]
//   float3 CoordsOffset_id17;          // Offset:   16 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Texture_ObstaclesGradient_id13    texture   float          3d             t0      1 
// Texture_Divergence_id14           texture   float          3d             t1      1 
// Texture_Pressure_id15             texture   float          3d             t2      1 
// Texture_Pressure_RW_id16              UAV   float          3d             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadID.xyz
dcl_temps 9
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 37 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_efcb42dd20daac6e4fedeb2ec9252a88.hlsl"
ftou r0.xyz, cb0[0].xyzx  // r0.x <- dim.x; r0.y <- dim.y; r0.z <- dim.z

#line 44
iadd r0.xyz, r0.xyzx, l(-1, -1, -1, 0)

#line 38
utof r1.xyz, vThreadID.xyzx
add r1.xyz, r1.xyzx, cb0[1].xyzx
ftou r1.xyz, r1.xyzx  // r1.x <- i.x; r1.y <- i.y; r1.z <- i.z

#line 42
iadd r2.xyzw, r1.xyxy, l(-1, -1, 1, 1)  // r2.x <- LEFTCELL.x; r2.y <- BOTTOMCELL.y
umin r3.xy, r0.xyxx, r2.zwzz  // r3.x <- RIGHTCELL.x; r3.y <- TOPCELL.y

#line 47
mov r4.x, r3.x

#line 45
mov r1.w, l(0)

#line 46
mov r4.yzw, r1.yyzw

#line 47
ld_indexable(texture3d)(float,float,float,float) r0.w, r4.xyzw, t2.yzwx  // r0.w <- pR

#line 56
iadd r5.xyzw, vThreadID.xyxy, l(-1, -1, 1, 1)  // r5.x <- LEFTCELL.x; r5.y <- BOTTOMCELL.y
umin r6.xy, r0.xyxx, r5.zwzz  // r6.x <- RIGHTCELL.x; r6.y <- TOPCELL.y

#line 33
mov r7.x, r6.x

#line 59
mov r8.xyz, vThreadID.xyzx
mov r8.w, l(0)

#line 33
mov r7.yzw, r8.yyzw
ld_indexable(texture3d)(float,float,float,float) r0.x, r7.xyzw, t0.xyzw
lt r0.x, l(0.900000), r0.x  // r0.x <- <IsBoundaryCell_id2 return value>; r0.x <- <IsBoundaryCell_id2 return value>

#line 45
ld_indexable(texture3d)(float,float,float,float) r0.y, r1.xyzw, t2.yxzw  // r0.y <- pCenter

#line 63
movc r0.x, r0.x, r0.y, r0.w  // r0.x <- pR

#line 46
mov r4.x, r2.x
ld_indexable(texture3d)(float,float,float,float) r0.w, r4.xyzw, t2.yzwx  // r0.w <- pL

#line 33
mov r7.x, r5.x
ld_indexable(texture3d)(float,float,float,float) r4.x, r7.xyzw, t0.xyzw
lt r4.x, l(0.900000), r4.x  // r4.x <- <IsBoundaryCell_id2 return value>

#line 61
movc r0.w, r4.x, r0.y, r0.w

#line 72
add r0.x, r0.x, r0.w

#line 48
mov r2.xzw, r1.xxzw

#line 44
iadd r4.xy, r2.zzzz, l(-1, 1, 0, 0)  // r4.x <- DOWNCELL.z

#line 48
ld_indexable(texture3d)(float,float,float,float) r0.w, r2.xyzw, t2.yzwx  // r0.w <- pB

#line 49
mov r3.xzw, r2.xxzw
ld_indexable(texture3d)(float,float,float,float) r2.x, r3.xyzw, t2.xyzw  // r2.x <- pT

#line 33
mov r5.xzw, r8.xxzw
ld_indexable(texture3d)(float,float,float,float) r2.y, r5.xyzw, t0.yxzw
mov r6.xzw, r5.xxzw
ld_indexable(texture3d)(float,float,float,float) r2.z, r6.xyzw, t0.yzxw
lt r2.yz, l(0.000000, 0.900000, 0.900000, 0.000000), r2.yyzy  // r2.z <- <IsBoundaryCell_id2 return value>

#line 67
movc r2.x, r2.z, r0.y, r2.x

#line 65
movc r0.w, r2.y, r0.y, r0.w

#line 72
add r0.x, r0.w, r0.x
add r0.x, r2.x, r0.x

#line 44
umin r2.z, r0.z, r4.y  // r2.z <- UPCELL.z

#line 50
mov r1.z, r4.x
ld_indexable(texture3d)(float,float,float,float) r0.w, r1.xyzw, t2.yzwx  // r0.w <- pD

#line 51
mov r2.xyw, r1.xyxw
ld_indexable(texture3d)(float,float,float,float) r1.x, r2.xyzw, t2.xyzw  // r1.x <- pU

#line 58
iadd r2.xz, vThreadID.zzzz, l(1, 0, -1, 0)  // r2.z <- DOWNCELL.z
umin r3.z, r0.z, r2.x  // r3.z <- UPCELL.z

#line 33
mov r2.xyw, r8.xyxw

#line 59
ld_indexable(texture3d)(float,float,float,float) r0.z, r8.xyzw, t1.yzxw  // r0.z <- bC

#line 33
mov r3.xyw, r2.xyxw
ld_indexable(texture3d)(float,float,float,float) r1.y, r2.xyzw, t0.yxzw
lt r1.y, l(0.900000), r1.y  // r1.y <- <IsBoundaryCell_id2 return value>; r1.y <- <IsBoundaryCell_id2 return value>

#line 69
movc r0.w, r1.y, r0.y, r0.w

#line 33
ld_indexable(texture3d)(float,float,float,float) r1.y, r3.xyzw, t0.yxzw
lt r1.y, l(0.900000), r1.y  // r1.y <- <IsBoundaryCell_id2 return value>

#line 71
movc r0.y, r1.y, r0.y, r1.x  // r0.y <- pU

#line 72
add r0.x, r0.y, r0.x
add r0.x, r0.w, r0.x
add r0.x, -r0.z, r0.x
mul r0.x, r0.x, l(0.166667)
store_uav_typed u0.xyzw, vThreadID.xyzz, r0.xxxx

#line 87
ret 
// Approximately 64 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float3 FluidDimensions_id11;
    float Timestep_id12;
    float3 CoordsOffset_id17;
};
Texture3D<float> Texture_ObstaclesGradient_id13;
Texture3D<float> Texture_Divergence_id14;
Texture3D<float> Texture_Pressure_id15;
RWTexture3D<float> Texture_Pressure_RW_id16;
bool IsBoundaryCell_id2(uint3 cellTexCoords)
{
    return (Texture_ObstaclesGradient_id13[cellTexCoords].r > 0.9);
}
void Compute_id3(inout CS_STREAMS streams)
{
    uint3 dim = FluidDimensions_id11;
    uint3 i = streams.DispatchThreadId_id1 + CoordsOffset_id17;
    uint3 LEFTCELL = uint3(max(i.x - 1, 0), i.y, i.z);
    uint3 RIGHTCELL = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
    uint3 BOTTOMCELL = uint3(i.x, max(i.y - 1, 0), i.z);
    uint3 TOPCELL = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
    uint3 DOWNCELL = uint3(i.x, i.y, max(i.z - 1, 0));
    uint3 UPCELL = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));
    float pCenter = Texture_Pressure_id15[i];
    float pL = Texture_Pressure_id15[LEFTCELL];
    float pR = Texture_Pressure_id15[RIGHTCELL];
    float pB = Texture_Pressure_id15[BOTTOMCELL];
    float pT = Texture_Pressure_id15[TOPCELL];
    float pD = Texture_Pressure_id15[DOWNCELL];
    float pU = Texture_Pressure_id15[UPCELL];
    i = streams.DispatchThreadId_id1;
    LEFTCELL = uint3(max(i.x - 1, 0), i.y, i.z);
    RIGHTCELL = uint3(min(i.x + 1, dim.x - 1), i.y, i.z);
    BOTTOMCELL = uint3(i.x, max(i.y - 1, 0), i.z);
    TOPCELL = uint3(i.x, min(i.y + 1, dim.y - 1), i.z);
    DOWNCELL = uint3(i.x, i.y, max(i.z - 1, 0));
    UPCELL = uint3(i.x, i.y, min(i.z + 1, dim.z - 1));
    float bC = Texture_Divergence_id14[streams.DispatchThreadId_id1];
    if (IsBoundaryCell_id2(LEFTCELL))
        pL = pCenter;
    if (IsBoundaryCell_id2(RIGHTCELL))
        pR = pCenter;
    if (IsBoundaryCell_id2(BOTTOMCELL))
        pB = pCenter;
    if (IsBoundaryCell_id2(TOPCELL))
        pT = pCenter;
    if (IsBoundaryCell_id2(DOWNCELL))
        pD = pCenter;
    if (IsBoundaryCell_id2(UPCELL))
        pU = pCenter;
    Texture_Pressure_RW_id16[streams.DispatchThreadId_id1] = (pL + pR + pB + pT + pU + pD - bC) / 6.0;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id3(streams);
}
