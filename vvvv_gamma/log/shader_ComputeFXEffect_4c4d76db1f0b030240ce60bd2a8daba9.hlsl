/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMVideoRingBuffer_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:8 Y:8 Z:1
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 128]
@C    NumberOfVoxels_id11 => SMVoxelVolume.NumberOfVoxels
@C    VoxelSpacing_id12 => SMVoxelVolume.VoxelSpacing
@C    VolumeOffset_id13 => SMVoxelVolume.VolumeOffset
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Advance_id74 => SMVideoUtils.Advance
@C    Start_id75 => SMVideoRingBuffer_ComputeFX.Start
@C    BufferLength_id76 => SMVideoRingBuffer_ComputeFX.BufferLength
***************************
******  Resources    ******
***************************
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Compute, Slot: (0-0)]
@R    InputTexture_id72 => SMVideoUtils.InputTexture [Stage: Compute, Slot: (0-0)]
@R    VoxelVolume_id73 => SMVideoUtils.VoxelVolume [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SMVideoRingBuffer_ComputeFX => 26caaa5b4252dc471440119ff4c48a91
@S    SMVideoUtils => cf5e587f65b4db1a4cb47fb86c549c16
@S    SMVoxelVolume => ce5fad2dca3f817d4e1b59ada5283ab7
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
***************************
*****     Stages      *****
***************************
@G    Compute => fe724a0f17bf25086af0867599e2fe48
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int3 NumberOfVoxels_id11;          // Offset:    0 Size:    12
//   float VoxelSpacing_id12;           // Offset:   12 Size:     4 [unused]
//   float3 VolumeOffset_id13;          // Offset:   16 Size:    12 [unused]
//   float2 Texture0TexelSize_id15;     // Offset:   32 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:   40 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   48 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   56 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   64 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   72 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   80 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   88 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   96 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:  104 Size:     8 [unused]
//   int Advance_id74;                  // Offset:  112 Size:     4
//      = 0x00000001 
//   int Start_id75;                    // Offset:  116 Size:     4
//      = 0x00000000 
//   int BufferLength_id76;             // Offset:  120 Size:     4
//      = 0x00000020 
//
// }
//
// Resource bind info for VoxelVolume_id73
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id44                sampler      NA          NA             s0      1 
// InputTexture_id72                 texture  float4          2d             t0      1 
// VoxelVolume_id73                      UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_uav_structured u0, 16
dcl_input vThreadID.xyz
dcl_temps 5
dcl_thread_group 8, 8, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 138 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_4c4d76db1f0b030240ce60bd2a8daba9.hlsl"
uge r0.xyz, vThreadID.xyzx, cb0[0].xyzx
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x

#line 140
if_z r0.x

#line 131
  utof r0.xy, vThreadID.xyxx
  itof r0.zw, cb0[0].xxxy
  div r0.xy, r0.xyxx, r0.zwzz  // r0.x <- uv.x; r0.y <- uv.y

#line 133
  add r0.z, -r0.y, l(1.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xzxx, t0.xyzw, s0, l(0.000000)  // r0.x <- <GetTexel_id10 return value>.x; r0.y <- <GetTexel_id10 return value>.y; r0.z <- <GetTexel_id10 return value>.z; r0.w <- <GetTexel_id10 return value>.w

#line 145
  imax r1.x, cb0[7].z, -cb0[7].z

#line 122
  iadd r1.yzw, cb0[0].xxyz, l(0, -1, -1, -1)

#line 123
  imul null, r2.x, cb0[0].y, cb0[0].x

#line 122
  mov r3.xy, vThreadID.xyxx

#line 143
  mov r2.y, l(0)  // r2.y <- i
  loop 
    ige r2.z, r2.y, cb0[7].x
    breakc_nz r2.z

#line 145
    iadd r2.z, r2.y, cb0[7].y
    and r2.w, r2.z, l(0x80000000)
    imax r2.z, r2.z, -r2.z
    udiv null, r2.z, r2.z, r1.x
    ineg r3.w, r2.z
    movc r3.z, r2.w, r3.w, r2.z  // r3.z <- z

#line 122
    umin r4.xyz, r1.yzwy, r3.xyzx  // r4.x <- coordinate.x; r4.y <- coordinate.y; r4.z <- coordinate.z

#line 123
    imad r2.z, r4.y, cb0[0].x, r4.x
    imad r2.z, r4.z, r2.x, r2.z  // r2.z <- <CalculateVoxelVolumeIndex_id4 return value>

#line 127
    store_structured u0.xyzw, r2.z, l(0), r0.xyzw

#line 148
    iadd r2.y, r2.y, l(1)
  endloop 
endif 

#line 163
ret 
// Approximately 31 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int3 NumberOfVoxels_id11;
    float VoxelSpacing_id12;
    float3 VolumeOffset_id13;
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    int Advance_id74 = 1;
    int Start_id75 = 0;
    int BufferLength_id76 = 32;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
Texture2D InputTexture_id72;
RWStructuredBuffer<float4> VoxelVolume_id73;
uint CalculateVoxelVolumeIndex_id4(uint3 coordinate)
{
    coordinate = clamp(coordinate, 0, NumberOfVoxels_id11 - 1);
    return dot(coordinate, uint3(1, NumberOfVoxels_id11.x, NumberOfVoxels_id11.x * NumberOfVoxels_id11.y));
}
void SetVoxel_id9(uint3 coordinate, in float4 voxel)
{
    VoxelVolume_id73[CalculateVoxelVolumeIndex_id4(coordinate)] = voxel;
}
float4 GetTexel_id10(uint2 coordinate)
{
    float2 uv = float2(coordinate.x, coordinate.y) / NumberOfVoxels_id11.xy;
    uv.y = 1.0 - uv.y;
    return InputTexture_id72.SampleLevel(LinearSampler_id44, uv, 0);
}
void Compute_id11(inout CS_STREAMS streams)
{
    uint3 uvw = streams.DispatchThreadId_id1.xyz;
    if (any(uvw >= NumberOfVoxels_id11))
        return;
    uint2 uv = uvw.xy;
    float4 texel = GetTexel_id10(uv);

    for (int i = 0; i < Advance_id74; i++)
    {
        uint z = (Start_id75 + i) % BufferLength_id76;
        uvw = uint3(uv.x, uv.y, z);
        SetVoxel_id9(uvw, texel);
    }
}
[numthreads(8, 8, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 8;
    streams.ThreadCountY_id8 = 8;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 8 * 8 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id11(streams);
}
