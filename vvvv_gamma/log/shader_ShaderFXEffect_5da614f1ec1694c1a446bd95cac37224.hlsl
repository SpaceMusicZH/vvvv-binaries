/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ShaderFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMMidiBufferSelector_ShaderFX
***************************
*****     Sources     *****
***************************
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    SMMidiBufferSelector_ShaderFX => 1df156fd3c684db39ea5b160a664f54a
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    SMMidiNoteDataProvider => 0a6556aafce0f134819881a1893f9c26
@S    SMMidiNoteDataStruct => f5634bf05bf031b62eb5384e713d4be4
***************************
*****     Stages      *****
***************************
@G    Compute => 35bc4484b3c1b735edc18e5051cc752a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id14.x; vThreadGroupID.y <- __input__.GroupId_id14.y; vThreadGroupID.z <- __input__.GroupId_id14.z
//
#line 168 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ShaderFXEffect_5da614f1ec1694c1a446bd95cac37224.hlsl"
ret 
// Approximately 1 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id14;
    int ThreadCountX_id21;
    int ThreadCountY_id22;
    int ThreadCountZ_id23;
    uint ThreadCountPerGroup_id19;
    uint3 ThreadGroupCount_id18;
    uint ThreadGroupIndex_id20;
};
struct CS_INPUT 
{
    uint3 GroupId_id14 : SV_GroupID;
};
struct VS_STREAMS 
{
};
struct VS_INPUT 
{
};
struct SMMidiNoteData 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
struct SMMidiNoteDataFloat 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id24;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id26;
    float2 Texture1TexelSize_id28;
    float2 Texture2TexelSize_id30;
    float2 Texture3TexelSize_id32;
    float2 Texture4TexelSize_id34;
    float2 Texture5TexelSize_id36;
    float2 Texture6TexelSize_id38;
    float2 Texture7TexelSize_id40;
    float2 Texture8TexelSize_id42;
    float2 Texture9TexelSize_id44;
    int3 VoxelCounts_id84;
    int3 PlacementCounts_id85;
    int Channel_id86;
    float Blink_id87;
    float2 SamplerOffset_id88;
    float2 SamplerScale_id89 = float2(1, 1);
};
Texture2D Texture0_id25;
Texture2D Texture1_id27;
Texture2D Texture2_id29;
Texture2D Texture3_id31;
Texture2D Texture4_id33;
Texture2D Texture5_id35;
Texture2D Texture6_id37;
Texture2D Texture7_id39;
Texture2D Texture8_id41;
Texture2D Texture9_id43;
TextureCube TextureCube0_id45;
TextureCube TextureCube1_id46;
TextureCube TextureCube2_id47;
TextureCube TextureCube3_id48;
Texture3D Texture3D0_id49;
Texture3D Texture3D1_id50;
Texture3D Texture3D2_id51;
Texture3D Texture3D3_id52;
SamplerState Sampler_id53;
SamplerState PointSampler_id54 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id55 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id56 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id57 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id58 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id59 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id60 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id61 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id62 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id63;
SamplerState Sampler1_id64;
SamplerState Sampler2_id65;
SamplerState Sampler3_id66;
SamplerState Sampler4_id67;
SamplerState Sampler5_id68;
SamplerState Sampler6_id69;
SamplerState Sampler7_id70;
SamplerState Sampler8_id71;
SamplerState Sampler9_id72;
StructuredBuffer<SMMidiNoteData> VoxelVolume_id83;
void Compute_id1()
{
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id14 = __input__.GroupId_id14;
    streams.ThreadCountX_id21 = 1;
    streams.ThreadCountY_id22 = 1;
    streams.ThreadCountZ_id23 = 1;
    streams.ThreadCountPerGroup_id19 = 1 * 1 * 1;
    streams.ThreadGroupCount_id18 = ThreadGroupCountGlobal_id24;
    streams.ThreadGroupIndex_id20 = (streams.GroupId_id14.z * streams.ThreadGroupCount_id18.y + streams.GroupId_id14.y) * streams.ThreadGroupCount_id18.x + streams.GroupId_id14.x;
    Compute_id1();
}
void VSMain()
{
    VS_STREAMS streams = (VS_STREAMS)0;
}
