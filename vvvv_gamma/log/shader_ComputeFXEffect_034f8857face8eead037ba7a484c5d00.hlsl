/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin LineFromToMeshGpuValue_ComputeFX [{Attribute = LineAttributeProvider}]
@P Attribute: LineAttributeProvider
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDispatch [Size: 96]
@C    ThreadGroupCountGlobal_id10 => ComputeShaderBase.ThreadGroupCountGlobal
@C    Radius_id46 => LineFromToMeshGpuValue_ComputeFX.Radius
@C    Resolution_id47 => LineFromToMeshGpuValue_ComputeFX.Resolution
@C    ThicknessSpace_id48 => LineFromToMeshGpuValue_ComputeFX.ThicknessSpace
@C    MeshType_id49 => LineFromToMeshGpuValue_ComputeFX.MeshType
@C    Transform_id50 => LineFromToMeshGpuValue_ComputeFX.Transform
cbuffer PerView [Size: 384]
@C    View_id11 => Transformation.View
@C    ViewInverse_id12 => Transformation.ViewInverse
@C    Projection_id13 => Transformation.Projection
@C    ProjectionInverse_id14 => Transformation.ProjectionInverse
@C    ViewProjection_id15 => Transformation.ViewProjection
@C    ProjScreenRay_id16 => Transformation.ProjScreenRay
@C    Eye_id17 => Transformation.Eye
@C    NearClipPlane_id26 => Camera.NearClipPlane
@C    FarClipPlane_id27 => Camera.FarClipPlane
@C    ZProjection_id28 => Camera.ZProjection
@C    ViewSize_id29 => Camera.ViewSize
@C    AspectRatio_id30 => Camera.AspectRatio
***************************
******  Resources    ******
***************************
@R    FromBuffer_id43 => LineFromToMeshGpuValue_ComputeFX.FromBuffer [Stage: Compute, Slot: (0-0)]
@R    ToBuffer_id44 => LineFromToMeshGpuValue_ComputeFX.ToBuffer [Stage: Compute, Slot: (1-1)]
@R    outputBuffer_id45 => LineFromToMeshGpuValue_ComputeFX.outputBuffer [Stage: Compute, Slot: (0-0)]
@R    PerDispatch => PerDispatch [Stage: Compute, Slot: (0-0)]
@R    PerView => PerView [Stage: Compute, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    LineFromToMeshGpuValue_ComputeFX => cb4fa8376f8b77fd9339f8f6b5b9c59b
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    FuseCommonBuffer => 65b35e271cc4ebdf63ebebd0f53f481c
@S    FuseCommonTypes => 294db151085426350495bb436e7480dd
@S    LineAttributeStream => c7aed8089f4a7eedb3fda14d4c26e4b9
@S    LineCommon => 6f3c9bb0f15c5b291748baebfb4315ac
@S    FuseCoreMath => fdeacca3b2f02b9acb6430ed603f50b4
@S    Pos3Norm3Col4Tex2Tan4Vertex => fbfbdc4d1671a224b444e9e4cfddfd89
@S    LineAttributeProvider => 7de9089f18ee737e2e80c8c210ca4e0f
***************************
*****     Stages      *****
***************************
@G    Compute => bf08e443cdc7ae915cb7165e3587ff45
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDispatch
// {
//
//   int3 ThreadGroupCountGlobal_id10;  // Offset:    0 Size:    12 [unused]
//   float Radius_id46;                 // Offset:   12 Size:     4 [unused]
//      = 0x3e19999a 
//   int Resolution_id47;               // Offset:   16 Size:     4
//   int ThicknessSpace_id48;           // Offset:   20 Size:     4 [unused]
//      = 0x00000000 
//   int MeshType_id49;                 // Offset:   24 Size:     4
//      = 0x00000000 
//   float4x4 Transform_id50;           // Offset:   32 Size:    64
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id11;                // Offset:    0 Size:    64 [unused]
//   float4x4 ViewInverse_id12;         // Offset:   64 Size:    64
//   float4x4 Projection_id13;          // Offset:  128 Size:    64 [unused]
//   float4x4 ProjectionInverse_id14;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id15;      // Offset:  256 Size:    64 [unused]
//   float2 ProjScreenRay_id16;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id17;                   // Offset:  336 Size:    16 [unused]
//   float NearClipPlane_id26;          // Offset:  352 Size:     4 [unused]
//      = 0x3f800000 
//   float FarClipPlane_id27;           // Offset:  356 Size:     4 [unused]
//      = 0x42c80000 
//   float2 ZProjection_id28;           // Offset:  360 Size:     8 [unused]
//   float2 ViewSize_id29;              // Offset:  368 Size:     8 [unused]
//   float AspectRatio_id30;            // Offset:  376 Size:     4 [unused]
//
// }
//
// Resource bind info for FromBuffer_id43
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for ToBuffer_id44
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for outputBuffer_id45
// {
//
//   struct Pos3Norm3Col4Tex2Tan4Id2
//   {
//       
//       float3 Position;               // Offset:    0
//       float3 Normal;                 // Offset:   12
//       float4 Color;                  // Offset:   24
//       float2 TexCoord;               // Offset:   40
//       float4 Tangent;                // Offset:   48
//       uint LineId;                   // Offset:   64
//       uint SegmentId;                // Offset:   68
//
//   } $Element;                        // Offset:    0 Size:    72
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// FromBuffer_id43                   texture  struct         r/o             t0      1 
// ToBuffer_id44                     texture  struct         r/o             t1      1 
// outputBuffer_id45                     UAV  struct         r/w             u0      1 
// PerDispatch                       cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[7], immediateIndexed
dcl_resource_structured t0, 12
dcl_resource_structured t1, 12
dcl_uav_structured u0, 72
dcl_input vThreadID.x
dcl_temps 22
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 192 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_034f8857face8eead037ba7a484c5d00.hlsl"
bufinfo_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.x, t0.xyzw  // r0.x <- count
bufinfo_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.y, t1.yxzw  // r0.y <- count

#line 198
umin r0.x, r0.y, r0.x  // r0.x <- n

#line 201
ult r0.x, vThreadID.x, r0.x
if_nz r0.x
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.xyz, vThreadID.x, l(0), t0.xyzx
  mov r0.w, l(1.000000)
  dp4 r1.x, r0.xyzw, cb0[2].xyzw  // r1.x <- from.x
  dp4 r1.y, r0.xyzw, cb0[3].xyzw  // r1.y <- from.y
  dp4 r1.z, r0.xyzw, cb0[4].xyzw  // r1.z <- from.z

#line 202
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.xyz, vThreadID.x, l(0), t1.xyzx
  mov r0.w, l(1.000000)
  dp4 r2.x, r0.xyzw, cb0[2].xyzw  // r2.x <- to.x
  dp4 r2.y, r0.xyzw, cb0[3].xyzw  // r2.y <- to.y
  dp4 r2.z, r0.xyzw, cb0[4].xyzw  // r2.z <- to.z

#line 203
  add r0.xyz, -r1.xyzx, r2.xyzx  // r0.x <- t.x; r0.y <- t.y; r0.z <- t.z

#line 218
  if_z cb0[1].z

#line 205
    mov r3.x, cb1[4].w
    mov r3.y, cb1[5].w
    mov r3.z, cb1[6].w
    add r4.xyz, -r1.xyzx, r3.xyzx  // r4.x <- fromViewDir.x; r4.y <- fromViewDir.y; r4.z <- fromViewDir.z

#line 206
    add r3.xyz, -r2.xyzx, r3.xyzx  // r3.x <- toViewDir.x; r3.y <- toViewDir.y; r3.z <- toViewDir.z

#line 214
    dp3 r3.w, r4.xyzx, r4.xyzx
    rsq r3.w, r3.w
    mul r3.w, r3.w, r4.x  // r3.w <- fromViewDir.x

#line 215
    dp3 r4.x, r3.xyzx, r3.xyzx
    rsq r4.x, r4.x
    mul r4.yzw, r3.xxyz, r4.xxxx  // r4.y <- toViewDir.x; r4.z <- toViewDir.y; r4.w <- toViewDir.z

#line 220
    ne r3.w, l(0.000000, 0.000000, 0.000000, 0.000000), r3.w

#line 106
    mul r5.xyz, r0.zxyz, r4.zwyz
    mad r4.yzw, r0.yyzx, r4.wwyz, -r5.xxyz
    dp3 r5.x, r4.yzwy, r4.yzwy
    rsq r5.x, r5.x
    mul r4.yzw, r4.yyzw, r5.xxxx  // r4.y <- dir.x; r4.z <- dir.y; r4.w <- dir.z

#line 107
    mul r5.xyz, r0.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
    mad r5.xyz, r0.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000), -r5.xyzx
    dp2 r5.w, r5.xzxx, r5.xzxx
    rsq r5.w, r5.w
    mul r6.xyz, r5.wwww, r5.xyzx  // r6.x <- dirNext.x; r6.y <- dirNext.y; r6.z <- dirNext.z

#line 112
    movc r3.w, r3.w, l(0.500000), l(1.000000)  // r3.w <- t

#line 113
    mad r7.xyz, r3.xyzx, r4.xxxx, -r4.yzwy
    mad r7.xyz, r3.wwww, r7.xyzx, r4.yzwy
    dp3 r6.w, r7.xyzx, r7.xyzx
    rsq r6.w, r6.w
    mul r7.xyz, r6.wwww, r7.xyzx  // r7.x <- v0.Normal.x; r7.y <- v0.Normal.y; r7.z <- v0.Normal.z

#line 114
    mad r8.xyz, -r5.xyzx, r5.wwww, l(0.000000, 1.000000, 0.000000, 0.000000)
    mad r8.xyz, r3.wwww, r8.xyzx, r6.xyzx
    dp3 r6.w, r8.xyzx, r8.xyzx
    rsq r6.w, r6.w
    mul r8.xyz, r6.wwww, r8.xyzx  // r8.x <- v1.Normal.x; r8.y <- v1.Normal.y; r8.z <- v1.Normal.z

#line 115
    mad r3.xyz, r3.xyzx, r4.xxxx, r4.yzwy
    mad r3.xyz, r3.wwww, r3.xyzx, -r4.yzwy
    dp3 r4.x, r3.xyzx, r3.xyzx
    rsq r4.x, r4.x
    mul r4.xyz, r3.xyzx, r4.xxxx  // r4.x <- v2.Normal.x; r4.y <- v2.Normal.y; r4.z <- v2.Normal.z

#line 116
    mad r3.xyz, r5.xyzx, r5.wwww, l(0.000000, 1.000000, 0.000000, 0.000000)
    mad r3.xyz, r3.wwww, r3.xyzx, -r6.xyzx
    dp3 r3.w, r3.xyzx, r3.xyzx
    rsq r3.w, r3.w
    mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- v3.Normal.x; r3.y <- v3.Normal.y; r3.z <- v3.Normal.z

#line 122
    utof r5.x, vThreadID.x
    mul r5.x, r5.x, l(0.500000)  // r5.x <- v0.TexCoord.x

#line 123
    iadd r6.x, vThreadID.x, l(1)
    utof r6.x, r6.x
    mul r6.z, r6.x, l(0.500000)  // r6.z <- v1.TexCoord.x

#line 129
    imul null, r9.x, vThreadID.x, l(6)
    mov r1.w, r4.x
    store_structured u0.xyzw, r9.x, l(0), r1.xyzw
    mov r4.w, l(0)
    store_structured u0.xyzw, r9.x, l(16), r4.yzww

#line 131
    mov r5.yzw, l(0,0,0,1.000000)

#line 129
    store_structured u0.xyzw, r9.x, l(32), r5.yyxy
    mov r0.w, l(-1.000000)
    store_structured u0.xyzw, r9.x, l(48), r0.xyzw

#line 130
    mov r10.xz, vThreadID.xxxx
    mov r10.yw, l(0,0,0,1)

#line 129
    store_structured u0.xy, r9.x, l(64), r10.xyxx

#line 130
    imad r4.x, vThreadID.x, l(6), l(1)
    mov r2.w, r8.x
    store_structured u0.xyzw, r4.x, l(0), r2.xyzw
    mov r8.w, l(0)
    store_structured u0.xyzw, r4.x, l(16), r8.yzww
    mov r6.xyw, l(0,0,0,1.000000)
    store_structured u0.xyzw, r4.x, l(32), r6.yyzw
    store_structured u0.xyzw, r4.x, l(48), r0.xyzw
    store_structured u0.xy, r4.x, l(64), r10.zwzz

#line 134
    imad r11.xyzw, vThreadID.xxxx, l(6, 6, 6, 6), l(2, 3, 4, 5)

#line 131
    mov r12.xyz, r1.xyzx
    mov r12.w, r7.x
    store_structured u0.xyzw, r11.x, l(0), r12.xyzw
    mov r7.w, l(0)
    store_structured u0.xyzw, r11.x, l(16), r7.yzww
    store_structured u0.xyzw, r11.x, l(32), r5.zzxw
    store_structured u0.xyzw, r11.x, l(48), r0.xyzw
    store_structured u0.xy, r11.x, l(64), r10.xyxx

#line 132
    store_structured u0.xyzw, r11.y, l(0), r1.xyzw
    store_structured u0.xyzw, r11.y, l(16), r4.yzww
    store_structured u0.xyzw, r11.y, l(32), r5.zzxz
    store_structured u0.xyzw, r11.y, l(48), r0.xyzw
    store_structured u0.xy, r11.y, l(64), r10.xyxx

#line 133
    mov r4.xyz, r2.xyzx
    mov r4.w, r3.x
    store_structured u0.xyzw, r11.z, l(0), r4.xyzw
    mov r3.w, l(0)
    store_structured u0.xyzw, r11.z, l(16), r3.yzww
    store_structured u0.xyzw, r11.z, l(32), r6.yyzy
    store_structured u0.xyzw, r11.z, l(48), r0.xyzw
    store_structured u0.xy, r11.z, l(64), r10.zwzz

#line 134
    store_structured u0.xyzw, r11.w, l(0), r2.xyzw
    store_structured u0.xyzw, r11.w, l(16), r8.yzww
    store_structured u0.xyzw, r11.w, l(32), r6.xyzw
    store_structured u0.xyzw, r11.w, l(48), r0.xyzw
    store_structured u0.xy, r11.w, l(64), r10.zwzz

#line 221
  else 

#line 139
    mul r3.xyz, r0.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
    mad r3.xyz, r0.zxyz, l(0.000000, 1.000000, 0.000000, 0.000000), -r3.xyzx
    mul r4.xyz, r0.zxyz, r3.xyzx
    mad r3.xyz, r0.yzxy, r3.yzxy, -r4.xyzx
    dp3 r3.w, r3.xyzx, r3.xyzx
    rsq r3.w, r3.w
    mul r3.xyz, r3.wwww, r3.xyzx  // r3.x <- dir.x; r3.y <- dir.y; r3.z <- dir.z

#line 141
    dp3 r3.w, r0.xyzx, r0.xyzx
    rsq r3.w, r3.w
    mul r4.xyz, r0.zxyz, r3.wwww
    itof r3.w, cb0[1].x
    div r4.w, l(6.283185), r3.w

#line 96
    sincos r5.x, r6.x, r4.w  // r6.x <- c; r5.x <- s

#line 97
    add r4.w, -r6.x, l(1.000000)  // r4.w <- t

#line 101
    mul r7.xyzw, r4.yyyz, r4.wwww
    mul r5.xyz, r4.xyzx, r5.xxxx
    mad r8.xy, r7.zyzz, r4.xzxx, r5.zxzz  // r8.x <- <rot3D_id50 return value>._m02; r8.y <- <rot3D_id50 return value>._m10
    mad r9.xy, r7.xwxx, r4.yzyy, r6.xxxx  // r9.x <- <rot3D_id50 return value>._m00; r9.y <- <rot3D_id50 return value>._m11
    mad r8.z, r7.w, r4.x, -r5.y  // r8.z <- <rot3D_id50 return value>._m12
    mad r10.xy, r7.yzyy, r4.zxzz, -r5.xzxx  // r10.x <- <rot3D_id50 return value>._m01; r10.y <- <rot3D_id50 return value>._m20
    mad r10.z, r7.w, r4.x, r5.y  // r10.z <- <rot3D_id50 return value>._m21
    mul r4.x, r4.x, r4.x
    mad r8.w, r4.x, r4.w, r6.x  // r8.w <- <rot3D_id50 return value>._m22

#line 150
    div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w  // r3.w <- divY

#line 151
    utof r4.x, vThreadID.x
    mul r4.x, r4.x, l(0.500000)  // r4.x <- v0.TexCoord.x

#line 152
    iadd r5.x, vThreadID.x, l(1)
    utof r5.x, r5.x
    mul r4.w, r5.x, l(0.500000)  // r4.w <- v1.TexCoord.x

#line 169
    imul null, r5.x, vThreadID.x, cb0[1].x

#line 161
    mov r9.z, r8.y
    mov r9.w, r10.y
    mov r10.w, r9.y

#line 170
    mov r6.z, l(0)
    mov r4.z, l(0)
    mov r0.w, l(-1.000000)

#line 171
    mov r7.zw, l(0,0,0,0)
    mov r11.x, l(0)
    mov r12.xz, vThreadID.xxxx
    mov r12.yw, l(0,0,0,1)

#line 172
    mov r13.zw, l(0,0,0,0)
    mov r14.x, l(0)

#line 174
    mov r15.z, l(0)

#line 157
    mov r16.xyz, r1.xyzx  // r16.x <- v0.Position.x; r16.y <- v0.Position.y; r16.z <- v0.Position.z
    mov r16.w, r4.x  // r16.w <- v0.TexCoord.x
    mov r17.x, l(0)  // r17.x <- v0.TexCoord.y
    mov r17.yzw, r2.xxyz  // r17.y <- v1.Position.x; r17.z <- v1.Position.y; r17.w <- v1.Position.z
    mov r5.yzw, r3.xxyz  // r5.y <- dir.x; r5.z <- dir.y; r5.w <- dir.z
    mov r18.xyz, r3.xyzx  // r18.x <- dirNext.x; r18.y <- dirNext.y; r18.z <- dirNext.z
    mov r11.z, r4.w  // r11.z <- v1.TexCoord.x
    mov r11.w, l(0)  // r11.w <- v1.TexCoord.y
    mov r8.y, l(0)  // r8.y <- i
    loop 
      uge r9.y, r8.y, cb0[1].x
      breakc_nz r9.y

#line 161
      dp3 r1.w, r5.yzwy, r9.xzwx  // r1.w <- dir.x
      dp3 r6.x, r5.ywzy, r10.xzwx  // r6.x <- dir.y
      dp3 r6.y, r5.yzwy, r8.xzwx  // r6.y <- dir.z

#line 162
      dp3 r2.w, r18.xyzx, r9.xzwx  // r2.w <- dirNext.x
      dp3 r15.x, r18.xzyx, r10.xzwx  // r15.x <- dirNext.y
      dp3 r15.y, r18.xyzx, r8.xzwx  // r15.y <- dirNext.z

#line 167
      iadd r9.y, r8.y, l(1)
      utof r10.y, r9.y
      mul r4.y, r3.w, r10.y  // r4.y <- v2.TexCoord.y

#line 169
      imul null, r10.y, r8.y, l(6)
      imad r10.y, r5.x, l(6), r10.y  // r10.y <- offset

#line 170
      store_structured u0.xyzw, r10.y, l(0), r1.xyzw
      store_structured u0.xyzw, r10.y, l(16), r6.xyzz
      store_structured u0.xyzw, r10.y, l(32), r4.zzxy
      store_structured u0.xyzw, r10.y, l(48), r0.xyzw
      store_structured u0.xy, r10.y, l(64), r12.xyxx

#line 171
      iadd r11.y, r10.y, l(1)
      mov r19.xyz, r17.yzwy
      mov r19.w, r18.x
      store_structured u0.xyzw, r11.y, l(0), r19.xyzw
      mov r7.xy, r18.yzyy
      store_structured u0.xyzw, r11.y, l(16), r7.xyww
      store_structured u0.xyzw, r11.y, l(32), r11.xxzw
      store_structured u0.xyzw, r11.y, l(48), r0.xyzw
      store_structured u0.xy, r11.y, l(64), r12.zwzz

#line 175
      iadd r20.xyzw, r10.yyyy, l(2, 3, 4, 5)

#line 172
      mov r21.xyz, r16.xyzx
      mov r21.w, r5.y
      store_structured u0.xyzw, r20.x, l(0), r21.xyzw
      mov r13.xy, r5.zwzz
      store_structured u0.xyzw, r20.x, l(16), r13.xyzw
      mov r14.z, r16.w
      mov r14.w, r17.x
      store_structured u0.xyzw, r20.x, l(32), r14.xxzw
      store_structured u0.xyzw, r20.x, l(48), r0.xyzw
      store_structured u0.xy, r20.x, l(64), r12.xyxx

#line 173
      store_structured u0.xyzw, r20.y, l(0), r1.xyzw
      store_structured u0.xyzw, r20.y, l(16), r6.xyzz
      store_structured u0.xyzw, r20.y, l(32), r4.zzxy
      store_structured u0.xyzw, r20.y, l(48), r0.xyzw
      store_structured u0.xy, r20.y, l(64), r12.xyxx

#line 174
      store_structured u0.xyzw, r20.z, l(0), r2.xyzw
      store_structured u0.xyzw, r20.z, l(16), r15.xyzz
      store_structured u0.xyzw, r20.z, l(32), r4.zzwy
      store_structured u0.xyzw, r20.z, l(48), r0.xyzw
      store_structured u0.xy, r20.z, l(64), r12.zwzz

#line 175
      store_structured u0.xyzw, r20.w, l(0), r19.xyzw
      store_structured u0.xyzw, r20.w, l(16), r7.xyzw
      store_structured u0.xyzw, r20.w, l(32), r11.xxzw
      store_structured u0.xyzw, r20.w, l(48), r0.xyzw
      store_structured u0.xy, r20.w, l(64), r12.zwzz

#line 180
      mov r16.xyz, r1.xyzx
      mov r16.w, r4.x
      mov r17.x, r4.y
      mov r17.yzw, r2.xxyz
      mov r6.w, r1.w
      mov r5.yzw, r6.wwxy  // r5.y <- dir.x; r5.z <- dir.y; r5.w <- dir.z
      mov r15.w, r2.w
      mov r18.xyz, r15.wxyw  // r18.x <- dirNext.x; r18.y <- dirNext.y; r18.z <- dirNext.z
      mov r11.zw, r4.wwwy
      mov r8.y, r9.y
    endloop 

#line 225
  endif 
endif 

#line 240
ret 
// Approximately 234 instruction slots used
***************************
*************************/
static const float PI_id34 = 3.1415926535897;
static const float TWOPI_id37 = 6.28318531;
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct Matrix4x4 
{
    float4x4 Matrix;
};
struct Ray 
{
    float3 ro, rd, sp, sn;
};
struct LineAttribute 
{
    float w;
    float4 c;
};
struct LineInfo 
{
    int id;
    int start;
    int count;
};
struct Pos3Norm3Col4Tex2 
{
    float3 Position;
    float3 Normal;
    float4 Color;
    float2 TexCoord;
};
struct Pos3Norm3Col4Tex2Tan4Id2 
{
    float3 Position;
    float3 Normal;
    float4 Color;
    float2 TexCoord;
    float4 Tangent;
    uint LineId;
    uint SegmentId;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
    float Radius_id46 = .15;
    int Resolution_id47;
    int ThicknessSpace_id48 = 0;
    int MeshType_id49 = 0;
    float4x4 Transform_id50;
};
cbuffer PerDraw 
{
    float4x4 World_id18;
    float4x4 WorldInverse_id19;
    float4x4 WorldInverseTranspose_id20;
    float4x4 WorldView_id21;
    float4x4 WorldViewInverse_id22;
    float4x4 WorldViewProjection_id23;
    float3 WorldScale_id24;
    float4 EyeMS_id25;
};
cbuffer PerView 
{
    float4x4 View_id11;
    float4x4 ViewInverse_id12;
    float4x4 Projection_id13;
    float4x4 ProjectionInverse_id14;
    float4x4 ViewProjection_id15;
    float2 ProjScreenRay_id16;
    float4 Eye_id17;
    float NearClipPlane_id26 = 1.0f;
    float FarClipPlane_id27 = 100.0f;
    float2 ZProjection_id28;
    float2 ViewSize_id29;
    float AspectRatio_id30;
};
StructuredBuffer<float3> FromBuffer_id43;
StructuredBuffer<float3> ToBuffer_id44;
RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer_id45;
float3x3 rot3D_id50(float3 axis, float angle)
{
    float c, s;
    sincos(angle, s, c);
    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;
    return float3x3(t * x * x + c, t * x * y - s * z, t * x * z + s * y, t * x * y + s * z, t * y * y + c, t * y * z - s * x, t * x * z - s * y, t * y * z + s * x, t * z * z + c);
}
void FlatMeshLine_id51(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id, float3 pos, float3 tan, float scale, float4 color, float3 posNext, float3 tanNext, float scaleNext, float4 colorNext, float radius, int sampleCnt, bool normalBend, float3 up = float3(0, 1, 0), float3 upNext = float3(0, 1, 0))
{
    Pos3Norm3Col4Tex2Tan4Id2 v0, v1, v2, v3;
    float3 dir = normalize(cross(tan, up));
    float3 dirNext = normalize(cross(tanNext, upNext));
    v0.Position = pos + dir * radius * .5 * scale;
    v1.Position = posNext + dirNext * radius * .5 * scaleNext;
    v2.Position = pos - dir * radius * .5 * scale;
    v3.Position = posNext - dirNext * radius * .5 * scaleNext;
    float t = normalBend ? .5 : 1;
    v0.Normal = normalize(lerp(dir, up, t));
    v1.Normal = normalize(lerp(dirNext, upNext, t));
    v2.Normal = normalize(lerp(-dir, up, t));
    v3.Normal = normalize(lerp(-dirNext, upNext, t));
    v0.Color = v2.Color = color;
    v1.Color = v3.Color = colorNext;
    v0.Tangent = v2.Tangent = float4(tan, -1);
    v1.Tangent = v3.Tangent = float4(tanNext, -1);
    float div = 1.0 / sampleCnt;
    v0.TexCoord = float2(div * id, 1);
    v1.TexCoord = float2(div * (id + 1), 1);
    v2.TexCoord = float2(div * id, 0);
    v3.TexCoord = float2(div * (id + 1), 0);
    v0.LineId = v1.LineId = v2.LineId = v3.LineId = id;
    v0.SegmentId = v2.SegmentId = 0;
    v1.SegmentId = v3.SegmentId = 1;
    outputBuffer[id * 6 + 0] = v2;
    outputBuffer[id * 6 + 1] = v1;
    outputBuffer[id * 6 + 2] = v0;
    outputBuffer[id * 6 + 3] = v2;
    outputBuffer[id * 6 + 4] = v3;
    outputBuffer[id * 6 + 5] = v1;
}
void TubeMeshLine_id53(RWStructuredBuffer<Pos3Norm3Col4Tex2Tan4Id2> outputBuffer, uint id, float3 pos, float3 tan, float scale, float4 color, float3 posNext, float3 tanNext, float scaleNext, float4 colorNext, float radius, int sampleCnt, int resolution, float3 up = float3(0, 1, 0))
{
    Pos3Norm3Col4Tex2Tan4Id2 v0, v1, v2, v3;
    float3 dir = normalize(cross(tan, cross(tan, up)));
    float3 dirNext = normalize(cross(tanNext, cross(tanNext, up)));
    float3x3 r = rot3D_id50(normalize(tan), TWOPI_id37 / resolution);
    float3x3 rNext = rot3D_id50(normalize(tanNext), TWOPI_id37 / resolution);
    v0.Position = pos + dir * radius * .5 * scale;
    v1.Position = posNext + dirNext * radius * .5 * scaleNext;
    v0.Color = v2.Color = color;
    v1.Color = v3.Color = colorNext;
    v0.Tangent = v2.Tangent = float4(tan, -1);
    v1.Tangent = v3.Tangent = float4(tanNext, -1);
    float divX = 1.0 / (float)sampleCnt;
    float divY = 1.0 / resolution;
    v0.TexCoord = float2(divX * id, 0);
    v1.TexCoord = float2(divX * (id + 1), 0);
    v0.LineId = v1.LineId = v2.LineId = v3.LineId = id;
    v0.SegmentId = v2.SegmentId = 0;
    v1.SegmentId = v3.SegmentId = 1;

    for (uint i = 0; i < resolution; i++)
    {
        v0.Normal = dir;
        v1.Normal = dirNext;
        dir = mul(dir, r);
        dirNext = mul(dirNext, rNext);
        v2.Position = pos + dir * radius * .5 * scale;
        v3.Position = posNext + dirNext * radius * .5 * scaleNext;
        v2.Normal = dir;
        v3.Normal = dirNext;
        v2.TexCoord = float2(divX * id, divY * (i + 1));
        v3.TexCoord = float2(divX * (id + 1), divY * (i + 1));
        uint offset = id * 6 * resolution + 6 * i;
        outputBuffer[offset + 0] = v2;
        outputBuffer[offset + 1] = v1;
        outputBuffer[offset + 2] = v0;
        outputBuffer[offset + 3] = v2;
        outputBuffer[offset + 4] = v3;
        outputBuffer[offset + 5] = v1;
        v0.Position = v2.Position;
        v1.Position = v3.Position;
        v0.TexCoord = v2.TexCoord;
        v1.TexCoord = v3.TexCoord;
    }
}
LineAttribute Compute_id56(float3 p, float id)
{
    LineAttribute attribute;
    attribute.w = 0;
    attribute.c = 0;
    return attribute;
}
uint sbSize3_id5(StructuredBuffer<float3> sBuffer)
{
    uint count, dummy;
    sBuffer.GetDimensions(count, dummy);
    return count;
}
void Compute_id55(inout CS_STREAMS streams)
{
    uint dtid = streams.DispatchThreadId_id1.x;
    uint n = min(sbSize3_id5(FromBuffer_id43), sbSize3_id5(ToBuffer_id44));
    if (dtid >= n)
        return;
    float3 from = mul(float4(FromBuffer_id43[dtid], 1), Transform_id50).xyz;
    float3 to = mul(float4(ToBuffer_id44[dtid], 1), Transform_id50).xyz;
    float3 t = to - from;
    float3 viewFront = ViewInverse_id12[2].xyz;
    float3 fromViewDir = ViewInverse_id12[3].xyz - from;
    float3 toViewDir = ViewInverse_id12[3].xyz - to;
    LineAttribute fromAttribute = Compute_id56(from, dtid);
    LineAttribute toAttribute = Compute_id56(to, dtid);
    float d = 1 / min(ViewSize_id29.x, ViewSize_id29.y);
    float fromScale = ThicknessSpace_id48 == 1 ? dot(viewFront, fromViewDir) * d : 1;
    float toScale = ThicknessSpace_id48 == 1 ? dot(viewFront, toViewDir) * d : 1;
    fromScale *= fromAttribute.w;
    toScale *= toAttribute.w;
    fromViewDir = normalize(fromViewDir);
    toViewDir = normalize(toViewDir);
    float3 fromDir = normalize(cross(t, fromViewDir));
    float3 toDir = normalize(cross(t, toViewDir));
    if (MeshType_id49 == 0)
    {
        FlatMeshLine_id51(outputBuffer_id45, dtid, from, t, fromScale, fromAttribute.c, to, t, toScale, toAttribute.c, Radius_id46, 2, normalize(fromViewDir), normalize(toViewDir));
    }
    else
    {
        TubeMeshLine_id53(outputBuffer_id45, dtid, from, t, fromScale, fromAttribute.c, to, t, toScale, toAttribute.c, Radius_id46, 2, Resolution_id47);
    }
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id55(streams);
}
