/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SMMidiResampler_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id12 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id14 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id16 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id18 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id20 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id22 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id24 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id26 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id28 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id30 => Texturing.Texture9TexelSize
@C    SourceCount_id73 => SMMidiResampler_ComputeFX.SourceCount
@C    TargetCount_id74 => SMMidiResampler_ComputeFX.TargetCount
***************************
******  Resources    ******
***************************
@R    LinearSampler_id41 => Texturing.LinearSampler [Stage: Compute, Slot: (0-0)]
@R    InputValues1_id69 => SMMidiResampler_ComputeFX.InputValues1 [Stage: Compute, Slot: (0-0)]
@R    InputValues2_id70 => SMMidiResampler_ComputeFX.InputValues2 [Stage: Compute, Slot: (1-1)]
@R    InputValues3_id71 => SMMidiResampler_ComputeFX.InputValues3 [Stage: Compute, Slot: (2-2)]
@R    Outputvalues_id72 => SMMidiResampler_ComputeFX.Outputvalues [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SMMidiResampler_ComputeFX => d85b633d203af2a2b486366434084c95
@S    SMMidiNoteDataStruct => f5634bf05bf031b62eb5384e713d4be4
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
***************************
*****     Stages      *****
***************************
@G    Compute => 1734d3948bcf0fd21670fb1c3fb4468a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id12;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id14;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id16;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id18;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id20;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id22;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id24;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id26;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id28;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id30;     // Offset:   72 Size:     8 [unused]
//   int2 SourceCount_id73;             // Offset:   80 Size:     8
//   int2 TargetCount_id74;             // Offset:   88 Size:     8
//
// }
//
// Resource bind info for Outputvalues_id72
// {
//
//   struct SMMidiNoteData
//   {
//       
//       float Empty;                   // Offset:    0
//       float StartTime;               // Offset:    4
//       float Note;                    // Offset:    8
//       float Velocity;                // Offset:   12
//       float Length;                  // Offset:   16
//       float Channel;                 // Offset:   20
//       float Constant;                // Offset:   24
//       float Id;                      // Offset:   28
//       float TrackId;                 // Offset:   32
//       float ModWheel;                // Offset:   36
//       float PitchBend;               // Offset:   40
//       float Random;                  // Offset:   44
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id41                sampler      NA          NA             s0      1 
// InputValues1_id69                 texture  float4          2d             t0      1 
// InputValues2_id70                 texture  float4          2d             t1      1 
// InputValues3_id71                 texture  float4          2d             t2      1 
// Outputvalues_id72                     UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_uav_structured u0, 48
dcl_input vThreadID.xy
dcl_temps 5
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 162 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_d354fe4c6b1ef6ed874b5b53ef65a028.hlsl"
uge r0.xy, vThreadID.xyxx, cb0[5].zwzz
or r0.x, r0.y, r0.x

#line 164
if_z r0.x
  utof r0.xy, vThreadID.xyxx
  itof r0.zw, cb0[5].zzzw
  div r0.xy, r0.xyxx, r0.zwzz  // r0.x <- sourceUV.x; r0.y <- sourceUV.y

#line 165
  xor r0.zw, cb0[5].zzzw, cb0[5].xxxy
  imax r1.xyzw, cb0[5].xyzw, -cb0[5].xyzw
  udiv r1.xy, null, r1.xyxx, r1.zwzz
  ineg r1.zw, r1.xxxy
  and r0.zw, r0.zzzw, l(0, 0, 0x80000000, 0x80000000)
  movc r0.zw, r0.zzzw, r1.zzzw, r1.xxxy
  itof r0.zw, r0.zzzw
  log r0.zw, r0.zzzw
  max r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r0.zw, r0.zzzw, l(0.000000, 0.000000, 5.000000, 5.000000)  // r0.z <- LOD.x; r0.w <- LOD.y

#line 154
  exp r1.xy, r0.zwzz  // r1.x <- s.x; r1.y <- s.y

#line 155
  sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t0.xyzw, s0, r0.z

#line 156
  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t0.xyzw, s0, r0.w
  mul r3.xyzw, r1.yyyy, r3.xyzw  // r3.x <- v_color.x; r3.y <- v_color.y; r3.z <- v_color.z; r3.w <- v_color.w

#line 157
  mad r2.xyzw, r2.xyzw, r1.xxxx, r3.xyzw  // r2.x <- <SampleTexture_id5 return value>.x; r2.y <- <SampleTexture_id5 return value>.y; r2.z <- <SampleTexture_id5 return value>.z; r2.w <- <SampleTexture_id5 return value>.w

#line 155
  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t1.xyzw, s0, r0.z

#line 156
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyxx, t1.xyzw, s0, r0.w
  mul r4.xyzw, r1.yyyy, r4.xyzw  // r4.x <- v_color.x; r4.y <- v_color.y; r4.z <- v_color.z; r4.w <- v_color.w

#line 157
  mad r3.xyzw, r3.xyzw, r1.xxxx, r4.xyzw  // r3.x <- <SampleTexture_id5 return value>.x; r3.y <- <SampleTexture_id5 return value>.y; r3.z <- <SampleTexture_id5 return value>.z; r3.w <- <SampleTexture_id5 return value>.w

#line 155
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyxx, t2.xyzw, s0, r0.z

#line 156
  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t2.xyzw, s0, r0.w
  mul r0.xyzw, r1.yyyy, r0.xyzw  // r0.x <- v_color.x; r0.y <- v_color.y; r0.z <- v_color.z; r0.w <- v_color.w

#line 157
  mad r0.xyzw, r4.xyzw, r1.xxxx, r0.xyzw  // r0.x <- <SampleTexture_id5 return value>.x; r0.y <- <SampleTexture_id5 return value>.y; r0.z <- <SampleTexture_id5 return value>.z; r0.w <- <SampleTexture_id5 return value>.w

#line 150
  imad r1.x, vThreadID.y, cb0[5].z, vThreadID.x  // r1.x <- <CalculateTexelIndex_id4 return value>

#line 183
  store_structured u0.xyzw, r1.x, l(0), r2.xyzw
  store_structured u0.xyzw, r1.x, l(16), r3.xyzw
  store_structured u0.xyzw, r1.x, l(32), r0.xyzw
endif 

#line 198
ret 
// Approximately 35 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct SMMidiNoteData 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
struct SMMidiNoteDataFloat 
{
    float Empty;
    float StartTime;
    float Note;
    float Velocity;
    float Length;
    float Channel;
    float Constant;
    float Id;
    float TrackId;
    float ModWheel;
    float PitchBend;
    float Random;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id12;
    float2 Texture1TexelSize_id14;
    float2 Texture2TexelSize_id16;
    float2 Texture3TexelSize_id18;
    float2 Texture4TexelSize_id20;
    float2 Texture5TexelSize_id22;
    float2 Texture6TexelSize_id24;
    float2 Texture7TexelSize_id26;
    float2 Texture8TexelSize_id28;
    float2 Texture9TexelSize_id30;
    int2 SourceCount_id73;
    int2 TargetCount_id74;
};
Texture2D Texture0_id11;
Texture2D Texture1_id13;
Texture2D Texture2_id15;
Texture2D Texture3_id17;
Texture2D Texture4_id19;
Texture2D Texture5_id21;
Texture2D Texture6_id23;
Texture2D Texture7_id25;
Texture2D Texture8_id27;
Texture2D Texture9_id29;
TextureCube TextureCube0_id31;
TextureCube TextureCube1_id32;
TextureCube TextureCube2_id33;
TextureCube TextureCube3_id34;
Texture3D Texture3D0_id35;
Texture3D Texture3D1_id36;
Texture3D Texture3D2_id37;
Texture3D Texture3D3_id38;
SamplerState Sampler_id39;
SamplerState PointSampler_id40 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id41 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id42 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id43 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id44 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id45 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id46 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id47 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id48 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id49;
SamplerState Sampler1_id50;
SamplerState Sampler2_id51;
SamplerState Sampler3_id52;
SamplerState Sampler4_id53;
SamplerState Sampler5_id54;
SamplerState Sampler6_id55;
SamplerState Sampler7_id56;
SamplerState Sampler8_id57;
SamplerState Sampler9_id58;
Texture2D<float4> InputValues1_id69;
Texture2D<float4> InputValues2_id70;
Texture2D<float4> InputValues3_id71;
RWStructuredBuffer<SMMidiNoteData> Outputvalues_id72;
uint CalculateTexelIndex_id4(uint2 coordinate, uint2 count)
{
    return dot(coordinate, uint2(1, count.x));
}
float4 SampleTexture_id5(Texture2D tex, float2 uv, float2 lod)
{
    float2 s = pow(2, lod);
    float4 u_color = tex.SampleLevel(LinearSampler_id41, uv, lod.x) * s.x;
    float4 v_color = tex.SampleLevel(LinearSampler_id41, uv, lod.y) * s.y;
    return u_color + v_color;
}
void Compute_id6(inout CS_STREAMS streams)
{
    uint2 uv = streams.DispatchThreadId_id1.xy;
    if (any(uv >= TargetCount_id74))
        return;
    float2 sourceUV = float2(uv.x, uv.y) / TargetCount_id74;
    float2 LOD = clamp(log2(SourceCount_id73 / TargetCount_id74), 0, 5);
    float4 v1 = SampleTexture_id5(InputValues1_id69, sourceUV, LOD);
    float4 v2 = SampleTexture_id5(InputValues2_id70, sourceUV, LOD);
    float4 v3 = SampleTexture_id5(InputValues3_id71, sourceUV, LOD);
    SMMidiNoteData x;
    x.Empty = v1.r;
    x.StartTime = v1.g;
    x.Note = v1.b;
    x.Velocity = v1.a;
    x.Length = v2.r;
    x.Channel = v2.g;
    x.Constant = v2.b;
    x.Id = v2.a;
    x.TrackId = v3.r;
    x.ModWheel = v3.g;
    x.PitchBend = v3.b;
    x.Random = v3.a;
    uint targetIndex = CalculateTexelIndex_id4(uv, TargetCount_id74);
    Outputvalues_id72[targetIndex] = x;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id6(streams);
}
