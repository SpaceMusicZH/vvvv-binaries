/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin FFTQueue_ComputeFX
@P ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
***************************
******  Resources    ******
***************************
@R    FFTValues_id11 => FFTQueue_ComputeFX.FFTValues [Stage: Compute, Slot: (0-0)]
@R    Queue_id12 => FFTQueue_ComputeFX.Queue [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    FFTQueue_ComputeFX => e507691155c79940fdd292d402c8cee4
***************************
*****     Stages      *****
***************************
@G    Compute => bd7411344198bafe4ee28f5eb03672e2
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Note: shader requires additional functionality:
//       Typed UAV Load Additional Formats
//
//
// Buffer Definitions: 
//
// Resource bind info for FFTValues_id11
// {
//
//   float $Element;                    // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// FFTValues_id11                    texture  struct         r/o             t0      1 
// Queue_id12                            UAV  float4          2d             u0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_resource_structured t0, 4
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadID.xy
dcl_temps 2
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 26 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_24ff0fcca595711226d066c5332403e1.hlsl"
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.xy, l(0), u0.xyzw  // r0.x <- w; r0.y <- h

#line 28
iadd r0.x, r0.x, l(-1)
ieq r0.x, r0.x, vThreadID.x
if_nz r0.x

#line 30
  iadd r0.x, r0.y, l(-1)
  iadd r0.x, r0.x, -vThreadID.y
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, r0.x, l(0), t0.xxxx  // r0.x <- y

#line 32
  mov r0.y, l(1.000000)
  mov r0.xyzw, r0.xxxy  // r0.z <- y
else   // Prior locations: r0.y <- h

#line 34
  iadd r1.xyzw, vThreadID.xyyy, l(1, 0, 0, 0)
  ld_uav_typed_indexable(texture2d)(float,float,float,float) r0.xyzw, r1.xyzw, u0.xyzw
endif 
store_uav_typed u0.xyzw, vThreadID.xyyy, r0.xyzw

#line 49
ret 
// Approximately 15 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
StructuredBuffer<float> FFTValues_id11;
RWTexture2D<float4> Queue_id12;
void Compute_id2(inout CS_STREAMS streams)
{
    uint w, h;
    Queue_id12.GetDimensions(w, h);
    uint2 uv = streams.DispatchThreadId_id1.xy;
    if (uv.x == (w - 1))
    {
        float y = FFTValues_id11[h - 1 - uv.y];
        Queue_id12[uv.xy] = float4(y, y, y, 1);
    }
    else
        Queue_id12[uv.xy] = Queue_id12[uv.xy + uint2(1, 0)];
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2(streams);
}
