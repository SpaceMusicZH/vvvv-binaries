/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin SplitChannels_Internal_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    InputSize_id12 => SplitChannels_Internal_ComputeFX.InputSize
***************************
******  Resources    ******
***************************
@R    TexSampler_id17 => SplitChannels_Internal_ComputeFX.TexSampler [Stage: Compute, Slot: (0-0)]
@R    Tex_id11 => SplitChannels_Internal_ComputeFX.Tex [Stage: Compute, Slot: (0-0)]
@R    Channel0_id13 => SplitChannels_Internal_ComputeFX.Channel0 [Stage: Compute, Slot: (0-0)]
@R    Channel1_id14 => SplitChannels_Internal_ComputeFX.Channel1 [Stage: Compute, Slot: (1-1)]
@R    Channel2_id15 => SplitChannels_Internal_ComputeFX.Channel2 [Stage: Compute, Slot: (2-2)]
@R    Channel3_id16 => SplitChannels_Internal_ComputeFX.Channel3 [Stage: Compute, Slot: (3-3)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SplitChannels_Internal_ComputeFX => 0ad7d1e0bc4a57052885369f95b587c4
***************************
*****     Stages      *****
***************************
@G    Compute => c47966e7ae9d0d6446774c453ace2263
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int2 InputSize_id12;               // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// TexSampler_id17                   sampler      NA          NA             s0      1 
// Tex_id11                          texture  float4          2d             t0      1 
// Channel0_id13                         UAV   float          2d             u0      1 
// Channel1_id14                         UAV   float          2d             u1      1 
// Channel2_id15                         UAV   float          2d             u2      1 
// Channel3_id16                         UAV   float          2d             u3      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_typed_texture2d (float,float,float,float) u1
dcl_uav_typed_texture2d (float,float,float,float) u2
dcl_uav_typed_texture2d (float,float,float,float) u3
dcl_input vThreadID.xy
dcl_temps 1
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 41 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_2411c907f835bf1469cc8ab6c2d3ff19.hlsl"
uge r0.xy, vThreadID.xyxx, cb0[0].xyxx
or r0.x, r0.y, r0.x

#line 43
if_z r0.x
  utof r0.xy, vThreadID.xyxx
  add r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  itof r0.zw, cb0[0].xxxy
  div r0.xy, r0.xyxx, r0.zwzz  // r0.x <- uv.x; r0.y <- uv.y

#line 44
  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- col.x; r0.y <- col.y; r0.z <- col.z; r0.w <- col.w

#line 45
  store_uav_typed u0.xyzw, vThreadID.xyyy, r0.xxxx

#line 46
  store_uav_typed u1.xyzw, vThreadID.xyyy, r0.yyyy

#line 47
  store_uav_typed u2.xyzw, vThreadID.xyyy, r0.zzzz

#line 48
  store_uav_typed u3.xyzw, vThreadID.xyyy, r0.wwww
endif 

#line 63
ret 
// Approximately 14 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int2 InputSize_id12;
};
Texture2D Tex_id11;
RWTexture2D<float> Channel0_id13;
RWTexture2D<float> Channel1_id14;
RWTexture2D<float> Channel2_id15;
RWTexture2D<float> Channel3_id16;
SamplerState TexSampler_id17 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = clamp;
    AddressV = clamp;
    AddressW = clamp;
    BorderColor = float4(0, 0, 0, 0);
};
void Compute_id2(inout CS_STREAMS streams)
{
    uint2 xy = streams.DispatchThreadId_id1.xy;
    if (any(xy >= InputSize_id12))
        return;
    float2 uv = (xy + 0.5) / InputSize_id12;
    float4 col = Tex_id11.SampleLevel(TexSampler_id17, uv, 0);
    Channel0_id13[xy] = col.r;
    Channel1_id14[xy] = col.g;
    Channel2_id15[xy] = col.b;
    Channel3_id16[xy] = col.a;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2(streams);
}
