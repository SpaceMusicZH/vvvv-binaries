/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin BakeSDF_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 48]
@C    gridSize_id12 => SdfUtils.gridSize
@C    gridCenter_id13 => SdfUtils.gridCenter
@C    cellCount_id14 => SdfUtils.cellCount
@C    cellSize_id15 => SdfUtils.cellSize
***************************
******  Resources    ******
***************************
@R    PositionBuffer_id16 => BakeSDF_ComputeFX.PositionBuffer [Stage: Compute, Slot: (0-0)]
@R    IndicesBuffer_id17 => BakeSDF_ComputeFX.IndicesBuffer [Stage: Compute, Slot: (1-1)]
@R    SDFBuffer_id11 => SdfUtils.SDFBuffer [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    BakeSDF_ComputeFX => 0c21597142b15c5d92c5e67e77f2d6eb
@S    SdfUtils => 0c43dc469c93d94288b74a43e650ed91
***************************
*****     Stages      *****
***************************
@G    Compute => cd3e68a48e5125ce87f80b1b9e98dc4d
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float3 gridSize_id12;              // Offset:    0 Size:    12
//   float3 gridCenter_id13;            // Offset:   16 Size:    12
//   float3 cellCount_id14;             // Offset:   32 Size:    12
//   float cellSize_id15;               // Offset:   44 Size:     4
//
// }
//
// Resource bind info for PositionBuffer_id16
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for IndicesBuffer_id17
// {
//
//   int $Element;                      // Offset:    0 Size:     4
//
// }
//
// Resource bind info for SDFBuffer_id11
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PositionBuffer_id16               texture  struct         r/o             t0      1 
// IndicesBuffer_id17                texture  struct         r/o             t1      1 
// SDFBuffer_id11                        UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_resource_structured t0, 12
dcl_resource_structured t1, 4
dcl_uav_structured u0, 4
dcl_input vThreadID.x
dcl_temps 19
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 84 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_0331b3ef2bfbd054c63dbe820cc84b0f.hlsl"
bufinfo_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, t1.xyzw  // r0.x <- numIndices

#line 85
udiv r0.x, null, r0.x, l(3)  // r0.x <- numTriangles

#line 88
ilt r0.x, vThreadID.x, r0.x
if_nz r0.x
  imul null, r0.x, vThreadID.x, l(3)
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, r0.x, l(0), t1.xxxx  // r0.x <- index0

#line 90
  imad r0.yz, vThreadID.xxxx, l(0, 3, 3, 0), l(0, 1, 2, 0)

#line 89
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.y, r0.y, l(0), t1.xxxx  // r0.y <- index1

#line 90
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.z, r0.z, l(0), t1.xxxx  // r0.z <- index2

#line 91
  mad r1.xyz, -cb0[0].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb0[1].xyzx  // r1.x <- origin.x; r1.y <- origin.y; r1.z <- origin.z

#line 92
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r2.xyz, r0.x, l(0), t0.xyzx
  add r2.xyz, -r1.xyzx, r2.xyzx  // r2.x <- tri0.x; r2.y <- tri0.y; r2.z <- tri0.z

#line 93
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.xyw, r0.y, l(0), t0.xyxz
  add r0.xyw, -r1.xyxz, r0.xyxw  // r0.x <- tri1.x; r0.y <- tri1.y; r0.w <- tri1.z

#line 94
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r3.xyz, r0.z, l(0), t0.xyzx
  add r1.xyz, -r1.xyzx, r3.xyzx  // r1.x <- tri2.x; r1.y <- tri2.y; r1.z <- tri2.z

#line 95
  min r3.xyz, r0.xywx, r1.xyzx
  min r3.xyz, r2.xyzx, r3.xyzx
  add r3.xyz, r3.xyzx, -cb0[2].wwww  // r3.x <- aabbMin.x; r3.y <- aabbMin.y; r3.z <- aabbMin.z

#line 96
  max r4.xyz, r0.xywx, r1.xyzx
  max r4.xyz, r2.xyzx, r4.xyzx
  add r4.xyz, r4.xyzx, cb0[2].wwww  // r4.x <- aabbMax.x; r4.y <- aabbMax.y; r4.z <- aabbMax.z

#line 73
  add r3.xyz, r3.xyzx, -cb0[1].xyzx
  div r3.xyz, r3.xyzx, cb0[2].wwww  // r3.x <- sdfPosition.x; r3.y <- sdfPosition.y; r3.z <- sdfPosition.z

#line 77
  ftoi r3.xyz, r3.xyzx  // r3.x <- result.x; r3.y <- result.y; r3.z <- result.z

#line 97
  iadd r3.xyz, r3.xyzx, l(-15, -15, -15, 0)  // r3.x <- gridMin.x; r3.y <- gridMin.y; r3.z <- gridMin.z

#line 73
  add r4.xyz, r4.xyzx, -cb0[1].xyzx
  div r4.xyz, r4.xyzx, cb0[2].wwww  // r4.x <- sdfPosition.x; r4.y <- sdfPosition.y; r4.z <- sdfPosition.z

#line 77
  ftoi r4.xyz, r4.xyzx  // r4.x <- result.x; r4.y <- result.y; r4.z <- result.z

#line 98
  iadd r4.xyz, r4.xyzx, l(15, 15, 15, 0)  // r4.x <- gridMax.x; r4.y <- gridMax.y; r4.z <- gridMax.z

#line 101
  itof r3.xyz, r3.xyzx
  add r5.xyz, cb0[2].xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  min r3.xyz, r3.xyzx, r5.xyzx
  max r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  ftoi r3.xyz, r3.xyzx  // r3.x <- gridMin.x; r3.y <- gridMin.y; r3.z <- gridMin.z

#line 104
  itof r4.xyz, r4.xyzx
  min r4.xyz, r5.xyzx, r4.xyzx
  max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  ftoi r4.xyz, r4.xyzx  // r4.x <- gridMax.x; r4.y <- gridMax.y; r4.z <- gridMax.z

#line 105
  max r0.z, cb0[0].y, cb0[0].x
  max r0.z, r0.z, cb0[0].z  // r0.z <- sizeMax

#line 67
  ftoi r1.w, cb0[2].x  // r1.w <- cellsPerLine

#line 68
  mul r2.w, cb0[2].y, cb0[2].x
  ftoi r2.w, r2.w  // r2.w <- cellsPerPlane

#line 53
  add r5.xyz, -r2.xyzx, r0.xywx
  add r6.xyz, -r2.yzxy, r1.yzxy
  mul r7.xyz, r5.zxyz, r6.xyzx
  mad r6.xyz, r5.yzxy, r6.yzxy, -r7.xyzx  // r6.x <- nTri.x; r6.y <- nTri.y; r6.z <- nTri.z

#line 39
  add r7.xyz, -r0.xywx, r1.xyzx  // r7.x <- cb.x; r7.y <- cb.y; r7.z <- cb.z

#line 41
  add r8.xyz, -r1.xyzx, r2.xyzx  // r8.x <- ac.x; r8.y <- ac.y; r8.z <- ac.z

#line 43
  mul r9.xyz, r5.zxyz, r8.yzxy
  mad r9.xyz, r5.yzxy, r8.zxyz, -r9.xyzx  // r9.x <- nor.x; r9.y <- nor.y; r9.z <- nor.z

#line 44
  mul r10.xyz, r5.zxyz, r9.yzxy
  mad r10.xyz, r5.yzxy, r9.zxyz, -r10.xyzx
  mul r11.xyz, r7.zxyz, r9.yzxy
  mad r11.xyz, r7.yzxy, r9.zxyz, -r11.xyzx
  mul r12.xyz, r8.zxyz, r9.yzxy
  mad r12.xyz, r8.yzxy, r9.zxyz, -r12.xyzx

#line 33
  dp3 r3.w, r5.xyzx, r5.xyzx  // r3.w <- <dot2_id10 return value>
  dp3 r4.w, r7.xyzx, r7.xyzx  // r4.w <- <dot2_id10 return value>
  dp3 r5.w, r8.xyzx, r8.xyzx  // r5.w <- <dot2_id10 return value>
  dp3 r6.w, r9.xyzx, r9.xyzx  // r6.w <- <dot2_id10 return value>

#line 120
  mov r13.y, l(0)

#line 107
  mov r7.w, r3.z  // r7.w <- z
  loop 
    ilt r8.w, r4.z, r7.w
    breakc_nz r8.w

#line 61
    itof r14.z, r7.w

#line 110
    mov r8.w, r3.y  // r8.w <- y
    loop 
      ilt r9.w, r4.y, r8.w
      breakc_nz r9.w

#line 69
      imul null, r9.w, r1.w, r8.w
      imad r9.w, r2.w, r7.w, r9.w

#line 61
      itof r14.y, r8.w

#line 113
      mov r10.w, r3.x  // r10.w <- x
      loop 
        ilt r11.w, r4.x, r10.w
        breakc_nz r11.w

#line 69
        iadd r13.x, r9.w, r10.w  // r13.x <- <GetSdfCellIndex_id8 return value>

#line 61
        itof r14.x, r10.w

#line 62
        mad r15.xyz, r14.xyzx, cb0[2].wwww, cb0[1].xyzx  // r15.x <- cellCenter.x; r15.y <- cellCenter.y; r15.z <- cellCenter.z

#line 38
        add r16.xyz, -r2.xyzx, r15.xyzx  // r16.x <- pa.x; r16.y <- pa.y; r16.z <- pa.z

#line 40
        add r17.xyz, -r0.xywx, r15.xyzx  // r17.x <- pb.x; r17.y <- pb.y; r17.z <- pb.z

#line 42
        add r15.xyz, -r1.xyzx, r15.xyzx  // r15.x <- pc.x; r15.y <- pc.y; r15.z <- pc.z

#line 44
        dp3 r11.w, r10.xyzx, r16.xyzx
        lt r12.w, l(0.000000), r11.w
        lt r11.w, r11.w, l(0.000000)
        iadd r11.w, -r12.w, r11.w
        dp3 r12.w, r11.xyzx, r17.xyzx
        lt r13.z, l(0.000000), r12.w
        lt r12.w, r12.w, l(0.000000)
        iadd r12.w, -r13.z, r12.w
        iadd r11.w, r11.w, r12.w
        dp3 r12.w, r12.xyzx, r15.xyzx
        lt r13.z, l(0.000000), r12.w
        lt r12.w, r12.w, l(0.000000)
        iadd r12.w, -r13.z, r12.w
        iadd r11.w, r11.w, r12.w
        itof r11.w, r11.w
        lt r11.w, r11.w, l(2.000000)
        dp3 r12.w, r5.xyzx, r16.xyzx
        div_sat r12.w, r12.w, r3.w
        mad r18.xyz, r5.xyzx, r12.wwww, -r16.xyzx

#line 33
        dp3 r12.w, r18.xyzx, r18.xyzx  // r12.w <- <dot2_id10 return value>

#line 44
        dp3 r13.z, r7.xyzx, r17.xyzx
        div_sat r13.z, r13.z, r4.w
        mad r17.xyz, r7.xyzx, r13.zzzz, -r17.xyzx

#line 33
        dp3 r13.z, r17.xyzx, r17.xyzx  // r13.z <- <dot2_id10 return value>

#line 44
        min r12.w, r12.w, r13.z
        dp3 r13.z, r8.xyzx, r15.xyzx
        div_sat r13.z, r13.z, r5.w
        mad r15.xyz, r8.xyzx, r13.zzzz, -r15.xyzx

#line 33
        dp3 r13.z, r15.xyzx, r15.xyzx  // r13.z <- <dot2_id10 return value>

#line 44
        min r12.w, r12.w, r13.z
        dp3 r13.z, r9.xyzx, r16.xyzx
        mul r13.z, r13.z, r13.z
        div r13.z, r13.z, r6.w
        movc r11.w, r11.w, r12.w, r13.z
        sqrt r11.w, r11.w  // r11.w <- <udTriangle_id11 return value>

#line 56
        dp3 r12.w, r16.xyzx, r6.xyzx
        lt r12.w, r12.w, l(0.000000)
        movc r11.w, r12.w, r11.w, -r11.w  // r11.w <- d

#line 118
        div r11.w, r11.w, r0.z  // r11.w <- dist

#line 49
        ushr r12.w, r11.w, l(31)
        bfi r11.w, l(31), l(1), r11.w, r12.w  // r11.w <- <FloatFlip3_id4 return value>

#line 120
        atomic_umin u0, r13.xyxx, r11.w

#line 121
        iadd r10.w, r10.w, l(1)
      endloop 

#line 122
      iadd r8.w, r8.w, l(1)
    endloop 

#line 123
    iadd r7.w, r7.w, l(1)
  endloop 
endif 

#line 138
ret 
// Approximately 135 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float3 gridSize_id12;
    float3 gridCenter_id13;
    float3 cellCount_id14;
    float cellSize_id15;
};
RWStructuredBuffer<uint> SDFBuffer_id11;
StructuredBuffer<float3> PositionBuffer_id16;
StructuredBuffer<int> IndicesBuffer_id17;
float dot2_id10(float3 v)
{
    return dot(v, v);
}
float udTriangle_id11(float3 p, float3 a, float3 b, float3 c)
{
    float3 ba = b - a;
    float3 pa = p - a;
    float3 cb = c - b;
    float3 pb = p - b;
    float3 ac = a - c;
    float3 pc = p - c;
    float3 nor = cross(ba, ac);
    return sqrt((sign(dot(cross(ba, nor), pa)) + sign(dot(cross(cb, nor), pb)) + sign(dot(cross(ac, nor), pc)) < 2.0) ? min(min(dot2_id10(ba * clamp(dot(ba, pa) / dot2_id10(ba), 0.0, 1.0) - pa), dot2_id10(cb * clamp(dot(cb, pb) / dot2_id10(cb), 0.0, 1.0) - pb)), dot2_id10(ac * clamp(dot(ac, pc) / dot2_id10(ac), 0.0, 1.0) - pc)) : dot(nor, pa) * dot(nor, pa) / dot2_id10(nor));
}
uint FloatFlip3_id4(float fl)
{
    uint f = asuint(fl);
    return (f << 1) | (f >> 31);
}
float SignedDistancePointToUDTriangle_id13(float3 p, float3 x0, float3 x1, float3 x2)
{
    float3 nTri = cross((x1 - x0), (x2 - x0));
    float3 n;
    float d = udTriangle_id11(p, x0, x1, x2);
    d = (dot(p - x0, nTri) < 0.f) ? d : -d;
    return d;
}
float3 GetSdfCellPosition_id7(int3 gridPosition)
{
    float3 cellCenter = float3(gridPosition.x, gridPosition.y, gridPosition.z) * cellSize_id15;
    cellCenter += gridCenter_id13.xyz;
    return cellCenter;
}
int GetSdfCellIndex_id8(int3 gridPosition)
{
    int cellsPerLine = cellCount_id14.x;
    int cellsPerPlane = cellCount_id14.x * cellCount_id14.y;
    return cellsPerPlane * gridPosition.z + cellsPerLine * gridPosition.y + gridPosition.x;
}
int3 GetSdfCoordinates_id6(float3 positionInWorld)
{
    float3 sdfPosition = (positionInWorld - gridCenter_id13) / cellSize_id15;
    int3 result;
    result.x = (int)sdfPosition.x;
    result.y = (int)sdfPosition.y;
    result.z = (int)sdfPosition.z;
    return result;
}
void Compute_id14(inout CS_STREAMS streams)
{
    int triIndex = streams.DispatchThreadId_id1.x;
    uint numIndices, dum;
    IndicesBuffer_id17.GetDimensions(numIndices, dum);
    uint numTriangles = numIndices / 3;
    if (triIndex >= (int)numTriangles)
        return;
    uint index0 = IndicesBuffer_id17[triIndex * 3 + 0];
    uint index1 = IndicesBuffer_id17[triIndex * 3 + 1];
    uint index2 = IndicesBuffer_id17[triIndex * 3 + 2];
    float3 origin = gridCenter_id13 - (gridSize_id12 * .5);
    float3 tri0 = PositionBuffer_id16[index0] - origin;
    float3 tri1 = PositionBuffer_id16[index1] - origin;
    float3 tri2 = PositionBuffer_id16[index2] - origin;
    float3 aabbMin = min(tri0, min(tri1, tri2)) - cellSize_id15;
    float3 aabbMax = max(tri0, max(tri1, tri2)) + cellSize_id15;
    int3 gridMin = GetSdfCoordinates_id6(aabbMin) - 15;
    int3 gridMax = GetSdfCoordinates_id6(aabbMax) + 15;
    gridMin.x = max(0, min(gridMin.x, cellCount_id14.x - 1));
    gridMin.y = max(0, min(gridMin.y, cellCount_id14.y - 1));
    gridMin.z = max(0, min(gridMin.z, cellCount_id14.z - 1));
    gridMax.x = max(0, min(gridMax.x, cellCount_id14.x - 1));
    gridMax.y = max(0, min(gridMax.y, cellCount_id14.y - 1));
    gridMax.z = max(0, min(gridMax.z, cellCount_id14.z - 1));
    float sizeMax = max(max(gridSize_id12.x, gridSize_id12.y), gridSize_id12.z);

    for (int z = gridMin.z; z <= gridMax.z; z++)
    {

        for (int y = gridMin.y; y <= gridMax.y; y++)
        {

            for (int x = gridMin.x; x <= gridMax.x; x++)
            {
                int3 gridCell = int3(x, y, z);
                int gridCellIndex = GetSdfCellIndex_id8(gridCell);
                float3 cellPos = GetSdfCellPosition_id7(gridCell);
                float dist = SignedDistancePointToUDTriangle_id13(cellPos, tri0, tri1, tri2) / sizeMax;
                uint distAsUint = FloatFlip3_id4(dist);
                InterlockedMin(SDFBuffer_id11[gridCellIndex], distAsUint);
            }
        }
    }
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id14(streams);
}
