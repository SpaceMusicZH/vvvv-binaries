/**************************
***** Compiler Parameters *****
***************************
@P EffectName: DrawFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin FuseCommonDrawSprites_DrawFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 416]
@C    World_id29 => Transformation.World
@C    WorldInverse_id30 => Transformation.WorldInverse
@C    WorldInverseTranspose_id31 => Transformation.WorldInverseTranspose
@C    WorldView_id32 => Transformation.WorldView
@C    WorldViewInverse_id33 => Transformation.WorldViewInverse
@C    WorldViewProjection_id34 => Transformation.WorldViewProjection
@C    WorldScale_id35 => Transformation.WorldScale
@C    EyeMS_id36 => Transformation.EyeMS
cbuffer PerFrame [Size: 32]
@C    colDefualt_id42 => FuseCommonDrawSprites_DrawFX.colDefualt
@C    sizeDefualt_id43 => FuseCommonDrawSprites_DrawFX.sizeDefualt
cbuffer PerView [Size: 352]
@C    View_id22 => Transformation.View
@C    ViewInverse_id23 => Transformation.ViewInverse
@C    Projection_id24 => Transformation.Projection
@C    ProjectionInverse_id25 => Transformation.ProjectionInverse
@C    ViewProjection_id26 => Transformation.ViewProjection
@C    ProjScreenRay_id27 => Transformation.ProjScreenRay
@C    Eye_id28 => Transformation.Eye
***************************
******  Resources    ******
***************************
@R    posBuffer_id37 => FuseCommonDrawSprites_DrawFX.posBuffer [Stage: Vertex, Slot: (0-0)]
@R    sizeBuffer_id38 => FuseCommonDrawSprites_DrawFX.sizeBuffer [Stage: Vertex, Slot: (1-1)]
@R    colBuffer_id39 => FuseCommonDrawSprites_DrawFX.colBuffer [Stage: Vertex, Slot: (2-2)]
@R    PerFrame => PerFrame [Stage: Vertex, Slot: (0-0)]
@R    PerDraw => PerDraw [Stage: Geometry, Slot: (0-0)]
@R    PerView => PerView [Stage: Geometry, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    FuseCommonDrawSprites_DrawFX => 1f5127ab5d4c2872cbb406231655e9db
@S    VS_PS_Base => f089dc4ce5d5868b962b08793ef74fd9
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    PositionStream4 => 992b49e1b4dd13d8ef84a05830d70229
@S    NormalStream => ea68512133899a045766d21afb59733a
@S    Transformation => 7c995c14d4da978d7dca233f15f1e7c0
@S    FuseCommonBuffer => 65b35e271cc4ebdf63ebebd0f53f481c
@S    FuseCommonTypes => 294db151085426350495bb436e7480dd
***************************
*****     Stages      *****
***************************
@G    Vertex => 91980f40eff76da579dc992e2fed9a5b
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerFrame
// {
//
//   float4 colDefualt_id42;            // Offset:    0 Size:    16
//   float sizeDefualt_id43;            // Offset:   16 Size:     4
//
// }
//
// Resource bind info for posBuffer_id37
// {
//
//   float3 $Element;                   // Offset:    0 Size:    12
//
// }
//
// Resource bind info for sizeBuffer_id38
// {
//
//   float $Element;                    // Offset:    0 Size:     4
//
// }
//
// Resource bind info for colBuffer_id39
// {
//
//   float4 $Element;                   // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// posBuffer_id37                    texture  struct         r/o             t0      1 
// sizeBuffer_id38                   texture  struct         r/o             t1      1 
// colBuffer_id39                    texture  struct         r/o             t2      1 
// PerFrame                          cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION_WS              0   xyzw        0     NONE   float   xyzw
// SIZE_ID47_SEM            0   x           1     NONE   float   x   
// COLOR_ID46_SEM           0   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_resource_structured t0, 12
dcl_resource_structured t1, 4
dcl_resource_structured t2, 16
dcl_input_sgv v0.x, vertex_id
dcl_output o0.xyzw
dcl_output o1.x
dcl_output o2.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- __input__; 
//   o2.x <- <VSMain return value>.Color_id46.x; o2.y <- <VSMain return value>.Color_id46.y; o2.z <- <VSMain return value>.Color_id46.z; o2.w <- <VSMain return value>.Color_id46.w; 
//   o1.x <- <VSMain return value>.Size_id47; 
//   o0.x <- <VSMain return value>.PositionWS_id15.x; o0.y <- <VSMain return value>.PositionWS_id15.y; o0.z <- <VSMain return value>.PositionWS_id15.z; o0.w <- <VSMain return value>.PositionWS_id15.w
//
#line 168 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_bab78db95434b9c79d68b9ac1c38ecae.hlsl"
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) o0.xyz, v0.x, l(0), t0.xyzx

#line 175
mov o0.w, l(1.000000)

#line 102
bufinfo_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, t1.xyzw  // r0.x <- count

#line 125
udiv null, r0.y, v0.x, r0.x

#line 124
ult r0.x, l(0), r0.x

#line 125
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.y, r0.y, l(0), t1.xxxx  // r0.y <- value
movc o1.x, r0.x, r0.y, cb0[1].x

#line 96
bufinfo_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.x, t2.xyzw  // r0.x <- count

#line 117
udiv null, r0.y, v0.x, r0.x

#line 116
ult r0.x, l(0), r0.x

#line 117
ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, l(0), t2.xyzw  // r1.x <- value.x; r1.y <- value.y; r1.z <- value.z; r1.w <- value.w
movc o2.xyzw, r0.xxxx, r1.xyzw, cb0[0].xyzw

#line 175
ret 
// Approximately 13 instruction slots used
@G    Geometry => 118d5ef4e8c9cf5fa6dd0391d8ce0362
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 World_id29;               // Offset:    0 Size:    64 [unused]
//   float4x4 WorldInverse_id30;        // Offset:   64 Size:    64 [unused]
//   float4x4 WorldInverseTranspose_id31;// Offset:  128 Size:    64 [unused]
//   float4x4 WorldView_id32;           // Offset:  192 Size:    64
//   float4x4 WorldViewInverse_id33;    // Offset:  256 Size:    64 [unused]
//   float4x4 WorldViewProjection_id34; // Offset:  320 Size:    64 [unused]
//   float3 WorldScale_id35;            // Offset:  384 Size:    12 [unused]
//   float4 EyeMS_id36;                 // Offset:  400 Size:    16 [unused]
//
// }
//
// cbuffer PerView
// {
//
//   float4x4 View_id22;                // Offset:    0 Size:    64 [unused]
//   float4x4 ViewInverse_id23;         // Offset:   64 Size:    64 [unused]
//   float4x4 Projection_id24;          // Offset:  128 Size:    64
//   float4x4 ProjectionInverse_id25;   // Offset:  192 Size:    64 [unused]
//   float4x4 ViewProjection_id26;      // Offset:  256 Size:    64 [unused]
//   float2 ProjScreenRay_id27;         // Offset:  320 Size:     8 [unused]
//   float4 Eye_id28;                   // Offset:  336 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION_WS              0   xyzw        0     NONE   float   xyzw
// SIZE_ID47_SEM            0   x           1     NONE   float   x   
// COLOR_ID46_SEM           0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD_ID44_SEM        0   xy          0     NONE   float   xy  
// SV_Position              0   xyzw        1      POS   float   xyzw
// COLOR_ID46_SEM           0   xyzw        2     NONE   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0, 1.000000, 0, 0},
                              { 1.000000, 1.000000, 0, 0},
                              { 0, 0, -1.000000, 1.000000},
                              { 1.000000, 0, 1.000000, 1.000000},
                              { 0, 0, -1.000000, -1.000000},
                              { 0, 0, 1.000000, -1.000000} }
dcl_constantbuffer CB0[16], immediateIndexed
dcl_constantbuffer CB1[12], immediateIndexed
dcl_input v[1][0].xyzw
dcl_input v[1][1].x
dcl_input v[1][2].xyzw
dcl_temps 3
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output o0.xy
dcl_output_siv o1.xyzw, position
dcl_output o2.xyzw
dcl_maxout 4
//
// Initial variable locations:
//   m0 <- triangleStream; 
//   v[0][0].x <- input[0].PositionWS_id15.x; v[0][0].y <- input[0].PositionWS_id15.y; v[0][0].z <- input[0].PositionWS_id15.z; v[0][0].w <- input[0].PositionWS_id15.w; 
//   v[0][1].x <- input[0].Size_id47; 
//   v[0][2].x <- input[0].Color_id46.x; v[0][2].y <- input[0].Color_id46.y; v[0][2].z <- input[0].Color_id46.z; v[0][2].w <- input[0].Color_id46.w
//
#line 150 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_bab78db95434b9c79d68b9ac1c38ecae.hlsl"
dp4 r0.x, v[0][0].xyzw, cb0[12].xyzw  // r0.x <- posView.x
dp4 r0.y, v[0][0].xyzw, cb0[13].xyzw  // r0.y <- posView.y
dp4 r0.z, v[0][0].xyzw, cb0[14].xyzw  // r0.z <- posView.z
dp4 r1.w, v[0][0].xyzw, cb0[15].xyzw  // r1.w <- posView.w

#line 151
mov r2.z, l(0)

#line 147
mov r0.w, l(0)  // r0.w <- i
loop 
  ige r2.w, r0.w, l(4)
  breakc_nz r2.w

#line 151
  mov r2.xy, icb[r0.w + 2].zwzz
  mad r1.xyz, r2.xyzx, v[0][1].xxxx, r0.xyzx  // r1.x <- posView.x; r1.y <- posView.y; r1.z <- posView.z

#line 152
  dp4 r2.x, r1.xyzw, cb1[8].xyzw  // r2.x <- streams.ShadingPosition_id0.x
  dp4 r2.y, r1.xyzw, cb1[9].xyzw  // r2.y <- streams.ShadingPosition_id0.y
  dp4 r2.w, r1.xyzw, cb1[10].xyzw  // r2.w <- streams.ShadingPosition_id0.z
  dp4 r1.x, r1.xyzw, cb1[11].xyzw  // r1.x <- streams.ShadingPosition_id0.w

#line 159
  mov o0.xy, icb[r0.w + 0].xyxx
  mov o1.x, r2.x
  mov o1.y, r2.y
  mov o1.z, r2.w
  mov o1.w, r1.x
  mov o2.xyzw, v[0][2].xyzw
  emit_stream m0

#line 161
  iadd r0.w, r0.w, l(1)
endloop 

#line 162
ret 
// Approximately 25 instruction slots used
@G    Pixel => f2562b081d77eed6b9addcad2eebafa7
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD_ID44_SEM        0   xy          0     NONE   float   xy  
// SV_Position              0   xyzw        1      POS   float       
// COLOR_ID46_SEM           0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_input_ps linear v0.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 1
//
// Initial variable locations:
//   v0.x <- __input__.TexCoord_id44.x; v0.y <- __input__.TexCoord_id44.y; 
//   v1.x <- __input__.ShadingPosition_id0.x; v1.y <- __input__.ShadingPosition_id0.y; v1.z <- __input__.ShadingPosition_id0.z; v1.w <- __input__.ShadingPosition_id0.w; 
//   v2.x <- __input__.Color_id46.x; v2.y <- __input__.Color_id46.y; v2.z <- __input__.Color_id46.z; v2.w <- __input__.Color_id46.w; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 107 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_DrawFXEffect_bab78db95434b9c79d68b9ac1c38ecae.hlsl"
add r0.xy, v0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
lt r0.x, l(0.500000), r0.x

#line 109
discard_nz r0.x

#line 137
mov o0.xyzw, v2.xyzw
ret 
// Approximately 7 instruction slots used
***************************
*************************/
static const float3 QuadPositions_id40[4] = { float3(-1, 1, 0), float3(1, 1, 0), float3(-1, -1, 0), float3(1, -1, 0)};
static const float2 QuadUV_id41[4] = { float2(0, 1), float2(1, 1), float2(0, 0), float2(1, 0)};
struct PS_STREAMS 
{
    float2 TexCoord_id44;
    float4 Color_id46;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float2 TexCoord_id44 : TEXCOORD_ID44_SEM;
    float4 ShadingPosition_id0 : SV_Position;
    float4 Color_id46 : COLOR_ID46_SEM;
};
struct GS_STREAMS 
{
    float4 PositionWS_id15;
    float Size_id47;
    float4 Color_id46;
    float2 TexCoord_id44;
    float4 ShadingPosition_id0;
};
struct GS_OUTPUT 
{
    float2 TexCoord_id44 : TEXCOORD_ID44_SEM;
    float4 ShadingPosition_id0 : SV_Position;
    float4 Color_id46 : COLOR_ID46_SEM;
};
struct GS_INPUT 
{
    float4 PositionWS_id15 : POSITION_WS;
    float Size_id47 : SIZE_ID47_SEM;
    float4 Color_id46 : COLOR_ID46_SEM;
};
struct VS_STREAMS 
{
    uint VertexID_id45;
    float4 PositionWS_id15;
    float Size_id47;
    float4 Color_id46;
};
struct VS_OUTPUT 
{
    float4 PositionWS_id15 : POSITION_WS;
    float Size_id47 : SIZE_ID47_SEM;
    float4 Color_id46 : COLOR_ID46_SEM;
};
struct VS_INPUT 
{
    uint VertexID_id45 : SV_VertexID;
};
struct Matrix4x4 
{
    float4x4 Matrix;
};
struct Ray 
{
    float3 ro, rd, sp, sn;
};
cbuffer PerDraw 
{
    float4x4 World_id29;
    float4x4 WorldInverse_id30;
    float4x4 WorldInverseTranspose_id31;
    float4x4 WorldView_id32;
    float4x4 WorldViewInverse_id33;
    float4x4 WorldViewProjection_id34;
    float3 WorldScale_id35;
    float4 EyeMS_id36;
};
cbuffer PerFrame 
{
    float4 colDefualt_id42;
    float sizeDefualt_id43;
};
cbuffer PerView 
{
    float4x4 View_id22;
    float4x4 ViewInverse_id23;
    float4x4 Projection_id24;
    float4x4 ProjectionInverse_id25;
    float4x4 ViewProjection_id26;
    float2 ProjScreenRay_id27;
    float4 Eye_id28;
};
StructuredBuffer<float3> posBuffer_id37;
StructuredBuffer<float> sizeBuffer_id38;
StructuredBuffer<float4> colBuffer_id39;
uint sbSize4_id6(StructuredBuffer<float4> sBuffer)
{
    uint count, dummy;
    sBuffer.GetDimensions(count, dummy);
    return count;
}
uint sbSize_id3(StructuredBuffer<float> sBuffer)
{
    uint count, dummy;
    sBuffer.GetDimensions(count, dummy);
    return count;
}
void CircleSpriteDiscard_id15(float2 uv)
{
    if (length(uv - 0.5f) > 0.5f)
    {
        discard;
    }
}
float4 sbLoad_id12(uint index, StructuredBuffer<float4> sBuffer, float4 defaultValue = 0.)
{
    float4 value = defaultValue;
    uint count = sbSize4_id6(sBuffer);
    if (count > 0)
        value = sBuffer[index % count];
    return value;
}
float sbLoad_id9(uint index, StructuredBuffer<float> sBuffer, float defaultValue = 0.)
{
    float value = defaultValue;
    uint count = sbSize_id3(sBuffer);
    if (count > 0)
        value = sBuffer[index % count];
    return value;
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id44 = __input__.TexCoord_id44;
    streams.Color_id46 = __input__.Color_id46;
    CircleSpriteDiscard_id15(streams.TexCoord_id44);
    streams.ColorTarget_id2 = streams.Color_id46;
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
[maxvertexcount(4)]
void GSMain(point GS_INPUT input[1], inout TriangleStream<GS_OUTPUT> triangleStream)
{
    GS_STREAMS streams = (GS_STREAMS)0;
    streams.PositionWS_id15 = input[0].PositionWS_id15;
    streams.Size_id47 = input[0].Size_id47;
    streams.Color_id46 = input[0].Color_id46;

    for (int i = 0; i < 4; i++)
    {
        streams.TexCoord_id44 = QuadUV_id41[i].xy;
        float4 posView = mul(streams.PositionWS_id15, WorldView_id32);
        posView.xyz += QuadPositions_id40[i].xyz * streams.Size_id47;
        streams.ShadingPosition_id0 = mul(posView, Projection_id24);

        {
            GS_OUTPUT output = (GS_OUTPUT)0;
            output.TexCoord_id44 = streams.TexCoord_id44;
            output.ShadingPosition_id0 = streams.ShadingPosition_id0;
            output.Color_id46 = streams.Color_id46;
            triangleStream.Append(output);
        }
    }
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.VertexID_id45 = __input__.VertexID_id45;
    uint id = streams.VertexID_id45;
    streams.PositionWS_id15 = float4(posBuffer_id37[id], 1);
    streams.Size_id47 = sbLoad_id9(id, sizeBuffer_id38, sizeDefualt_id43);
    streams.Color_id46 = sbLoad_id12(id, colBuffer_id39, colDefualt_id42);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.PositionWS_id15 = streams.PositionWS_id15;
    __output__.Size_id47 = streams.Size_id47;
    __output__.Color_id46 = streams.Color_id46;
    return __output__;
}
