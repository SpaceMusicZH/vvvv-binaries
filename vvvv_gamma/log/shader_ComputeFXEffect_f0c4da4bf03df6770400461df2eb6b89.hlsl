/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin GetFuseMatrix_ComputeFX [{fuseMatrix = InputMatrix<ShaderFX.InputValueMatrix,PerUpdate>}]
@P fuseMatrix: InputMatrix<ShaderFX.InputValueMatrix,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerUpdate [Size: 64]
@C    InputValue_id13 => ShaderFX.InputValueMatrix
***************************
******  Resources    ******
***************************
@R    OutputBuffer_id11 => GetFuseMatrix_ComputeFX.OutputBuffer [Stage: Compute, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    GetFuseMatrix_ComputeFX => b53ce1a7a3900bd545859b19a029b745
@S    FuseCommonTypes => 294db151085426350495bb436e7480dd
@S    ComputeMatrix => 3d2736b5fb4cc5353a04a60e62f9a98c
@S    InputMatrix => 6c031c209a4afd3753a56049aa876a9b
@S    DeclMatrix => 572bc8ee3abf017c2c90d1d3e5ce75b7
***************************
*****     Stages      *****
***************************
@G    Compute => a79e0ac2651774ea9b437c0aaa3f5d80
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4x4 InputValue_id13;          // Offset:    0 Size:    64
//
// }
//
// Resource bind info for OutputBuffer_id11
// {
//
//   struct Matrix4x4
//   {
//       
//       float4x4 Matrix;               // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// OutputBuffer_id11                     UAV  struct         r/w             u0      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_uav_structured u0, 64
dcl_input vThreadID.x
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 42 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_ComputeFXEffect_f0c4da4bf03df6770400461df2eb6b89.hlsl"
store_structured u0.xyzw, vThreadID.x, l(0), cb0[0].xyzw
store_structured u0.xyzw, vThreadID.x, l(16), cb0[1].xyzw
store_structured u0.xyzw, vThreadID.x, l(32), cb0[2].xyzw
store_structured u0.xyzw, vThreadID.x, l(48), cb0[3].xyzw

#line 57
ret 
// Approximately 5 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
struct Matrix4x4 
{
    float4x4 Matrix;
};
struct Ray 
{
    float3 ro, rd, sp, sn;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer PerUpdate 
{
    float4x4 InputValue_id13;
};
RWStructuredBuffer<Matrix4x4> OutputBuffer_id11;
float4x4 Compute_id4()
{
    return InputValue_id13;
}
void Compute_id3(inout CS_STREAMS streams)
{
    uint index = streams.DispatchThreadId_id1.x;
    float4x4 mat = Compute_id4();
    OutputBuffer_id11[index].Matrix = mat;
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id3(streams);
}
