/**************************
***** Compiler Parameters *****
***************************
@P EffectName: SSLRTemporalPass
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer Globals [Size: 224]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    TemporalResponse_id74 => SSLRTemporalPass.TemporalResponse
@C    TemporalScale_id75 => SSLRTemporalPass.TemporalScale
@C    IVP_id76 => SSLRTemporalPass.IVP
@C    prevVP_id77 => SSLRTemporalPass.prevVP
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    PointSampler_id43 => Texturing.PointSampler [Stage: Pixel, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Texture1_id16 => Texturing.Texture1 [Stage: Pixel, Slot: (1-1)]
@R    Texture2_id18 => Texturing.Texture2 [Stage: Pixel, Slot: (2-2)]
@R    Globals => Globals [Stage: Pixel, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    SSLRTemporalPass => a935dc4eecf44b3cb0874f38000b1f57
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 192 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_SSLRTemporalPass_3d1feff6b64718a77ca30c44806a837e.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 196
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 9998be3296000dc99f0b789ede8b884b
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   float TemporalResponse_id74;       // Offset:   80 Size:     4
//   float TemporalScale_id75;          // Offset:   84 Size:     4
//   float4x4 IVP_id76;                 // Offset:   96 Size:    64
//   float4x4 prevVP_id77;              // Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PointSampler_id43                 sampler      NA          NA             s0      1 
// LinearSampler_id44                sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Texture1_id16                     texture  float4          2d             t1      1 
// Texture2_id18                     texture  float4          2d             t2      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 146 "H:\JHH_SpaceMusic\SpaceMusicZH\vvvv-binaries\vvvv_gamma\log\shader_SSLRTemporalPass_3d1feff6b64718a77ca30c44806a837e.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t2.yzxw, s0, l(0.000000)  // r0.z <- rawDepth

#line 137
mad r0.xy, v1.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[6].xyzw  // r1.x <- pos.x
dp4 r1.y, r0.xyzw, cb0[7].xyzw  // r1.y <- pos.y
dp4 r1.z, r0.xyzw, cb0[8].xyzw  // r1.z <- pos.z
dp4 r0.x, r0.xyzw, cb0[9].xyzw  // r0.x <- pos.w

#line 138
div r0.xyz, r1.xyzx, r0.xxxx  // r0.x <- <ComputeWorldPosition_id5 return value>.x; r0.y <- <ComputeWorldPosition_id5 return value>.y; r0.z <- <ComputeWorldPosition_id5 return value>.z

#line 153
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[10].xyzw  // r1.x <- prevSS.x
dp4 r1.y, r0.xyzw, cb0[11].xyzw  // r1.y <- prevSS.y
dp4 r0.x, r0.xyzw, cb0[13].xyzw  // r0.x <- prevSS.w

#line 154
div r0.xy, r1.xyxx, r0.xxxx  // r0.x <- prevSS.x; r0.y <- prevSS.y

#line 142
mad r0.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)  // r0.x <- <ClipToUv_id3 return value>.x; r0.y <- <ClipToUv_id3 return value>.y

#line 157
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t1.xyzw, s1, l(0.000000)  // r0.x <- previous.x; r0.y <- previous.y; r0.z <- previous.z; r0.w <- previous.w

#line 160
mov r1.xw, l(0,0,0,0)
mov r1.yz, cb0[0].yyxy

#line 166
add r2.xyzw, r1.zwxy, v1.xyxy

#line 168
add r3.xy, r1.zwzz, r2.zwzz
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.xyxx, t0.xyzw, s1, l(0.000000)  // r3.x <- currentBottomRight.x; r3.y <- currentBottomRight.y; r3.z <- currentBottomRight.z; r3.w <- currentBottomRight.w

#line 167
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r2.zwzz, t0.xyzw, s1, l(0.000000)  // r4.x <- currentBottomCenter.x; r4.y <- currentBottomCenter.y; r4.z <- currentBottomCenter.z; r4.w <- currentBottomCenter.w

#line 169
min r5.xyzw, r3.xyzw, r4.xyzw

#line 170
max r3.xyzw, r3.xyzw, r4.xyzw

#line 166
add r2.zw, -r1.zzzw, r2.zzzw

#line 165
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r2.xyxx, t0.xyzw, s1, l(0.000000)  // r4.x <- currentMiddleRight.x; r4.y <- currentMiddleRight.y; r4.z <- currentMiddleRight.z; r4.w <- currentMiddleRight.w

#line 166
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.zwzz, t0.xyzw, s1, l(0.000000)  // r2.x <- currentBottomLeft.x; r2.y <- currentBottomLeft.y; r2.z <- currentBottomLeft.z; r2.w <- currentBottomLeft.w

#line 169
min r5.xyzw, r5.xyzw, r2.xyzw

#line 170
max r2.xyzw, r3.xyzw, r2.xyzw
max r2.xyzw, r2.xyzw, r4.xyzw

#line 169
min r3.xyzw, r4.xyzw, r5.xyzw

#line 156
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t0.xyzw, s1, l(0.000000)  // r4.x <- current.x; r4.y <- current.y; r4.z <- current.z; r4.w <- current.w

#line 169
min r3.xyzw, r3.xyzw, r4.xyzw

#line 163
add r5.xyzw, -r1.xyzw, v1.xyxy
sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t0.xyzw, s1, l(0.000000)  // r6.x <- currentMiddleLeft.x; r6.y <- currentMiddleLeft.y; r6.z <- currentMiddleLeft.z; r6.w <- currentMiddleLeft.w

#line 169
min r3.xyzw, r3.xyzw, r6.xyzw

#line 162
add r1.xy, r1.zwzz, r5.xyxx

#line 160
add r1.zw, -r1.zzzw, r5.xxxy

#line 161
sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t0.xyzw, s1, l(0.000000)  // r5.x <- currentTopCenter.x; r5.y <- currentTopCenter.y; r5.z <- currentTopCenter.z; r5.w <- currentTopCenter.w

#line 160
sample_l_indexable(texture2d)(float,float,float,float) r7.xyzw, r1.zwzz, t0.xyzw, s1, l(0.000000)  // r7.x <- currentTopLeft.x; r7.y <- currentTopLeft.y; r7.z <- currentTopLeft.z; r7.w <- currentTopLeft.w

#line 162
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xyzw, s1, l(0.000000)  // r1.x <- currentTopRight.x; r1.y <- currentTopRight.y; r1.z <- currentTopRight.z; r1.w <- currentTopRight.w

#line 169
min r3.xyzw, r3.xyzw, r1.xyzw
min r3.xyzw, r3.xyzw, r5.xyzw
min r3.xyzw, r3.xyzw, r7.xyzw  // r3.x <- currentMin.x; r3.y <- currentMin.y; r3.z <- currentMin.z; r3.w <- currentMin.w

#line 170
max r2.xyzw, r2.xyzw, r4.xyzw
max r2.xyzw, r2.xyzw, r6.xyzw
max r1.xyzw, r1.xyzw, r2.xyzw
max r1.xyzw, r1.xyzw, r5.xyzw
max r1.xyzw, r1.xyzw, r7.xyzw  // r1.x <- currentMax.x; r1.y <- currentMax.y; r1.z <- currentMax.z; r1.w <- currentMax.w

#line 172
add r2.xyzw, r1.xyzw, r3.xyzw

#line 173
mad r3.xyzw, -r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), r3.xyzw

#line 174
mad r1.xyzw, -r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), r1.xyzw

#line 172
mul r2.xyzw, r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // r2.x <- center.x; r2.y <- center.y; r2.z <- center.z; r2.w <- center.w

#line 174
mad r1.xyzw, r1.xyzw, cb0[5].yyyy, r2.xyzw  // r1.x <- currentMax.x; r1.y <- currentMax.y; r1.z <- currentMax.z; r1.w <- currentMax.w

#line 173
mad r2.xyzw, r3.xyzw, cb0[5].yyyy, r2.xyzw  // r2.x <- currentMin.x; r2.y <- currentMin.y; r2.z <- currentMin.z; r2.w <- currentMin.w

#line 175
max r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r1.xyzw, r0.xyzw  // r0.x <- previous.x; r0.y <- previous.y; r0.z <- previous.z; r0.w <- previous.w

#line 176
add r0.xyzw, -r4.xyzw, r0.xyzw
mad o0.xyzw, cb0[5].xxxx, r0.xyzw, r4.xyzw

#line 185
ret 
// Approximately 59 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    float TemporalResponse_id74;
    float TemporalScale_id75;
    float4x4 IVP_id76;
    float4x4 prevVP_id77;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float2 UvToClip_id4(float2 uv)
{
    return uv * float2(2, -2) + float2(-1, 1);
}
float3 ComputeWorldPosition_id5(float2 uv, float rawDepth)
{
    float4 clipPos = float4(UvToClip_id4(uv), rawDepth, 1);
    float4 pos = mul(clipPos, IVP_id76);
    return pos.xyz / pos.w;
}
float2 ClipToUv_id3(float2 clipPos)
{
    return clipPos * float2(0.5, -0.5) + float2(0.5, 0.5);
}
float3 SampleWorldPosition_id6(float2 uv)
{
    float rawDepth = Texture2_id18.SampleLevel(PointSampler_id43, uv, 0).r;
    return ComputeWorldPosition_id5(uv, rawDepth);
}
float4 Shading_id7(inout PS_STREAMS streams)
{
    float2 uv = streams.TexCoord_id62;
    float3 posWS = SampleWorldPosition_id6(uv);
    float4 prevSS = mul(float4(posWS, 1), prevVP_id77);
    prevSS.xy /= prevSS.w;
    float2 prevUV = ClipToUv_id3(prevSS.xy);
    float4 current = Texture0_id14.SampleLevel(LinearSampler_id44, uv, 0);
    float4 previous = Texture1_id16.SampleLevel(LinearSampler_id44, prevUV, 0);
    float2 du = float2(Texture0TexelSize_id15.x, 0.0);
    float2 dv = float2(0.0, Texture0TexelSize_id15.y);
    float4 currentTopLeft = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy - dv - du, 0);
    float4 currentTopCenter = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy - dv, 0);
    float4 currentTopRight = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy - dv + du, 0);
    float4 currentMiddleLeft = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy - du, 0);
    float4 currentMiddleCenter = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy, 0);
    float4 currentMiddleRight = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy + du, 0);
    float4 currentBottomLeft = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy + dv - du, 0);
    float4 currentBottomCenter = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy + dv, 0);
    float4 currentBottomRight = Texture0_id14.SampleLevel(LinearSampler_id44, uv.xy + dv + du, 0);
    float4 currentMin = min(currentTopLeft, min(currentTopCenter, min(currentTopRight, min(currentMiddleLeft, min(currentMiddleCenter, min(currentMiddleRight, min(currentBottomLeft, min(currentBottomCenter, currentBottomRight))))))));
    float4 currentMax = max(currentTopLeft, max(currentTopCenter, max(currentTopRight, max(currentMiddleLeft, max(currentMiddleCenter, max(currentMiddleRight, max(currentBottomLeft, max(currentBottomCenter, currentBottomRight))))))));
    float scale = TemporalScale_id75;
    float4 center = (currentMin + currentMax) * 0.5f;
    currentMin = (currentMin - center) * scale + center;
    currentMax = (currentMax - center) * scale + center;
    previous = clamp(previous, currentMin, currentMax);
    return lerp(current, previous, TemporalResponse_id74);
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id7(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
