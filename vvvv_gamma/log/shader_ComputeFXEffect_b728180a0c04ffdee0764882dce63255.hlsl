/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin InitBuffer_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 48]
@C    gridSize_id12 => SdfUtils.gridSize
@C    gridCenter_id13 => SdfUtils.gridCenter
@C    cellCount_id14 => SdfUtils.cellCount
@C    cellSize_id15 => SdfUtils.cellSize
***************************
******  Resources    ******
***************************
@R    SDFBuffer_id11 => SdfUtils.SDFBuffer [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    InitBuffer_ComputeFX => d476ff4b955d1a12b7ec69aeb2b34dc7
@S    SdfUtils => 0c43dc469c93d94288b74a43e650ed91
***************************
*****     Stages      *****
***************************
@G    Compute => e168b0adf9a81dc98def4ffc8b74ac5d
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   float3 gridSize_id12;              // Offset:    0 Size:    12 [unused]
//   float3 gridCenter_id13;            // Offset:   16 Size:    12 [unused]
//   float3 cellCount_id14;             // Offset:   32 Size:    12
//   float cellSize_id15;               // Offset:   44 Size:     4 [unused]
//
// }
//
// Resource bind info for SDFBuffer_id11
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SDFBuffer_id11                        UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_uav_structured u0, 4
dcl_input vThreadID.x
dcl_temps 1
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 37 "C:\Program Files\vvvv\vvvv_gamma_2022.5.0-0485-g8f46e4a34a\log\shader_ComputeFXEffect_b728180a0c04ffdee0764882dce63255.hlsl"
mul r0.x, cb0[2].y, cb0[2].x
mul r0.x, r0.x, cb0[2].z
ftou r0.x, r0.x  // r0.x <- nCells

#line 40
ult r0.x, vThreadID.x, r0.x
if_nz r0.x
  store_structured u0.x, vThreadID.x, l(0), l(-0.000000)
endif 

#line 55
ret 
// Approximately 8 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    float3 gridSize_id12;
    float3 gridCenter_id13;
    float3 cellCount_id14;
    float cellSize_id15;
};
RWStructuredBuffer<uint> SDFBuffer_id11;
uint FloatFlip3_id4(float fl)
{
    uint f = asuint(fl);
    return (f << 1) | (f >> 31);
}
void Compute_id14(inout CS_STREAMS streams)
{
    uint cellIndex = streams.DispatchThreadId_id1.x;
    uint nCells = cellCount_id14.x * cellCount_id14.y * cellCount_id14.z;
    if (cellIndex >= nCells)
        return;
    SDFBuffer_id11[cellIndex] = FloatFlip3_id4(1e+10);
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id14(streams);
}
