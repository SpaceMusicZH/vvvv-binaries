<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.UI.Core</name>
    </assembly>
    <members>
        <member name="M:System.Drawing.DrawingExtensions.GetBounds(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
            Returns the bounds of the given point cloud.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetBounds(System.Collections.Generic.IEnumerable{System.Drawing.RectangleF})">
            <summary>
            Returns the bounds of the given rectangle cloud.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Area(System.Drawing.SizeF)">
            <summary>
            Returns the area.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetCenter(System.Drawing.RectangleF)">
            <summary>
            Returns the center of this RectangleF.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetOnePixelRectangleForCenter(System.Drawing.PointF)">
            <summary>
            Returns a rectangle for given center position and 1 pixel size
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetRectangleForCenterAndSize(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Returns a rectangle for given center position and size.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.ToRectangle(System.Drawing.RectangleF)">
            <summary>
            Returns a <see cref="T:System.Drawing.Rectangle">Rectangle</see> by casting the float components to integer.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.ToPoint(System.Drawing.PointF)">
            <summary>
            Returns a <see cref="T:System.Drawing.Point">Point</see> by casting the float components to integer.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Plus(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Translates a given <see cref="T:System.Drawing.PointF">p1</see> by a specified <see cref="T:System.Drawing.PointF">p2</see>.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Minus(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Translates a given <see cref="T:System.Drawing.PointF">p1</see> by a specified <see cref="T:System.Drawing.PointF">p2</see>.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetDistanceTo(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Returns the distance to another point.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetSquaredDistanceTo(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Returns the squared distance to another point. Good for comparisons.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.Normalize(System.Drawing.PointF)">
            <summary>
            Normalizes the length
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.GetDistanceTo(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Returns the distance to another point.
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.TransformPoint(System.Drawing.Drawing2D.Matrix,System.Drawing.PointF)">
            <summary>
            Applies the transformation to a PointF
            </summary>
            <param name="t">A Matrix</param>
            <param name="p">The point to transform by the matrix t</param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.TransformRectangle(System.Drawing.Drawing2D.Matrix,System.Drawing.Rectangle)">
            <summary>
            Applies the geometric transform represented by this Matrix to the
            given rectangle.
            </summary>
            <param name="t">A Matrix</param>
            <param name="rect">The rectangle to transform.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="M:System.Drawing.DrawingExtensions.TransformRectangle(System.Drawing.Drawing2D.Matrix,System.Drawing.RectangleF)">
            <summary>
            Applies the geometric transform represented by this Matrix to the
            given rectangle.
            </summary>
            <param name="t">A Matrix</param>
            <param name="rect">The rectangle to transform.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="T:System.Drawing.FontExtentions">
            <summary>
            Calculate exact sizes of strings
            </summary>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetAscentPixels(System.Drawing.Font)">
            <summary>
            Calculates the ascent in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetDescentPixels(System.Drawing.Font)">
            <summary>
            Calculates the descent in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetLineSpacingPixels(System.Drawing.Font)">
            <summary>
            Calculates the distance from base line to base line of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:System.Drawing.FontExtentions.GetCellHeightPixels(System.Drawing.Font)">
            <summary>
            Calculates the maximum height in pixels of this font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="T:VL.UI.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VL.UI.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VL.UI.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VL.UI.Core.SettingsManager.DefaultStylesheet">
            <summary>
            Used by <see cref="T:VL.Core.Viewer.Styles"/> class to compute final stylesheet. Usual values are either "dark.css" or "light.css".
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Constants">
            <summary>
            UI constants.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Dialogs">
            <summary>
            Texts for Dialogs.
            1) Tell the user what happened
            2) Explain to them why it is a problem
            3) Suggest what they can do to fix it
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.VMouseEventArgs.Location">
            <summary>
            Location in view Space, relative to the control (ie. where topleft 0/0 corresponds to the Controls 0/0)
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.VMouseEventArgs.WorldLocation">
            <summary>
            Location in canvas space, corrected for zoom and pan
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.IMouseEventHandler">
            <summary>
            Mouse event handler interface
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.IKeyEventHandler">
            <summary>
            Keyboard event handler interface
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.EndWith(VL.Core.Viewer.IMouseEventHandler,System.Action{VL.Core.Viewer.VMouseEventArgs})">
            <summary>
            Calls the given action once this handler returned null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ContinueWith(VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.IMouseEventHandler)">
            <summary>
            Creates a handler which will be returned once this handler returned null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ContinueWith(VL.Core.Viewer.IMouseEventHandler,System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will be returned and called once this handler returned null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.InParallelWith(VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.IMouseEventHandler)">
            <summary>
            Creates a handler which runs both this and the given handler in parallel.
            As soon as one of them returns null the other one will be returned.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.Repeat(System.Func{VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will repeat the handler acquired through the given factory method.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})">
            <summary>
            Creates a handler which will be alive as long as the given condition returns true.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnDown(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse down was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnMove(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse move was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnUp(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse up was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnWheel(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse wheel change was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.WhileAny(System.Func{VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation as long as any mouse actions are observed.
            In order to stay in the loop the continuation needs to return the given handler.
            In order to exit the loop the continuation needs to return null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.WhileMove(System.Func{VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation as long as mouse moves are observed.
            In order to stay in the move loop the continuation needs to return the given handler.
            In order to exit the move loop the continuation needs to return null.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnClick(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse click was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnDoubleClick(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once a mouse double click was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.OnDragStart(System.Func{VL.Core.Viewer.VMouseEventArgs,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Creates a handler which will call the given continuation once the start of a mouse drag was observed.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.Drag(System.Action{VL.Core.Viewer.VMouseEventArgs,System.Drawing.PointF})">
            <summary>
            Creates a handler which will call the given action as long as the mouse moves. 
            Use together with OnDragStart and EndWith in order to setup proper initialization and finalization code.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.Select(VL.Core.Viewer.VMouseEventArgs,System.Action{VL.Core.Viewer.VMouseEventArgs,System.Drawing.RectangleF})">
            <summary>
            Creates a handler which will call the given action as long as the mouse moves.
            Use together with OnDragStart and EndWith in order to setup proper initialization and finalization code.
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ForeachWheel(System.Action{VL.Core.Viewer.VMouseEventArgs})">
            <summary>
            Creates a handler which reacts to each mouse wheel event.
            </summary>
            <remarks>
            To abort the handler use <see cref="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ForeachClick(System.Action{VL.Core.Viewer.VMouseEventArgs})">
            <summary>
            Creates a handler which reacts to each mouse click event.
            </summary>
            <remarks>
            To abort the handler use <see cref="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:VL.Core.Viewer.Handler.ForeachDrag(System.Func{VL.Core.Viewer.VMouseEventArgs,System.Action{VL.Core.Viewer.VMouseEventArgs,System.Drawing.PointF}})">
            <summary>
            Creates a handler which reacts to each mouse drag event.
            </summary>
            <remarks>
            To abort the handler use <see cref="M:VL.Core.Viewer.Handler.AsLongAs(VL.Core.Viewer.IMouseEventHandler,System.Func{System.Boolean})"/>.
            </remarks>
        </member>
        <member name="M:VL.Core.Viewer.MouseEventHandlerExtensions.IsHandlerOfType``1(VL.Core.Viewer.IMouseEventHandler)">
            <summary>
            Determines whether the handler or any of the parallel handlers is of the given type,
            checks parallel handlers recursively
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.MouseEventHandlerExtensions.CallRecursively(VL.Core.Viewer.IMouseEventHandler,System.Func{VL.Core.Viewer.IMouseEventHandler,VL.Core.Viewer.IMouseEventHandler})">
            <summary>
            Calls a handler function recursively on a handler, paralell handlers and continuation handler 
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.FrameRoot">
            <summary>
            The root element to add frames.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.RegionRoot">
            <summary>
            The root element to add regions.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.SolidRoot">
            <summary>
            The root element to add graph elements.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.LinkRoot">
            <summary>
            The root element to add links.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.FrameViewsRoot">
            <summary>
            The root element to add frames in viewspace.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.OverlayRoot">
            <summary>
            The root element to add overlays.
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.Color">
            <summary>
            Get/Set the background color of the canvas
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.Camera">
            <summary>
            Get the camera matrix, use PanCamera or ZoomCamera to change the view matrix
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.OverlayCamera">
            <summary>
            Get the overlaycamera matrix, use ZoomOverlay to change the view matrix
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.PanCamera(System.Drawing.PointF)">
            <summary>
            Pans the camera by the given delta
            </summary>
            <param name="delta">Offset in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.PanTo(System.Drawing.PointF)">
            <summary>
            Pans the canvas to the given point
            </summary>
            <param name="target">Target in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomCamera(System.Single,System.Drawing.PointF)">
            <summary>
            Scales the camera by the given scale factor around a center
            </summary>
            <param name="scale">scale factor, relative to previous scaling</param>
            <param name="scaleCenter">center of scaling in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomTo(System.Single,System.Drawing.PointF)">
            <summary>
            Sets the camera zoom factor to the given value
            </summary>
            <param name="zoom">absolut zoom factor</param>
            <param name="target">center of zoom in canvas coordinate system</param>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomOverlay(System.Single)">
            <summary>
            Applies a scaling factor to the overlay layer
            </summary>
            <param name="scale">scale factor, relative to previous scaling</param>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.ZoomFactor">
            <summary>
            Gets the actual zoomfactor of the camera
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.Clear">
            <summary>
            Remove all graph elements from the canvas
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.ICanvas.Draw(System.Boolean)">
            <summary>
            Redraws the dirty regions of the canvas.
            </summary>
            <param name="force">Forces an immediate redraw</param>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.ICanvas.ParentHandle">
            <summary>
            Window Handle of the Control hosting the canvas
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.GraphicalEditor.TextMode">
            <summary>
            Default: text is drawn as is, hard clipped at Size bounds
            Wordwrap: text is wordwrapped at Size.Width and hard clipped at Size.Height
            EndEllipsis: text is drawn as is, showing ellipsis for lines exceeding Size.Width and hard clipped at Size.Height
            PathEllipsis: text is drawn as is, showing path-ellipsis for lines exceeding Size.Width and hard clipped at Size.Height
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.LineHeight">
            <summary>
            Returns the line height of the given font
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.Size">
            <summary>
            Text is clipped to the given size. Reading Size does not reflect the TextExtents
            If no Size is given, Text is drawn as is
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.TextMode">
            <summary>
            Works in connection with Size. For Modes Wordwrap, EndEllipsis and PathEllipsis Size.Width is taken into account
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.CaptionExtents">
            <summary>
            Extents of the caption text only influenced by Font, but not TextMode and Size
            </summary>
        </member>
        <member name="P:VL.Core.Viewer.GraphicalEditor.IText.CaptionLineCount">
            <summary>
            Number of lines in caption text, not influenced by wrapping via Textmode and Size
            </summary>
        </member>
        <member name="M:VL.Core.Viewer.GraphicalEditor.IText.GetHeightOfTextWrappedAtWidth(System.Single)">
            <summary>
            Returns the height of the text it would need if wrapped at the given width
            </summary>
            <returns></returns>
        </member>
        <member name="T:VL.Core.Viewer.Icons">
            <summary>
            UI icons.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Shortcuts">
            <summary>
            Description of Shortcuts.
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes">
            <summary>
            The set of valid MapTypes used in MapVirtualKey
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VK_TO_VSC">
            <summary>
            uCode is a virtual-key code and is translated into a scan code.
            If it is a virtual-key code that does not distinguish between left- and
            right-hand keys, the left-hand scan code is returned.
            If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VSC_TO_VK">
            <summary>
            uCode is a scan code and is translated into a virtual-key code that
            does not distinguish between left- and right-hand keys. If there is no
            translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VK_TO_CHAR">
            <summary>
            uCode is a virtual-key code and is translated into an unshifted
            character value in the low-order word of the return value. Dead keys (diacritics)
            are indicated by setting the top bit of the return value. If there is no
            translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VSC_TO_VK_EX">
            <summary>
            Windows NT/2000/XP: uCode is a scan code and is translated into a
            virtual-key code that distinguishes between left- and right-hand keys. If
            there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:VL.Core.Viewer.Shortcuts.MapVirtualKeyMapTypes.MAPVK_VK_TO_VSC_EX">
            <summary>
            Not currently documented
            </summary>
        </member>
        <member name="T:VL.Core.Viewer.Tooltips">
            <summary>
            Texts for Tooltips of visual elements.
            </summary>
        </member>
    </members>
</doc>
