//source: https://shaderbits.com/blog/uv-dilation
[Category("Filter")]
[Summary("Dilation for positional and normal maps. Enlarges only into black areas.")]
[Tags("morphology")]
shader UVDilate_TextureFX : FilterBase
{
    int MaxSteps = 10; // Pixel Radius to search

    float4 Filter(float4 tex0col)
    {
        float texelsize = 1 / ViewSize;
        float mindist = 10000000;
        float2 offsets[8] = {float2(-1,0), float2(1,0), float2(0,1), float2(0,-1), float2(-1,1), float2(1,1), float2(1,-1), float2(-1,-1)};

        float3 sample = InTex0();
        float3 curminsample = sample;
        float2 uv = streams.TexCoord;

        if(sample.x == 0 && sample.y == 0 && sample.z == 0)
        {
            int i = 0;
            while(i < MaxSteps)
            { 
                i++;
                int j = 0;
                while (j < 8)
                {
                    float2 curUV = uv + offsets[j] * texelsize * i;
                    float3 offsetsample = Texture0.SampleLevel(Sampler0, curUV, 0);

                    if(offsetsample.x != 0 || offsetsample.y != 0 || offsetsample.z != 0)
                    {
                        float curdist = length(uv - curUV);

                        if (curdist < mindist)
                        {
                            float2 projectUV = curUV + offsets[j] * texelsize * i * 0.25;
                            float3 direction = Texture0.SampleLevel(Sampler0, projectUV, 0);
                            mindist = curdist;

                            if(direction.x != 0 || direction.y != 0 || direction.z != 0)
                            {
                                float3 delta = offsetsample - direction;
                                curminsample = offsetsample + delta * 4;
                            }

                           else
                            {
                                curminsample = offsetsample;
                            }
                        }
                    }
                    j++;
                }
            }
        }

        return float4(curminsample, tex0col.a);
    }
};