<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Silk.NET.Maths</name>
    </assembly>
    <members>
        <member name="T:Silk.NET.Maths.Box2D`1">
            <summary>
            A structure representing a Box2D with a <see cref="F:Silk.NET.Maths.Box2D`1.Min"/> and <see cref="F:Silk.NET.Maths.Box2D`1.Max"/>
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Box2D`1.Min">
            <summary>
            The min.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Box2D`1.Max">
            <summary>
            The max.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.#ctor(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a Box2D from a min and a max
            </summary>
            <param name="min">The min of the box.</param>
            <param name="max">The max of the box.</param>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.#ctor(Silk.NET.Maths.Vector2D{`0},`0,`0)">
            <summary>
            Constructs a Box2D from a min and components of a max
            </summary>
            <param name="min">The min of the box.</param>
            <param name="maxX">The max X component of the box.</param>
            <param name="maxY">The max Y component of the box.</param>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.#ctor(`0,`0,Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a Box2D from components of a min and a max
            </summary>
            <param name="minX">The min X component of the box.</param>
            <param name="minY">The min Y component of the box.</param>
            <param name="max">The max of the box.</param>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Constructs a Box2D from components of a min and components of a max
            </summary>
            <param name="minX">The min X component of the box.</param>
            <param name="minY">The min Y component of the box.</param>
            <param name="maxX">The max X component of the box.</param>
            <param name="maxY">The max Y component of the box.</param>
        </member>
        <member name="P:Silk.NET.Maths.Box2D`1.Center">
            <summary>
            The center of this box.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Box2D`1.Size">
            <summary>
            The size of this box.
            When setting the box is scaled about its center.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.Contains(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates whether this box contains a point.
            </summary>
            <param name="point">The point.</param>
            <returns>True if this box contains the point; False otherwise.</returns>
            <remarks>This does consider a point on the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.Contains(Silk.NET.Maths.Box2D{`0})">
            <summary>
            Calculates whether this box contains another box
            </summary>
            <param name="other">The box.</param>
            <returns>True if this box contains the given box; False otherwise.</returns>
            <remarks>This does consider a box that touches the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.GetDistanceToNearestEdge(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates the distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.GetTranslated(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates this box translated by a given distance.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.GetScaled(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a new box scaled by the given scale around the given anchor.
            </summary>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.GetScaled``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a new box scaled by the given scale around the given anchor.
            </summary>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <typeparam name="TScale">The type of the scale.</typeparam>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.GetInflated(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a box inflated to contain the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.Equals(Silk.NET.Maths.Box2D{`0})">
            <summary>Returns a boolean indicating whether the given Box2D is equal to this Box2D instance.</summary>
            <param name="other">The Box2D to compare this instance to.</param>
            <returns>True if the other Box2D is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Box2D instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Box2D; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.op_Equality(Silk.NET.Maths.Box2D{`0},Silk.NET.Maths.Box2D{`0})">
            <summary>Returns a boolean indicating whether the two given Box2s are equal.</summary>
            <param name="value1">The first Box2D to compare.</param>
            <param name="value2">The second Box2D to compare.</param>
            <returns>True if the Box2s are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.op_Inequality(Silk.NET.Maths.Box2D{`0},Silk.NET.Maths.Box2D{`0})">
            <summary>Returns a boolean indicating whether the two given Box2s are not equal.</summary>
            <param name="value1">The first Box2D to compare.</param>
            <param name="value2">The second Box2D to compare.</param>
            <returns>True if the Box2s are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box2D`1.As``1">
            <summary>
            Returns this box casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted box</returns>
        </member>
        <member name="T:Silk.NET.Maths.Box3D`1">
            <summary>
            A structure representing a Box3D with a <see cref="F:Silk.NET.Maths.Box3D`1.Min"/> and a` <see cref="F:Silk.NET.Maths.Box3D`1.Max"/>
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Box3D`1.Min">
            <summary>
            The min.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Box3D`1.Max">
            <summary>
            The max.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.#ctor(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a Box3D from a min and a max
            </summary>
            <param name="min">The min of the box.</param>
            <param name="max">The max of the box.</param>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.#ctor(Silk.NET.Maths.Vector3D{`0},`0,`0,`0)">
            <summary>
            Constructs a Box3D from a min and components of a max
            </summary>
            <param name="min">The min of the box.</param>
            <param name="maxX">The max X component of the box.</param>
            <param name="maxY">The max Y component of the box.</param>
            <param name="maxZ">The max Z component of the box.</param>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.#ctor(`0,`0,`0,Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a Box3D from components of a min and a max
            </summary>
            <param name="minX">The min X component of the box.</param>
            <param name="minY">The min Y component of the box.</param>
            <param name="minZ">The min Z component of the box.</param>
            <param name="max">The max of the box.</param>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>
            Constructs a Box3D from components of a min and a max
            </summary>
            <param name="minX">The min X component of the box.</param>
            <param name="minY">The min Y component of the box.</param>
            <param name="minZ">The min Z component of the box.</param>
            <param name="maxX">The max X component of the box.</param>
            <param name="maxY">The max Y component of the box.</param>
            <param name="maxZ">The max Z component of the box.</param>
        </member>
        <member name="P:Silk.NET.Maths.Box3D`1.Center">
            <summary>
            The center of this box.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Box3D`1.Size">
            <summary>
            The size of this box.
            When setting the box is scaled about its center.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.Contains(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates whether this box contains a point.
            </summary>
            <param name="point">The point.</param>
            <returns>True if this box contains the point; False otherwise.</returns>
            <remarks>This does consider a point on the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.Contains(Silk.NET.Maths.Box3D{`0})">
            <summary>
            Calculates whether this box contains another box
            </summary>
            <param name="other">The box.</param>
            <returns>True if this box contains the given box; False otherwise.</returns>
            <remarks>This does consider a box that touches the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.GetDistanceToNearestEdge(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates the distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.GetTranslated(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates this box translated by a given distance.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.GetScaled(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a new box scaled by the given scale around the given anchor.
            </summary>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.GetScaled``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a new box scaled by the given scale around the given anchor.
            </summary>
            <typeparam name="TScale">The type of the scale.</typeparam>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.GetInflated(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a box inflated to contain the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>The calculated box.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.Equals(Silk.NET.Maths.Box3D{`0})">
            <summary>Returns a boolean indicating whether the given Box3D is equal to this Box3D instance.</summary>
            <param name="other">The Box3D to compare this instance to.</param>
            <returns>True if the other Box3D is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Box3D instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Box3D; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.op_Equality(Silk.NET.Maths.Box3D{`0},Silk.NET.Maths.Box3D{`0})">
            <summary>Returns a boolean indicating whether the two given Box3s are equal.</summary>
            <param name="value1">The first Box3D to compare.</param>
            <param name="value2">The second Box3D to compare.</param>
            <returns>True if the Box3s are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.op_Inequality(Silk.NET.Maths.Box3D{`0},Silk.NET.Maths.Box3D{`0})">
            <summary>Returns a boolean indicating whether the two given Box3s are not equal.</summary>
            <param name="value1">The first Box3D to compare.</param>
            <param name="value2">The second Box3D to compare.</param>
            <returns>True if the Box3s are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Box3D`1.As``1">
            <summary>
            Returns this box casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted box</returns>
        </member>
        <member name="T:Silk.NET.Maths.Circle`1">
            <summary>
            A structure representing a circle using a <see cref="F:Silk.NET.Maths.Circle`1.Center"/> and a <see cref="F:Silk.NET.Maths.Circle`1.Radius"/>.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Circle`1.Center">
            <summary>
            The center.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Circle`1.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.#ctor(Silk.NET.Maths.Vector2D{`0},`0)">
            <summary>
            Constructs a circle from a <paramref name="center"/> and a <paramref name="radius"/>
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.#ctor(`0,`0,`0)">
            <summary>
            Constructs a circle from components of a center and a <paramref name="radius"/>
            </summary>
            <param name="centerX">The X component of the center.</param>
            <param name="centerY">The Y component of the center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="P:Silk.NET.Maths.Circle`1.Diameter">
            <summary>
            The diameter.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Circle`1.SquaredRadius">
            <summary>
            The radius squared.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Circle`1.Circumference">
            <summary>
            The circumference.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.Contains(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates whether this circle contains a point.
            </summary>
            <param name="point">The point.</param>
            <returns>True if this circle contains the point; False otherwise.</returns>
            <remarks>This does consider a point on the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.Contains(Silk.NET.Maths.Circle{`0})">
            <summary>
            Calculates whether this circle contains another circle
            </summary>
            <param name="other">The circle.</param>
            <returns>True if this circle contains the given circle; False otherwise.</returns>
            <remarks>This does consider a circle that touches the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.GetDistanceToNearestEdgeSquared(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates the squared distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.GetDistanceToNearestEdge(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates the distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.GetTranslated(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a new circle translated by a given distance.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The calculated cube.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.GetInflated(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a circle inflated to contain the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>The circle.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.Equals(Silk.NET.Maths.Circle{`0})">
            <summary>Returns a boolean indicating whether the given Circle is equal to this Circle instance.</summary>
            <param name="other">The Circle to compare this instance to.</param>
            <returns>True if the other Circle is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Circle instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Circle; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.op_Equality(Silk.NET.Maths.Circle{`0},Silk.NET.Maths.Circle{`0})">
            <summary>Returns a boolean indicating whether the two given Circles are equal.</summary>
            <param name="value1">The first Circles to compare.</param>
            <param name="value2">The second Circles to compare.</param>
            <returns>True if the Circles are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.op_Inequality(Silk.NET.Maths.Circle{`0},Silk.NET.Maths.Circle{`0})">
            <summary>Returns a boolean indicating whether the two given Circles are not equal.</summary>
            <param name="value1">The first Circle to compare.</param>
            <param name="value2">The second Circle to compare.</param>
            <returns>True if the Circles are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Circle`1.As``1">
            <summary>
            Returns this circle casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted circle</returns>
        </member>
        <member name="T:Silk.NET.Maths.Cube`1">
            <summary>
            A structure representing a Cube with an <see cref="F:Silk.NET.Maths.Cube`1.Origin"/> and <see cref="F:Silk.NET.Maths.Cube`1.Size"/>
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Cube`1.Origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Cube`1.Size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.#ctor(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a Cube from an origin and a size
            </summary>
            <param name="origin">The origin of the cube.</param>
            <param name="size">The size of the cube.</param>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.#ctor(Silk.NET.Maths.Vector3D{`0},`0,`0,`0)">
            <summary>
            Constructs a Cube from an origin and components of a size
            </summary>
            <param name="origin">The origin of the cube.</param>
            <param name="sizeX">The X component of the size of the cube.</param>
            <param name="sizeY">The Y component of the size of the cube.</param>
            <param name="sizeZ">The Z component of the size of the cube.</param>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.#ctor(`0,`0,`0,Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a Cube from components of an origin and a size
            </summary>
            <param name="originX">The X component of the origin of the cube.</param>
            <param name="originY">The Y component of the origin of the cube.</param>
            <param name="originZ">The Z component of the origin of the cube.</param>
            <param name="size">The size of the cube.</param>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>
            Constructs a Cube from components of an origin and components of a size
            </summary>
            <param name="originX">The X component of the origin of the cube.</param>
            <param name="originY">The Y component of the origin of the cube.</param>
            <param name="originZ">The Z component of the origin of the cube.</param>
            <param name="sizeX">The X component of the size of the cube.</param>
            <param name="sizeY">The Y component of the size of the cube.</param>
            <param name="sizeZ">The Z component of the size of the cube.</param>
        </member>
        <member name="P:Silk.NET.Maths.Cube`1.Center">
            <summary>
            The center of this cube.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Cube`1.Max">
            <summary>
            The Maximum point of this cube.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Cube`1.HalfSize">
            <summary>
            Half the size of this cube.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.Contains(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates whether this cube contains a point.
            </summary>
            <param name="point">The point.</param>
            <returns>True if this cube contains the point; False otherwise.</returns>
            <remarks>This does consider a point on the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.Contains(Silk.NET.Maths.Cube{`0})">
            <summary>
            Calculates whether this cube contains another cube
            </summary>
            <param name="other">The cube.</param>
            <returns>True if this cube contains the given cube; False otherwise.</returns>
            <remarks>This does consider a cube that touches the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.GetDistanceToNearestEdge(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates the distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.GetTranslated(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a new cube translated by a given distance.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The calculated cube.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.GetScaled(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a new cube scaled by the given scale around the given anchor.
            </summary>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <returns>The calculated cube.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.GetScaled``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a new cube scaled by the given scale around the given anchor.
            </summary>
            <typeparam name="TScale">The type of the scale.</typeparam>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <returns>The calculated cube.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.GetInflated(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a cube inflated to contain the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>The cube.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.Equals(Silk.NET.Maths.Cube{`0})">
            <summary>Returns a boolean indicating whether the given Cube is equal to this Cube instance.</summary>
            <param name="other">The Cube to compare this instance to.</param>
            <returns>True if the other Cube is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Cube instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Cube; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.op_Equality(Silk.NET.Maths.Cube{`0},Silk.NET.Maths.Cube{`0})">
            <summary>Returns a boolean indicating whether the two given Cubes are equal.</summary>
            <param name="value1">The first Cube to compare.</param>
            <param name="value2">The second Cube to compare.</param>
            <returns>True if the Cubes are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.op_Inequality(Silk.NET.Maths.Cube{`0},Silk.NET.Maths.Cube{`0})">
            <summary>Returns a boolean indicating whether the two given Cubes are not equal.</summary>
            <param name="value1">The first Cube to compare.</param>
            <param name="value2">The second Cube to compare.</param>
            <returns>True if the Cubes are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Cube`1.As``1">
            <summary>
            Returns this circle casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted cube</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix2X2`1">
            <summary>A structure encapsulating a 2x2 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix2X2`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix2X2`1.Row2">
            <summary>
            Row 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="y">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.#ctor(`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.#ctor(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> from the given rows.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> from the given Matrix4x3.</summary>
            <param name="value">The source Matrix4x3.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X2`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Addition(Silk.NET.Maths.Matrix2X2{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Equality(Silk.NET.Maths.Matrix2X2{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Inequality(Silk.NET.Maths.Matrix2X2{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Multiply(Silk.NET.Maths.Matrix2X2{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Multiply(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Multiply(Silk.NET.Maths.Matrix2X2{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Subtraction(Silk.NET.Maths.Matrix2X2{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_UnaryNegation(Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.GetDeterminant">
            <summary>Calculates the determinant of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.Equals(Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.op_Explicit(Silk.NET.Maths.Matrix2X2{`0})~Silk.NET.Maths.Matrix2X2{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix2X2">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix2X2`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Add``1(Silk.NET.Maths.Matrix2X2{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Multiply``1(Silk.NET.Maths.Matrix2X2{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Multiply``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Multiply``1(Silk.NET.Maths.Matrix2X2{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Multiply``1(Silk.NET.Maths.Matrix2X2{``0},``0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Multiply``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Negate``1(Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Subtract``1(Silk.NET.Maths.Matrix2X2{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X2.Lerp``1(Silk.NET.Maths.Matrix2X2{``0},Silk.NET.Maths.Matrix2X2{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix2X3`1">
            <summary>A structure encapsulating a 2x3 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix2X3`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix2X3`1.Row2">
            <summary>
            Row 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.Column3">
            <summary>
            Column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.M13">
            <summary>Value at row 1, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.M23">
            <summary>Value at row 2, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="y">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.#ctor(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> from the given rows.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X3`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Addition(Silk.NET.Maths.Matrix2X3{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Equality(Silk.NET.Maths.Matrix2X3{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Inequality(Silk.NET.Maths.Matrix2X3{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Multiply(Silk.NET.Maths.Matrix2X3{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Multiply(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Multiply(Silk.NET.Maths.Matrix2X2{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Multiply(Silk.NET.Maths.Matrix2X3{`0},Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Multiply(Silk.NET.Maths.Matrix2X3{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Subtraction(Silk.NET.Maths.Matrix2X3{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_UnaryNegation(Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.Equals(Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.op_Explicit(Silk.NET.Maths.Matrix2X3{`0})~Silk.NET.Maths.Matrix2X3{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix2X3">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix2X3`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Add``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.CreateBillboard``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.CreateFromAxisAngle``1(Silk.NET.Maths.Vector3D{``0},``0)">
            <summary>Creates a matrix that rotates around an arbitrary vector.</summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the given axis, in radians.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.CreateFromQuaternion``1(Silk.NET.Maths.Quaternion{``0})">
            <summary>Creates a rotation matrix from the given Quaternion rotation value.</summary>
            <param name="quaternion">The source Quaternion.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.CreateFromYawPitchRoll``1(``0,``0,``0)">
            <summary>Creates a rotation matrix from the specified yaw, pitch, and roll.</summary>
            <param name="yaw">Angle of rotation, in radians, around the Y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the X-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the Z-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Multiply``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Multiply``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Multiply``1(Silk.NET.Maths.Matrix2X2{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Multiply``1(Silk.NET.Maths.Matrix2X3{``0},``0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Multiply``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Negate``1(Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Subtract``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Lerp``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix2X3{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X3.Transform``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms the given matrix by applying the given Quaternion rotation.</summary>
            <param name="value">The source matrix to transform.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix2X4`1">
            <summary>A structure encapsulating a 2x4 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix2X4`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix2X4`1.Row2">
            <summary>
            Row 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.Column3">
            <summary>
            Column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.Column4">
            <summary>
            Column 4 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M13">
            <summary>Value at row 1, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M14">
            <summary>Value at row 1, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M23">
            <summary>Value at row 2, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.M24">
            <summary>Value at row 2, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="j">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.#ctor(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> from the given rows
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> from the given Matrix4x3.</summary>
            <param name="value">The source Matrix4x3.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.#ctor(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a Matrix2x4 from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix2X4`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Addition(Silk.NET.Maths.Matrix2X4{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Equality(Silk.NET.Maths.Matrix2X4{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Inequality(Silk.NET.Maths.Matrix2X4{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Multiply(Silk.NET.Maths.Matrix2X4{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Multiply(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Multiply(Silk.NET.Maths.Matrix2X4{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Multiply(Silk.NET.Maths.Matrix3X2{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Multiply(Silk.NET.Maths.Matrix2X2{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Multiply(Silk.NET.Maths.Matrix2X4{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Subtraction(Silk.NET.Maths.Matrix2X4{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_UnaryNegation(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.Equals(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.op_Explicit(Silk.NET.Maths.Matrix2X4{`0})~Silk.NET.Maths.Matrix2X4{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix2X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix2X4">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Add``1(Silk.NET.Maths.Matrix2X4{``0},Silk.NET.Maths.Matrix2X4{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Multiply``1(Silk.NET.Maths.Matrix2X4{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Multiply``1(Silk.NET.Maths.Matrix2X4{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Multiply``1(Silk.NET.Maths.Matrix2X4{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Multiply``1(Silk.NET.Maths.Matrix4X2{``0},Silk.NET.Maths.Matrix2X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Multiply``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix2X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Multiply``1(Silk.NET.Maths.Matrix2X2{``0},Silk.NET.Maths.Matrix2X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Multiply``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix2X4{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix2X4.Lerp``1(Silk.NET.Maths.Matrix2X4{``0},Silk.NET.Maths.Matrix2X4{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix3X2`1">
            <summary>A structure encapsulating a 3x2 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X2`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X2`1.Row2">
            <summary>
            Row 2 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X2`1.Row3">
            <summary>
            Row 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.M11">
            <summary>The first element of the first row</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.M12">
            <summary>The second element of the first row</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.M21">
            <summary>The first element of the second row</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.M22">
            <summary>The second element of the second row</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.M31">
            <summary>The first element of the third row</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.M32">
            <summary>The second element of the third row</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="y">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.#ctor(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> from the given rows.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> from the given Matrix4x3.</summary>
            <param name="value">The source Matrix4x3.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.#ctor(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X2`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Addition(Silk.NET.Maths.Matrix3X2{`0},Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Adds each matrix element in value1 with its corresponding element in value2.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the summed values.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Equality(Silk.NET.Maths.Matrix3X2{`0},Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Returns a boolean indicating whether the given matrices are equal.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Inequality(Silk.NET.Maths.Matrix3X2{`0},Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Returns a boolean indicating whether the given matrices are not equal.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>True if the matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Multiply(Silk.NET.Maths.Matrix3X2{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Multiply(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Multiply(Silk.NET.Maths.Matrix3X2{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Multiply(Silk.NET.Maths.Matrix3X3{`0},Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Multiply(Silk.NET.Maths.Matrix3X2{`0},`0)">
            <summary>Scales all elements in a matrix by the given scalar factor.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling value to use.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Subtraction(Silk.NET.Maths.Matrix3X2{`0},Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Subtracts each matrix element in value2 from its corresponding element in value1.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the resulting values.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_UnaryNegation(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Negates the given matrix by multiplying all values by -1.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.Equals(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Returns a boolean indicating whether the matrix is equal to the other given matrix.</summary>
            <param name="other">The other matrix to test equality against.</param>
            <returns>True if this matrix is equal to other; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.GetDeterminant">
            <summary>Calculates the determinant for this matrix.
            The determinant is calculated by expanding the matrix with a third column whose values are (0,0,1).</summary>
            <returns>The determinant.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~System.Numerics.Matrix3x2">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into a <see cref="T:System.Numerics.Matrix3x2"/> one.
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="N:System.Numerics"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.op_Explicit(Silk.NET.Maths.Matrix3X2{`0})~Silk.NET.Maths.Matrix3X2{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix3X2">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Add``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Adds each matrix element in value1 with its corresponding element in value2.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the summed values.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateRotation``1(``0)">
            <summary>Creates a rotation matrix using the given rotation in radians.</summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateRotation``1(``0,Silk.NET.Maths.Vector2D{``0})">
            <summary>Creates a rotation matrix using the given rotation in radians and a center point.</summary>
            <param name="radians">The amount of rotation, in radians.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateScale``1(Silk.NET.Maths.Vector2D{``0})">
            <summary>Creates a scale matrix from the given vector scale.</summary>
            <param name="scales">The scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateScale``1(``0,``0)">
            <summary>Creates a scale matrix from the given X and Y components.</summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateScale``1(``0,``0,Silk.NET.Maths.Vector2D{``0})">
            <summary>Creates a scale matrix that is offset by a given center point.</summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateScale``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Creates a scale matrix from the given vector scale with an offset from the given center point.</summary>
            <param name="scales">The scale to use.</param>
            <param name="centerPoint">The center offset.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateScale``1(``0)">
            <summary>Creates a scale matrix that scales uniformly with the given scale.</summary>
            <param name="scale">The uniform scale to use.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateScale``1(``0,Silk.NET.Maths.Vector2D{``0})">
            <summary>Creates a scale matrix that scales uniformly with the given scale with an offset from the given center.</summary>
            <param name="scale">The uniform scale to use.</param>
            <param name="centerPoint">The center offset.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateSkew``1(``0,``0)">
            <summary>Creates a skew matrix from the given angles in radians.</summary>
            <param name="radiansX">The X angle, in radians.</param>
            <param name="radiansY">The Y angle, in radians.</param>
            <returns>A skew matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateSkew``1(``0,``0,Silk.NET.Maths.Vector2D{``0})">
            <summary>Creates a skew matrix from the given angles in radians and a center point.</summary>
            <param name="radiansX">The X angle, in radians.</param>
            <param name="radiansY">The Y angle, in radians.</param>
            <param name="centerPoint">The center point.</param>
            <returns>A skew matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateTranslation``1(Silk.NET.Maths.Vector2D{``0})">
            <summary>Creates a translation matrix from the given vector.</summary>
            <param name="position">The translation position.</param>                        `
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.CreateTranslation``1(``0,``0)">
            <summary>Creates a translation matrix from the given X and Y components.</summary>
            <param name="xPosition">The X position.</param>
            <param name="yPosition">The Y position.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Invert``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix3X2{``0}@)">
            <summary>Attempts to invert the given matrix. If the operation succeeds, the inverted matrix is stored in the result parameter.</summary>
            <param name="matrix">The source matrix.</param>
            <param name="result">The output matrix.</param>
            <returns>True if the operation succeeded, False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Lerp``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix3X2{``0},``0)">
            <summary>Linearly interpolates from matrix1 to matrix2, based on the third parameter.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weighting of matrix2.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Multiply``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Multiplies two matrices together and returns the resulting matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Multiply``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Multiply``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Multiplies two matrices together and returns the resulting matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Multiply``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Multiplies two matrices together and returns the resulting matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Multiply``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies two matrices together and returns the resulting matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The product matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Multiply``1(Silk.NET.Maths.Matrix3X2{``0},``0)">
            <summary>Scales all elements in a matrix by the given scalar factor.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling value to use.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Negate``1(Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Negates the given matrix by multiplying all values by -1.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X2.Subtract``1(Silk.NET.Maths.Matrix3X2{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Subtracts each matrix element in value2 from its corresponding element in value1.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The matrix containing the resulting values.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix3X3`1">
            <summary>A structure encapsulating a 3x3 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X3`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X3`1.Row2">
            <summary>
            Row 2 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X3`1.Row3">
            <summary>
            Row 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.Column3">
            <summary>
            Column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M13">
            <summary>Value at row 1, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M23">
            <summary>Value at row 2, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M31">
            <summary>Value at row 3, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M32">
            <summary>Value at row 3, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.M33">
            <summary>Value at row 3, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="i">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given rows.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.#ctor(Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X4`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X3`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Addition(Silk.NET.Maths.Matrix3X3{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Equality(Silk.NET.Maths.Matrix3X3{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Inequality(Silk.NET.Maths.Matrix3X3{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Multiply(Silk.NET.Maths.Matrix3X3{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Multiply(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Multiply(Silk.NET.Maths.Matrix3X3{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Subtraction(Silk.NET.Maths.Matrix3X3{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_UnaryNegation(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.Equals(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.GetDeterminant">
            <summary>Calculates the determinant of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.op_Explicit(Silk.NET.Maths.Matrix3X3{`0})~Silk.NET.Maths.Matrix3X3{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix3X3">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Add``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateBillboard``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateFromAxisAngle``1(Silk.NET.Maths.Vector3D{``0},``0)">
            <summary>Creates a matrix that rotates around an arbitrary vector.</summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the given axis, in radians.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateFromQuaternion``1(Silk.NET.Maths.Quaternion{``0})">
            <summary>Creates a rotation matrix from the given Quaternion rotation value.</summary>
            <param name="quaternion">The source Quaternion.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateFromYawPitchRoll``1(``0,``0,``0)">
            <summary>Creates a rotation matrix from the specified yaw, pitch, and roll.</summary>
            <param name="yaw">Angle of rotation, in radians, around the Y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the X-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the Z-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateRotationX``1(``0)">
            <summary>Creates a matrix for rotating points around the X-axis.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the X-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateRotationY``1(``0)">
            <summary>Creates a matrix for rotating points around the Y-axis.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateRotationZ``1(``0)">
            <summary>Creates a matrix for rotating points around the Z-axis.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateScale``1(``0,``0,``0)">
            <summary>Creates a scaling matrix.</summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateScale``1(Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a scaling matrix.</summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.CreateScale``1(``0)">
            <summary>Creates a uniform scaling matrix that scales equally on each axis.</summary>
            <param name="scale">The uniform scaling factor.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Multiply``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Multiply``1(Silk.NET.Maths.Matrix2X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Multiply``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Multiply``1(Silk.NET.Maths.Matrix4X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Multiply``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Multiply``1(Silk.NET.Maths.Matrix3X3{``0},``0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Multiply``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Negate``1(Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Subtract``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Decompose``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Vector3D{``0}@,Silk.NET.Maths.Quaternion{``0}@)">
            <summary>Attempts to extract the scale, translation, and rotation components from the given scale/rotation/translation matrix.
            If successful, the out parameters will contained the extracted values.</summary>
            <param name="matrix">The source matrix.</param>
            <param name="scale">The scaling component of the transformation matrix.</param>
            <param name="rotation">The rotation component of the transformation matrix.</param>
            <returns>True if the source matrix was successfully decomposed; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Lerp``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Matrix3X3{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Transform``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms the given matrix by applying the given Quaternion rotation.</summary>
            <param name="value">The source matrix to transform.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X3.Transpose``1(Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Transposes the rows and columns of a matrix.</summary>
            <param name="matrix">The source matrix.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix3X4`1">
            <summary>A structure encapsulating a 3x4 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X4`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X4`1.Row2">
            <summary>
            Row 2 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix3X4`1.Row3">
            <summary>
            Row 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.Column3">
            <summary>
            Column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.Column4">
            <summary>
            Column 4 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M13">
            <summary>Value at row 1, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M14">
            <summary>Value at row 1, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M23">
            <summary>Value at row 2, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M24">
            <summary>Value at row 2, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M31">
            <summary>Value at row 3, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M32">
            <summary>Value at row 3, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M33">
            <summary>Value at row 3, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.M34">
            <summary>Value at row 3, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="y">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given rows.
            </summary>
            <param name="row1"></param>
            <param name="row2"></param>
            <param name="row3"></param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix3X4`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Addition(Silk.NET.Maths.Matrix3X4{`0},Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Equality(Silk.NET.Maths.Matrix3X4{`0},Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Inequality(Silk.NET.Maths.Matrix3X4{`0},Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Multiply(Silk.NET.Maths.Matrix3X4{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Multiply(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Multiply(Silk.NET.Maths.Matrix3X3{`0},Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Multiply(Silk.NET.Maths.Matrix3X4{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Subtraction(Silk.NET.Maths.Matrix3X4{`0},Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_UnaryNegation(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.Equals(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.op_Explicit(Silk.NET.Maths.Matrix3X4{`0})~Silk.NET.Maths.Matrix3X4{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix3X4">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Add``1(Silk.NET.Maths.Matrix3X4{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Multiply``1(Silk.NET.Maths.Matrix3X4{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Multiply``1(Silk.NET.Maths.Matrix3X4{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Multiply``1(Silk.NET.Maths.Matrix3X3{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Multiply``1(Silk.NET.Maths.Matrix4X3{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Multiply``1(Silk.NET.Maths.Matrix3X4{``0},``0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Multiply``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Negate``1(Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Subtract``1(Silk.NET.Maths.Matrix3X4{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix3X4.Lerp``1(Silk.NET.Maths.Matrix3X4{``0},Silk.NET.Maths.Matrix3X4{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix4X2`1">
            <summary>A structure encapsulating a 4x2 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X2`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X2`1.Row2">
            <summary>
            Row 2 of the matrix
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X2`1.Row3">
            <summary>
            Row 3 of the matrix
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X2`1.Row4">
            <summary>
            Row 4 of the matrix
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M31">
            <summary>Value at row 3, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M32">
            <summary>Value at row 3, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M41">
            <summary>Value at row 4, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.M42">
            <summary>Value at row 4, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="y">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.#ctor(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> from the given rows.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.#ctor(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X2`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Addition(Silk.NET.Maths.Matrix4X2{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Equality(Silk.NET.Maths.Matrix4X2{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Inequality(Silk.NET.Maths.Matrix4X2{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Matrix4X2{`0},Silk.NET.Maths.Matrix2X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Matrix4X2{`0},Silk.NET.Maths.Matrix2X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Matrix4X2{`0},Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Matrix2X4{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Matrix3X4{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Matrix4X4{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Multiply(Silk.NET.Maths.Matrix4X2{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Subtraction(Silk.NET.Maths.Matrix4X2{`0},Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_UnaryNegation(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.Equals(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.op_Explicit(Silk.NET.Maths.Matrix4X2{`0})~Silk.NET.Maths.Matrix4X2{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X2`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix4X2">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Add``1(Silk.NET.Maths.Matrix4X2{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Multiply``1(Silk.NET.Maths.Matrix4X2{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Multiply``1(Silk.NET.Maths.Matrix4X2{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Multiply``1(Silk.NET.Maths.Matrix4X2{``0},Silk.NET.Maths.Matrix2X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Multiply``1(Silk.NET.Maths.Matrix2X4{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Multiply``1(Silk.NET.Maths.Matrix3X4{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Multiply``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Multiply``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Negate``1(Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Subtract``1(Silk.NET.Maths.Matrix4X2{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X2.Lerp``1(Silk.NET.Maths.Matrix4X2{``0},Silk.NET.Maths.Matrix4X2{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix4X3`1">
            <summary>A structure encapsulating a 4x3 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X3`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X3`1.Row2">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X3`1.Row3">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X3`1.Row4">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.Column3">
            <summary>
            Column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M13">
            <summary>Value at row 1, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M23">
            <summary>Value at row 2, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M31">
            <summary>Value at row 3, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M32">
            <summary>Value at row 3, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M33">
            <summary>Value at row 3, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M41">
            <summary>Value at row 4, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M42">
            <summary>Value at row 4, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.M43">
            <summary>Value at row 4, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="i">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given rows.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.#ctor(Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X4`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X3`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Addition(Silk.NET.Maths.Matrix4X3{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Equality(Silk.NET.Maths.Matrix4X3{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Inequality(Silk.NET.Maths.Matrix4X3{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Multiply(Silk.NET.Maths.Matrix4X3{`0},Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Multiply(Silk.NET.Maths.Matrix4X3{`0},Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Multiply(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Multiply(Silk.NET.Maths.Matrix4X3{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Subtraction(Silk.NET.Maths.Matrix4X3{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_UnaryNegation(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.Equals(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.op_Explicit(Silk.NET.Maths.Matrix4X3{`0})~Silk.NET.Maths.Matrix4X3{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X3`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix4X3">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Add``1(Silk.NET.Maths.Matrix4X3{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Multiply``1(Silk.NET.Maths.Matrix4X3{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Multiply``1(Silk.NET.Maths.Matrix4X3{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Multiply``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Multiply``1(Silk.NET.Maths.Matrix3X4{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Multiply``1(Silk.NET.Maths.Matrix4X3{``0},``0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Multiply``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Negate``1(Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Subtract``1(Silk.NET.Maths.Matrix4X3{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X3.Lerp``1(Silk.NET.Maths.Matrix4X3{``0},Silk.NET.Maths.Matrix4X3{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix4X4`1">
            <summary>A structure encapsulating a 4x4 matrix.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X4`1.Row1">
            <summary>
            Row 1 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X4`1.Row2">
            <summary>
            Row 2 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X4`1.Row3">
            <summary>
            Row 3 of the matrix.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Matrix4X4`1.Row4">
            <summary>
            Row 4 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.Column1">
            <summary>
            Column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.Column2">
            <summary>
            Column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.Column3">
            <summary>
            Column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.Column4">
            <summary>
            Column 4 of the matrix.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M11">
            <summary>Value at row 1, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M12">
            <summary>Value at row 1, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M13">
            <summary>Value at row 1, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M14">
            <summary>Value at row 1, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M21">
            <summary>Value at row 2, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M22">
            <summary>Value at row 2, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M23">
            <summary>Value at row 2, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M24">
            <summary>Value at row 2, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M31">
            <summary>Value at row 3, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M32">
            <summary>Value at row 3, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M33">
            <summary>Value at row 3, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M34">
            <summary>Value at row 3, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M41">
            <summary>Value at row 4, column 1 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M42">
            <summary>Value at row 4, column 2 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M43">
            <summary>Value at row 4, column 3 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.M44">
            <summary>Value at row 4, column 4 of the matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.Item(System.Int32)">
            <summary>
            Indexer for the rows of this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the values in this matrix.
            </summary>
            <param name="x">The row to select. Zero based.</param>
            <param name="y">The column to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>
            Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given rows
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given components.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(Silk.NET.Maths.Matrix3X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(Silk.NET.Maths.Matrix3X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix3X3`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(Silk.NET.Maths.Matrix2X4{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix2X4`1"/>.</param>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.#ctor(Silk.NET.Maths.Matrix4X2{`0})">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> from the given <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</summary>
            <param name="value">The source <see cref="T:Silk.NET.Maths.Matrix4X2`1"/>.</param>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.Identity">
            <summary>Returns the multiplicative identity matrix.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Matrix4X4`1.IsIdentity">
            <summary>Returns whether the matrix is the identity matrix.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Addition(Silk.NET.Maths.Matrix4X4{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Equality(Silk.NET.Maths.Matrix4X4{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Inequality(Silk.NET.Maths.Matrix4X4{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Returns a boolean indicating whether the given two matrices are not equal.</summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Multiply(Silk.NET.Maths.Matrix4X4{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Multiply(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Multiply(Silk.NET.Maths.Matrix3X4{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Multiply(Silk.NET.Maths.Matrix4X4{`0},Silk.NET.Maths.Matrix4X3{`0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Multiply(Silk.NET.Maths.Matrix4X4{`0},`0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Subtraction(Silk.NET.Maths.Matrix4X4{`0},Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_UnaryNegation(Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this matrix instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.Equals(Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Returns a boolean indicating whether this matrix instance is equal to the other given matrix.</summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.GetDeterminant">
            <summary>Calculates the determinant of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>   
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.ToString">
            <summary>Returns a String representing this matrix instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.op_Explicit(Silk.NET.Maths.Matrix4X4{`0})~Silk.NET.Maths.Matrix4X4{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4`1.As``1">
            <summary>
            Returns this matrix casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted matrix</returns>
        </member>
        <member name="T:Silk.NET.Maths.Matrix4X4">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Matrix4X4`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Add``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Adds two matrices together.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateBillboard``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateConstrainedBillboard``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
            <param name="objectPosition">Position of the object the billboard will rotate around.</param>
            <param name="cameraPosition">Position of the camera.</param>
            <param name="rotateAxis">Axis to rotate the billboard around.</param>
            <param name="cameraForwardVector">Forward vector of the camera.</param>
            <param name="objectForwardVector">Forward vector of the object.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateFromAxisAngle``1(Silk.NET.Maths.Vector3D{``0},``0)">
            <summary>Creates a matrix that rotates around an arbitrary vector.</summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="angle">The angle to rotate around the given axis, in radians.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateFromQuaternion``1(Silk.NET.Maths.Quaternion{``0})">
            <summary>Creates a rotation matrix from the given Quaternion rotation value.</summary>
            <param name="quaternion">The source Quaternion.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateFromYawPitchRoll``1(``0,``0,``0)">
            <summary>Creates a rotation matrix from the specified yaw, pitch, and roll.</summary>
            <param name="yaw">Angle of rotation, in radians, around the Y-axis.</param>
            <param name="pitch">Angle of rotation, in radians, around the X-axis.</param>
            <param name="roll">Angle of rotation, in radians, around the Z-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateLookAt``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a view matrix.</summary>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraTarget">The target towards which the camera is pointing.</param>
            <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
            <returns>The view matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateOrthographic``1(``0,``0,``0,``0)">
            <summary>Creates an orthographic perspective matrix from the given view volume dimensions.</summary>
            <param name="width">Width of the view volume.</param>
            <param name="height">Height of the view volume.</param>
            <param name="zNearPlane">Minimum Z-value of the view volume.</param>
            <param name="zFarPlane">Maximum Z-value of the view volume.</param>
            <returns>The orthographic projection matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateOrthographicOffCenter``1(``0,``0,``0,``0,``0,``0)">
            <summary>Builds a customized, orthographic projection matrix.</summary>
            <param name="left">Minimum X-value of the view volume.</param>
            <param name="right">Maximum X-value of the view volume.</param>
            <param name="bottom">Minimum Y-value of the view volume.</param>
            <param name="top">Maximum Y-value of the view volume.</param>
            <param name="zNearPlane">Minimum Z-value of the view volume.</param>
            <param name="zFarPlane">Maximum Z-value of the view volume.</param>
            <returns>The orthographic projection matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreatePerspective``1(``0,``0,``0,``0)">
            <summary>Creates a perspective projection matrix from the given view volume dimensions.</summary>
            <param name="width">Width of the view volume at the near view plane.</param>
            <param name="height">Height of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <returns>The perspective projection matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreatePerspectiveFieldOfView``1(``0,``0,``0,``0)">
            <summary>Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances.</summary>
            <param name="fieldOfView">Field of view in the y direction, in radians.</param>
            <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            <returns>The perspective projection matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreatePerspectiveOffCenter``1(``0,``0,``0,``0,``0,``0)">
            <summary>Creates a customized, perspective projection matrix.</summary>
            <param name="left">Minimum x-value of the view volume at the near view plane.</param>
            <param name="right">Maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
            <param name="top">Maximum y-value of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to of the far view plane.</param>
            <returns>The perspective projection matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateReflection``1(Silk.NET.Maths.Plane{``0})">
            <summary>Creates a Matrix that reflects the coordinate system about a specified Plane.</summary>
            <param name="value">The Plane about which to create a reflection.</param>
            <returns>A new matrix expressing the reflection.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateRotationX``1(``0)">
            <summary>Creates a matrix for rotating points around the X-axis.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the X-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateRotationX``1(``0,Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a matrix for rotating points around the X-axis, from a center point.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the X-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateRotationY``1(``0)">
            <summary>Creates a matrix for rotating points around the Y-axis.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateRotationY``1(``0,Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a matrix for rotating points around the Y-axis, from a center point.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateRotationZ``1(``0)">
            <summary>Creates a matrix for rotating points around the Z-axis.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateRotationZ``1(``0,Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a matrix for rotating points around the Z-axis, from a center point.</summary>
            <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateScale``1(``0,``0,``0)">
            <summary>Creates a scaling matrix.</summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateScale``1(``0,``0,``0,Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a scaling matrix with a center point.</summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateScale``1(Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a scaling matrix.</summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateScale``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a scaling matrix with a center point.</summary>
            <param name="scales">The vector containing the amount to scale by on each axis.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateScale``1(``0)">
            <summary>Creates a uniform scaling matrix that scales equally on each axis.</summary>
            <param name="scale">The uniform scaling factor.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateScale``1(``0,Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a uniform scaling matrix that scales equally on each axis with a center point.</summary>
            <param name="scale">The uniform scaling factor.</param>
            <param name="centerPoint">The center point.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateShadow``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Plane{``0})">
            <summary>Creates a Matrix that flattens geometry into a specified Plane as if casting a shadow from a specified light source.</summary>
            <param name="lightDirection">The direction from which the light that will cast the shadow is coming.</param>
            <param name="plane">The Plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
            <returns>A new Matrix that can be used to flatten geometry onto the specified plane from the specified direction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateTranslation``1(Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a translation matrix.</summary>
            <param name="position">The amount to translate in each axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateTranslation``1(``0,``0,``0)">
            <summary>Creates a translation matrix.</summary>
            <param name="xPosition">The amount to translate on the X-axis.</param>
            <param name="yPosition">The amount to translate on the Y-axis.</param>
            <param name="zPosition">The amount to translate on the Z-axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.CreateWorld``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a world matrix with the specified parameters.</summary>
            <param name="position">The position of the object; used in translation operations.</param>
            <param name="forward">Forward direction of the object.</param>
            <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
            <returns>The world matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Invert``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X4{``0}@)">
             <summary>Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.</summary>
             <param name="matrix">The source matrix to invert.</param>
             <param name="result">If successful, contains the inverted matrix.</param>
             <returns>True if the source matrix could be inverted; False otherwise.</returns>
            
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Multiply``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Multiply``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Multiply``1(Silk.NET.Maths.Matrix2X4{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Multiply``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Multiplies a matrix by another matrix.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Multiply``1(Silk.NET.Maths.Matrix4X4{``0},``0)">
            <summary>Multiplies a matrix by a scalar value.</summary>
            <param name="value1">The source matrix.</param>
            <param name="value2">The scaling factor.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Negate``1(Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Returns a new matrix with the negated elements of the given matrix.</summary>
            <param name="value">The source matrix.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Subtract``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Subtracts the second matrix from the first.</summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Decompose``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Vector3D{``0}@,Silk.NET.Maths.Quaternion{``0}@,Silk.NET.Maths.Vector3D{``0}@)">
            <summary>Attempts to extract the scale, translation, and rotation components from the given scale/rotation/translation matrix.
            If successful, the out parameters will contained the extracted values.</summary>
            <param name="matrix">The source matrix.</param>
            <param name="scale">The scaling component of the transformation matrix.</param>
            <param name="rotation">The rotation component of the transformation matrix.</param>
            <param name="translation">The translation component of the transformation matrix</param>
            <returns>True if the source matrix was successfully decomposed; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Lerp``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Matrix4X4{``0},``0)">
            <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
            <param name="matrix1">The first source matrix.</param>
            <param name="matrix2">The second source matrix.</param>
            <param name="amount">The relative weight of the second source matrix.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Transform``1(Silk.NET.Maths.Matrix4X4{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms the given matrix by applying the given Quaternion rotation.</summary>
            <param name="value">The source matrix to transform.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed matrix.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Matrix4X4.Transpose``1(Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transposes the rows and columns of a matrix.</summary>
            <param name="matrix">The source matrix.</param>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Plane`1">
            <summary>
            Represents a plane in three-dimensional space.
            </summary>
            <typeparam name="T">The type used to store values.</typeparam>
        </member>
        <member name="F:Silk.NET.Maths.Plane`1.Normal">
            <summary>The normal vector of the Plane.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Plane`1.Distance">
            <summary>The distance of the Plane along its normal from the origin.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.#ctor(`0,`0,`0,`0)">
            <summary>Constructs a Plane from the X, Y, and Z components of its normal, and its distance from the origin on that normal.</summary>
            <param name="x">The X-component of the normal.</param>
            <param name="y">The Y-component of the normal.</param>
            <param name="z">The Z-component of the normal.</param>
            <param name="distance">The distance of the Plane along its normal from the origin.</param>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.#ctor(Silk.NET.Maths.Vector3D{`0},`0)">
            <summary>Constructs a Plane from the given normal and distance along the normal from the origin.</summary>
            <param name="normal">The Plane's normal vector.</param>
            <param name="distance">The Plane's distance from the origin along its normal vector.</param>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.#ctor(Silk.NET.Maths.Vector4D{`0})">
            <summary>Constructs a Plane from the given Vector4D.</summary>
            <param name="value">A vector whose first 3 elements describe the normal vector,
            and whose W component defines the distance along that normal from the origin.</param>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Equality(Silk.NET.Maths.Plane{`0},Silk.NET.Maths.Plane{`0})">
            <summary>Returns a boolean indicating whether the two given Planes are equal.</summary>
            <param name="value1">The first Plane to compare.</param>
            <param name="value2">The second Plane to compare.</param>
            <returns>True if the Planes are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Inequality(Silk.NET.Maths.Plane{`0},Silk.NET.Maths.Plane{`0})">
            <summary>Returns a boolean indicating whether the two given Planes are not equal.</summary>
            <param name="value1">The first Plane to compare.</param>
            <param name="value2">The second Plane to compare.</param>
            <returns>True if the Planes are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Plane instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Plane; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.Equals(Silk.NET.Maths.Plane{`0})">
            <summary>Returns a boolean indicating whether the given Plane is equal to this Plane instance.</summary>
            <param name="other">The Plane to compare this instance to.</param>
            <returns>True if the other Plane is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.ToString">
            <summary>Returns a String representing this Plane instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~System.Numerics.Plane">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into <see cref="T:System.Numerics.Plane"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="N:System.Numerics"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.op_Explicit(Silk.NET.Maths.Plane{`0})~Silk.NET.Maths.Plane{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane`1.As``1">
            <summary>
            Returns this plane casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted plane</returns>
        </member>
        <member name="T:Silk.NET.Maths.Plane">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Plane`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Plane.CreateFromVertices``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Creates a Plane that contains the three given points.</summary>
            <param name="point1">The first point defining the Plane.</param>
            <param name="point2">The second point defining the Plane.</param>
            <param name="point3">The third point defining the Plane.</param>
            <returns>The Plane containing the three points.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane.Dot``1(Silk.NET.Maths.Plane{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Calculates the dot product of a Plane and Vector4D.</summary>
            <param name="plane">The Plane.</param>
            <param name="value">The Vector4D.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane.DotCoordinate``1(Silk.NET.Maths.Plane{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns the dot product of a specified Vector3D and the normal vector of this Plane plus the distance (D) value of the Plane.</summary>
            <param name="plane">The plane.</param>
            <param name="value">The Vector3D.</param>
            <returns>The resulting value.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane.DotNormal``1(Silk.NET.Maths.Plane{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns the dot product of a specified Vector3D and the Normal vector of this Plane.</summary>
            <param name="plane">The plane.</param>
            <param name="value">The Vector3D.</param>
            <returns>The resulting dot product.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane.Normalize``1(Silk.NET.Maths.Plane{``0})">
            <summary>Creates a new Plane whose normal vector is the source Plane's normal vector normalized.</summary>
            <param name="value">The source Plane.</param>
            <returns>The normalized Plane.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane.Transform``1(Silk.NET.Maths.Plane{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a normalized Plane by a Matrix.</summary>
            <param name="plane"> The normalized Plane to transform.
            This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="matrix">The transformation matrix to apply to the Plane.</param>
            <returns>The transformed Plane.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Plane.Transform``1(Silk.NET.Maths.Plane{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary> Transforms a normalized Plane by a Quaternion rotation.</summary>
            <param name="plane"> The normalized Plane to transform.
            This Plane must already be normalized, so that its Normal vector is of unit length, before this method is called.</param>
            <param name="rotation">The Quaternion rotation to apply to the Plane.</param>
            <returns>A new Plane that results from applying the rotation.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Quaternion`1">
            <summary>
            Represents a vector that is used to encode three-dimensional physical rotations.
            </summary>
            <typeparam name="T">The type used to store values.</typeparam>
        </member>
        <member name="F:Silk.NET.Maths.Quaternion`1.X">
            <summary>Specifies the X-value of the vector component of the Quaternion.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Quaternion`1.Y">
            <summary>Specifies the Y-value of the vector component of the Quaternion.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Quaternion`1.Z">
            <summary>Specifies the Z-value of the vector component of the Quaternion.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Quaternion`1.W">
            <summary>Specifies the rotation component of the Quaternion.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.#ctor(`0,`0,`0,`0)">
            <summary>Constructs a Quaternion from the given components.</summary>
            <param name="x">The X component of the Quaternion.</param>
            <param name="y">The Y component of the Quaternion.</param>
            <param name="z">The Z component of the Quaternion.</param>
            <param name="w">The W component of the Quaternion.</param>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.#ctor(Silk.NET.Maths.Vector3D{`0},`0)">
            <summary>Constructs a Quaternion from the given vector and rotation parts.</summary>
            <param name="vectorPart">The vector part of the Quaternion.</param>
            <param name="scalarPart">The rotation part of the Quaternion.</param>
        </member>
        <member name="P:Silk.NET.Maths.Quaternion`1.Identity">
            <summary>Returns a Quaternion representing no rotation.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Quaternion`1.IsIdentity">
            <summary>Returns whether the Quaternion is the identity Quaternion.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Addition(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Adds two Quaternions element-by-element.</summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second source Quaternion.</param>
            <returns>The result of adding the Quaternions.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Division(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Divides a Quaternion by another Quaternion.</summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Equality(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Returns a boolean indicating whether the two given Quaternions are equal.</summary>
            <param name="value1">The first Quaternion to compare.</param>
            <param name="value2">The second Quaternion to compare.</param>
            <returns>True if the Quaternions are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Inequality(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Returns a boolean indicating whether the two given Quaternions are not equal.</summary>
            <param name="value1">The first Quaternion to compare.</param>
            <param name="value2">The second Quaternion to compare.</param>
            <returns>True if the Quaternions are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Multiply(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Multiplies two Quaternions together.</summary>
            <param name="value1">The Quaternion on the left side of the multiplication.</param>
            <param name="value2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Multiply(Silk.NET.Maths.Quaternion{`0},`0)">
            <summary>Multiplies a Quaternion by a scalar value.</summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Subtraction(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Subtracts one Quaternion from another.</summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second Quaternion, to be subtracted from the first.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_UnaryNegation(Silk.NET.Maths.Quaternion{`0})">
            <summary>Flips the sign of each component of the quaternion.</summary>
            <param name="value">The source Quaternion.</param>
            <returns>The negated Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Add(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Adds two Quaternions element-by-element.</summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second source Quaternion.</param>
            <returns>The result of adding the Quaternions.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Concatenate(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation.</summary>
            <param name="value1">The first Quaternion rotation in the series.</param>
            <param name="value2">The second Quaternion rotation in the series.</param>
            <returns>A new Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Conjugate(Silk.NET.Maths.Quaternion{`0})">
            <summary>Creates the conjugate of a specified Quaternion.</summary>
            <param name="value">The Quaternion of which to return the conjugate.</param>
            <returns>A new Quaternion that is the conjugate of the specified one.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.CreateFromAxisAngle(Silk.NET.Maths.Vector3D{`0},`0)">
            <summary>Creates a Quaternion from a normalized vector axis and an angle to rotate about the vector.</summary>
            <param name="axis">The unit vector to rotate around.
            This vector must be normalized before calling this function or the resulting Quaternion will be incorrect.</param>
            <param name="angle">The angle, in radians, to rotate around the vector.</param>
            <returns>The created Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.CreateFromRotationMatrix(Silk.NET.Maths.Matrix4X4{`0})">
            <summary>Creates a Quaternion from the given rotation matrix.</summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The created Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.CreateFromRotationMatrix(Silk.NET.Maths.Matrix3X3{`0})">
            <summary>Creates a Quaternion from the given rotation matrix.</summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The created Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.CreateFromYawPitchRoll(`0,`0,`0)">
            <summary>Creates a new Quaternion from the given yaw, pitch, and roll, in radians.</summary>
            <param name="yaw">The yaw angle, in radians, around the Y-axis.</param>
            <param name="pitch">The pitch angle, in radians, around the X-axis.</param>
            <param name="roll">The roll angle, in radians, around the Z-axis.</param>
            <returns></returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Divide(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Divides a Quaternion by another Quaternion.</summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The divisor.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Dot(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Calculates the dot product of two Quaternions.</summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <returns>The dot product of the Quaternions.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Inverse(Silk.NET.Maths.Quaternion{`0})">
            <summary>Returns the inverse of a Quaternion.</summary>
            <param name="value">The source Quaternion.</param>
            <returns>The inverted Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Lerp(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0},`0)">
            <summary> Linearly interpolates between two quaternions.</summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <returns>The interpolated Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Multiply(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Multiplies two Quaternions together.</summary>
            <param name="value1">The Quaternion on the left side of the multiplication.</param>
            <param name="value2">The Quaternion on the right side of the multiplication.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Multiply(Silk.NET.Maths.Quaternion{`0},`0)">
            <summary>Multiplies a Quaternion by a scalar value.</summary>
            <param name="value1">The source Quaternion.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Negate(Silk.NET.Maths.Quaternion{`0})">
            <summary>Flips the sign of each component of the quaternion.</summary>
            <param name="value">The source Quaternion.</param>
            <returns>The negated Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Normalize(Silk.NET.Maths.Quaternion{`0})">
            <summary>Divides each component of the Quaternion by the length of the Quaternion.</summary>
            <param name="value">The source Quaternion.</param>
            <returns>The normalized Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Slerp(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0},`0)">
            <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
            <param name="quaternion1">The first source Quaternion.</param>
            <param name="quaternion2">The second source Quaternion.</param>
            <param name="amount">The relative weight of the second source Quaternion in the interpolation.</param>
            <returns>The interpolated Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Subtract(Silk.NET.Maths.Quaternion{`0},Silk.NET.Maths.Quaternion{`0})">
            <summary>Subtracts one Quaternion from another.</summary>
            <param name="value1">The first source Quaternion.</param>
            <param name="value2">The second Quaternion, to be subtracted from the first.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Quaternion instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Quaternion; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Equals(Silk.NET.Maths.Quaternion{`0})">
            <summary>Returns a boolean indicating whether the given Quaternion is equal to this Quaternion instance.</summary>
            <param name="other">The Quaternion to compare this instance to.</param>
            <returns>True if the other Quaternion is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.Length">
            <summary>Calculates the length of the Quaternion.</summary>
            <returns>The computed length of the Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.LengthSquared">
            <summary>Calculates the length squared of the Quaternion. This operation is cheaper than Length().</summary>
            <returns>The length squared of the Quaternion.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.ToString">
            <summary>Returns a String representing this Quaternion instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~System.Numerics.Quaternion">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into <see cref="T:System.Numerics.Quaternion"/>
            </summary>
            <param name="from">The source quaternion</param>
            <returns>The <see cref="N:System.Numerics"/> quaternion</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.op_Explicit(Silk.NET.Maths.Quaternion{`0})~Silk.NET.Maths.Quaternion{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Quaternion`1.As``1">
            <summary>
            Returns this quaternion casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted quaternion</returns>
        </member>
        <member name="T:Silk.NET.Maths.Ray2D`1">
            <summary>
            A structure encapsulating a ray consisting of an <see cref="F:Silk.NET.Maths.Ray2D`1.Origin"/> and a <see cref="F:Silk.NET.Maths.Ray2D`1.Direction"/>.
            </summary>
            <typeparam name="T">The type used to store numeric values.</typeparam>
        </member>
        <member name="F:Silk.NET.Maths.Ray2D`1.Origin">
            <summary>
            The origin of this Ray.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Ray2D`1.Direction">
            <summary>
            The direction of this Ray.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.#ctor(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a Ray using an origin and a direction.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.#ctor(Silk.NET.Maths.Vector2D{`0},`0,`0)">
            <summary>
            Constructs a Ray using an origin and components of a direction.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="directionX">The X component of the direction of the ray.</param>
            <param name="directionY">The Y component of the direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.#ctor(`0,`0,Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a Ray using components of an origin and a direction.
            </summary>
            <param name="originX">The X component of the origin of the ray.</param>
            <param name="originY">The Y component of the origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Constructs a Ray using components of an origin and components of a direction.
            </summary>
            <param name="originX">The X component of the origin of the ray.</param>
            <param name="originY">The Y component of the origin of the ray.</param>
            <param name="directionX">The X component of the direction of the ray.</param>
            <param name="directionY">The Y component of the direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.GetPoint(`0)">
            <summary>
            Calculates a point at a distance along the ray.
            </summary>
            <param name="distance">The distance along the ray.</param>
            <returns>A point at a distance along the ray.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.Equals(Silk.NET.Maths.Ray2D{`0})">
            <summary>Returns a boolean indicating whether the given Ray2D is equal to this Ray2D instance.</summary>
            <param name="other">The Ray2D to compare this instance to.</param>
            <returns>True if the other Ray2D is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Ray2D instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Ray2D; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.op_Equality(Silk.NET.Maths.Ray2D{`0},Silk.NET.Maths.Ray2D{`0})">
            <summary>Returns a boolean indicating whether the two given Rays are equal.</summary>
            <param name="value1">The first Ray to compare.</param>
            <param name="value2">The second Ray to compare.</param>
            <returns>True if the Rays are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.op_Inequality(Silk.NET.Maths.Ray2D{`0},Silk.NET.Maths.Ray2D{`0})">
            <summary>Returns a boolean indicating whether the two given Rays are not equal.</summary>
            <param name="value1">The first Ray to compare.</param>
            <param name="value2">The second Ray to compare.</param>
            <returns>True if the Rays are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray2D`1.As``1">
            <summary>
            Returns this ray casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted ray</returns>
        </member>
        <member name="T:Silk.NET.Maths.Ray3D`1">
            <summary>
            A structure encapsulating a ray consisting of an <see cref="F:Silk.NET.Maths.Ray3D`1.Origin"/> and a <see cref="F:Silk.NET.Maths.Ray3D`1.Direction"/>.
            </summary>
            <typeparam name="T">The type used to store numeric values.</typeparam>
        </member>
        <member name="F:Silk.NET.Maths.Ray3D`1.Origin">
            <summary>
            The origin of this Ray.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Ray3D`1.Direction">
            <summary>
            The direction of this Ray.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.#ctor(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a Ray using an origin and a direction.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.#ctor(Silk.NET.Maths.Vector3D{`0},`0,`0,`0)">
            <summary>
            Constructs a Ray using an origin and components of a direction.
            </summary>
            <param name="origin">The origin of the ray.</param>
            <param name="directionX">The X component of the direction of the ray.</param>
            <param name="directionY">The Y component of the direction of the ray.</param>
            <param name="directionZ">The Z component of the direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.#ctor(`0,`0,`0,Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Constructs a Ray using components of an origin and a direction.
            </summary>
            <param name="originX">The X component of the origin of the ray.</param>
            <param name="originY">The Y component of the origin of the ray.</param>
            <param name="originZ">The Z component of the origin of the ray.</param>
            <param name="direction">The direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>
            Constructs a Ray using components of an origin and components of a direction.
            </summary>
            <param name="originX">The X component of the origin of the ray.</param>
            <param name="originY">The Y component of the origin of the ray.</param>
            <param name="originZ">The Z component of the origin of the ray.</param>
            <param name="directionX">The X component of the direction of the ray.</param>
            <param name="directionY">The Y component of the direction of the ray.</param>
            <param name="directionZ">The Z component of the direction of the ray.</param>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.GetPoint(`0)">
            <summary>
            Calculates a point at a distance along the ray.
            </summary>
            <param name="distance">The distance along the ray.</param>
            <returns>A point at a distance along the ray.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.Equals(Silk.NET.Maths.Ray3D{`0})">
            <summary>Returns a boolean indicating whether the given Ray3D is equal to this Ray3D instance.</summary>
            <param name="other">The Ray3D to compare this instance to.</param>
            <returns>True if the other Ray3D is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Ray3D instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Ray3D; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.op_Equality(Silk.NET.Maths.Ray3D{`0},Silk.NET.Maths.Ray3D{`0})">
            <summary>Returns a boolean indicating whether the two given Rays are equal.</summary>
            <param name="value1">The first Ray to compare.</param>
            <param name="value2">The second Ray to compare.</param>
            <returns>True if the Rays are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.op_Inequality(Silk.NET.Maths.Ray3D{`0},Silk.NET.Maths.Ray3D{`0})">
            <summary>Returns a boolean indicating whether the two given Rays are not equal.</summary>
            <param name="value1">The first Ray to compare.</param>
            <param name="value2">The second Ray to compare.</param>
            <returns>True if the Rays are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Ray3D`1.As``1">
            <summary>
            Returns this ray casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted ray</returns>
        </member>
        <member name="T:Silk.NET.Maths.Rectangle`1">
            <summary>
            A structure representing a Rectangle with an <see cref="F:Silk.NET.Maths.Rectangle`1.Origin"/> and <see cref="F:Silk.NET.Maths.Rectangle`1.Size"/>
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Rectangle`1.Origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Rectangle`1.Size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.#ctor(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a Rectangle from an origin and a size
            </summary>
            <param name="origin">The origin of the rect.</param>
            <param name="size">The size of the rect.</param>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.#ctor(Silk.NET.Maths.Vector2D{`0},`0,`0)">
            <summary>
            Constructs a Rectangle from an origin and components of a size
            </summary>
            <param name="origin">The origin of the rect.</param>
            <param name="sizeX">The X component of the size of the rect.</param>
            <param name="sizeY">The Y component of the size of the rect.</param>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.#ctor(`0,`0,Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Constructs a Rectangle from components of an origin and a size
            </summary>
            <param name="originX">The X component of the origin of the rect.</param>
            <param name="originY">The Y component of the origin of the rect.</param>
            <param name="size">The size of the rect.</param>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Constructs a Rectangle from components of an origin and components of a size
            </summary>
            <param name="originX">The X component of the origin of the rect.</param>
            <param name="originY">The Y component of the origin of the rect.</param>
            <param name="sizeX">The X component of the size of the rect.</param>
            <param name="sizeY">The Y component of the size of the rect.</param>
        </member>
        <member name="P:Silk.NET.Maths.Rectangle`1.Center">
            <summary>
            The center of this rectangle.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Rectangle`1.Max">
            <summary>
            The Maximum point of this Rectangle.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Rectangle`1.HalfSize">
            <summary>
            Half the size of this rectangle.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.Contains(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates whether this rectangle contains a point.
            </summary>
            <param name="point">The point.</param>
            <returns>True if this rectangle contains the point; False otherwise.</returns>
            <remarks>This does consider a point on the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.Contains(Silk.NET.Maths.Rectangle{`0})">
            <summary>
            Calculates whether this rectangle contains another rectangle
            </summary>
            <param name="other">The rectangle.</param>
            <returns>True if this rectangle contains the given rectangle; False otherwise.</returns>
            <remarks>This does consider a rectangle that touches the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.GetDistanceToNearestEdge(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates the distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.GetTranslated(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a new rectangle translated by a given distance.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The calculated rectangle.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.GetScaled(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a new rectangle scaled by the given scale around the given anchor.
            </summary>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <returns>The calculated rectangle.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.GetScaled``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a new rectangle scaled by the given scale around the given anchor.
            </summary>
            <typeparam name="TScale">The type of the scale.</typeparam>
            <param name="scale">The scale.</param>
            <param name="anchor">The anchor.</param>
            <returns>The calculated rectangle.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.GetInflated(Silk.NET.Maths.Vector2D{`0})">
            <summary>
            Calculates a rectangle inflated to contain the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>The calculated rectangle.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.Equals(Silk.NET.Maths.Rectangle{`0})">
            <summary>Returns a boolean indicating whether the given Rectangle is equal to this Rectangle instance.</summary>
            <param name="other">The Rectangle to compare this instance to.</param>
            <returns>True if the other Rectangle is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Rectangle instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Rectangle; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.op_Equality(Silk.NET.Maths.Rectangle{`0},Silk.NET.Maths.Rectangle{`0})">
            <summary>Returns a boolean indicating whether the two given Rectangles are equal.</summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <returns>True if the Rectangles are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.op_Inequality(Silk.NET.Maths.Rectangle{`0},Silk.NET.Maths.Rectangle{`0})">
            <summary>Returns a boolean indicating whether the two given Rectangles are not equal.</summary>
            <param name="value1">The first Rectangle to compare.</param>
            <param name="value2">The second Rectangle to compare.</param>
            <returns>True if the Rectangles are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle`1.As``1">
            <summary>
            Returns this rectangle casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted rectangle</returns>
        </member>
        <member name="T:Silk.NET.Maths.Rectangle">
            <summary>
            Helper methods to work with <see cref="T:Silk.NET.Maths.Rectangle`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Rectangle.FromLTRB``1(``0,``0,``0,``0)">
            <summary>
            Constructs a rectangle from the given edge positions.
            </summary>
            <param name="left">The left edge.</param>
            <param name="top">The top edge.</param>
            <param name="right">The right edge.</param>
            <param name="bottom">The bottom edge.</param>
            <typeparam name="T">The type.</typeparam>
            <returns>The constructed rectangle.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Scalar">
            <summary>
            A collection of operations for working with scalar numeric values.
            Includes methods like the ones found in <see cref="T:System.Math"/> and more.
            Supports <see cref="T:System.Half" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.Decimal" />, <see cref="T:System.SByte" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Numerics.Complex" />, <see cref="T:System.Numerics.BigInteger" />
            </summary>
            <seealso cref="T:Silk.NET.Maths.Scalar`1"/>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.As``2(``0)">
            <summary>
            Convert <paramref name="val"/> from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/>
            </summary>
            <param name="val">The value to convert</param>
            <typeparam name="TFrom">The type converted from</typeparam>
            <typeparam name="TTo">The type converted into</typeparam>
            <remark>
            While in most cases the types can be just explicitly casted,
            sometimes there is an intermediate cast to float or double.
            </remark>
            <remark>
            In case of <see cref="T:System.Numerics.Complex" /> we only consider the real part.
            </remark>
            <returns>The converted value</returns>
        </member>
        <member name="P:Silk.NET.Maths.Scalar.IsHardwareAccelerated">
            <summary>
            Indicates whether members are hardware accelerated. Not all members support hardware acceleration.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsFinite``1(``0)">
            <summary>
            Determines whether the specified value is finite (zero, subnormal, or normal).
            </summary>
            <param name="f">A number.</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if the value is finite (zero, subnormal or normal); <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsInfinity``1(``0)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="f">A number</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if <paramref name="f"/> evaluates to <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsNaN``1(``0)">
            <summary>
            Returns a value that indicates whether the specified value is not a number (<see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>).
            </summary>
            <param name="f">A number</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if <paramref name="f"/> evaluates to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsNegative``1(``0)">
            <summary>
            Determines whether the specified value is negative.
            </summary>
            <param name="f">A number</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if the value is negative; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsNegativeInfinity``1(``0)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="f">A number</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if <paramref name="f"/> evaluates to <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsNormal``1(``0)">
            <summary>
            Determines whether the specified value is normal.
            </summary>
            <param name="f">A number</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if the value is normal; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsPositiveInfinity``1(``0)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="f">A number</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if <paramref name="f"/> evaluates to <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>; <code>false</code> otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IsSubnormal``1(``0)">
            <summary>
            Determines whether the specified value is subnormal.    
            </summary>
            <param name="f">A number</param>
            <typeparam name="T">The type of the specified number.</typeparam>
            <returns><code>true</code> if the value is subnormal; <code>false</code> otherwise.</returns>
            <remarks>This function will throw for types other then <see cref="T:System.Half"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, because subnormality cannot be determined for other types.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Equal``1(``0,``0)">
            <summary>
            Returns a value that indicates whether two specified values are equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns><code>true</code> if <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.NotEqual``1(``0,``0)">
            <summary>
            Returns a value that indicates whether two specified values are not equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns><code>true</code> if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.GreaterThan``1(``0,``0)">
            <summary>
            Returns a value that indicates whether a specified value is greater than another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns><code>true</code> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.GreaterThanOrEqual``1(``0,``0)">
            <summary>
            Returns a value that indicates whether a specified value is greater than or equal to another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns><code>true</code> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.LessThan``1(``0,``0)">
            <summary>
            Returns a value that indicates whether a specified value is less than another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns><code>true</code> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.LessThanOrEqual``1(``0,``0)">
            <summary>
            Returns a value that indicates whether a specified value is less than or equal to another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns><code>true</code> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Add``1(``0,``0)">
            <summary>
            Adds two specified values.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns>The result of adding <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Subtract``1(``0,``0)">
            <summary>
            Subtracts two specified values.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns>The result of subtracting <paramref name="left"/> from <paramref name="right"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Multiply``1(``0,``0)">
            <summary>
            Multiplies two specified values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns>The result of multiplying <paramref name="left"/> and <paramref name="right"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Divide``1(``0,``0)">
            <summary>
            Divides two specified values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <typeparam name="T">The type of both values.</typeparam>
            <returns>The result of dividing <paramref name="left"/> by <paramref name="right"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Negate``1(``0)">
            <summary>
            Returns the result of multiplying the specified value by negative one.
            </summary>
            <param name="x">The value to negate</param>
            <typeparam name="T">The type of the value</typeparam>
            <returns>
            A number with the value of <paramref name="x"/>, but the opposite sign.
            -or-
            Zero, if <paramref name="x"/> is zero.
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.And``1(``0,``0)">
            <summary>
            Performs And on supported types
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Not``1(``0)">
            <summary>
            Performs Not on supported types
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Or``1(``0,``0)">
            <summary>
            Performs Or on supported types
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.RotateLeft``1(``0,System.Int32)">
            <summary>
            Rotates a given value bitwise.
            Shifting float and double obeys unsigned integers' behaviour.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.RotateRight``1(``0,System.Int32)">
            <summary>
            Rotates a given value bitwise.
            Shifting float and double obeys unsigned integers' behaviour.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.ShiftLeft``1(``0,System.Int32)">
            <summary>
            Performs ShiftLeft on supported types
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.ShiftRight``1(``0,System.Int32)">
            <summary>
            Performs ShiftRight on supported types
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Xor``1(``0,``0)">
            <summary>
            Performs Xor on supported types
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.DegreesToRadians``1(``0)">
            <summary>
            Convert degrees to radians.
            </summary>
            <param name="degrees">An angle in degrees.</param>
            <returns>The angle expressed in radians.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.RadiansToDegrees``1(``0)">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="radians">An angle in radians.</param>
            <returns>The angle expressed in degrees.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Reciprocal``1(``0)">
            <summary>
            Calculates the reciprocal of a number.
            </summary>
            <param name="x">The number.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The reciprocal of the given number.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Abs``1(``0)">
            <summary>
            Returns the absolute value of a number.
            </summary>
            <param name="x">The value to get the absolute of</param>
            <typeparam name="T">The type of <paramref name="x"/> </typeparam>
            <returns>The absolute of the given value</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Acos``1(``0)">
             <summary>
             Returns the angle whose cosine is the specified number.
             </summary>
             <param name="x">A number representing a cosine, where <paramref name="x"/> must be greater than or equal to -1, but less than or equal to 1.</param>
             <typeparam name="T">The type of <paramref name="x"/></typeparam>
             <returns>
            An angle, θ, measured in radians, such that 0 ≤ θ ≤ π.
            
             -or-
            
             NaN if x &lt; -1 or x &gt; 1 or x equals NaN.
             </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Acosh``1(``0)">
            <summary>
            Returns the angle whose hyperbolic cosine is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic cosine, where <paramref name="x"/> must be greater than or equal to 1, but less than or equal to <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>
            An angle, θ, measured in radians, such that 0 ≤ θ ≤ ∞.
            
            -or-
            
            NaN if x &lt; 1 or x equals NaN.
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Asin``1(``0)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="x">A number representing a sine, where <paramref name="x"/> must be greater than or equal to -1, but less than or equal to 1.</param>
            <typeparam name="T">The type of <paramref name="x"/></typeparam>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2.
            
            -or-
            
            NaN if x &lt; -1 or x &gt; 1 or x equals NaN.
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Asinh``1(``0)">
            <summary>
            Returns the angle whose hyperbolic sine is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic sine, where <paramref name="x"/> must be greater than or equal to <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, but less than or equal to <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>.</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Atan``1(``0)">
             <summary>
             Returns the angle whose tangent is the specified number.
             </summary>
             <param name="x">A number representing a tangent.</param>
             <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
             <returns>
            An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2.
             
             -or-
             
             NaN if <paramref name="x"/> equals <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="x"/> equals <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, or π/2 rounded to double precision (1.5707963267949) if <paramref name="x"/> equals <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>.
             </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Atanh``1(``0)">
            <summary>
            Returns the angle whose hyperbolic tangent is the specified number.
            </summary>
            <param name="x">A number representing a hyperbolic tangent, where <paramref name="x"/> must be greater than or equal to -1, but less than or equal to 1.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>
            An angle, θ, measured in radians, such that -∞ &lt; θ &lt; -1, or 1 &lt; θ &lt; ∞.
            
            -or-
            
            <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/> if x &lt; -1 or x &gt; 1 or x equals <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Cbrt``1(``0)">
            <summary>
            Returns the cube root of a specified number.
            </summary>
            <param name="x">The number whose cube root is to be found.</param>
            <typeparam name="T">The type of <paramref name="x"/></typeparam>
            <returns>
            The cube root of <paramref name="x"/>.
            
            -or-
            
            <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/> if <paramref name="x"/> is equals <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Ceiling``1(``0)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="x">A number.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The smallest integral value that is greater than or equal to <paramref name="x"/>. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, or <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, that value is returned. Note that this method returns <typeparamref name="T"/> instead of an integral type.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Cos``1(``0)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The cosine of <paramref name="x"/>. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, or <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, this method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Cosh``1(``0)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The hyperbolic cosine of <paramref name="x"/>. If <paramref name="x"/> equal to <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> is returned. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/> is returned.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Exp``1(``0)">
            <summary>
            Returns <c>e</c> raised to the specified power.
            </summary>
            <param name="x">A number specifying a power.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The number <c>e</c> raised to the power <paramref name="x"/>. If <paramref name="x"/> equals <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/> or <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, that value is returned. If <paramref name="x"/> equals <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, 0 is returned.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Floor``1(``0)">
            <summary>
            Returns the largest integral value less than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="x">A number.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The largest integral value less than or equal to <paramref name="x"/>. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, or <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, that value is returned.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Sign``1(``0)">
            <summary>
            Returns an integer that indicates the sign of a single-precision floating-point number.
            </summary>
            <param name="x">A number.</param>
            <typeparam name="T">The type of <paramref name="x"/></typeparam>
            <returns>
            A number that indicates the sign of <paramref name="x"/>, as shown in the following table.
            <list type="table">
            <listheader>
            <term>Return value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term>-1</term>
            <description><paramref name="x"/> is less than zero.</description>
            </item>
            <item>
            <term>0</term>
            <description><paramref name="x"/> is equal to zero.</description>
            </item>
            <item>
            <term>1</term>
            <description><paramref name="x"/> is greater than zero.</description>
            </item>
            </list>
            </returns>
            <remarks>
            For unsigned numbers this will never return -1, but will return 0 when <paramref name="x"/> is 0
            </remarks>
            <exception cref="T:System.ArithmeticException"><paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></exception>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Sin``1(``0)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The sine of <paramref name="x"/>. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, or <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, this method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Sinh``1(``0)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <typeparam name="T">Type of <paramref name="x"/>.</typeparam>
            <returns>The hyperbolic sine of <paramref name="x"/>. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, or <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/> this method returns <paramref name="x"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Sqrt``1(``0)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="x">The number whose square root is to be found.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>
            One of the values in the following table.
            <list type="table">
            <listheader>
            <term><paramref name="x"/> parameter</term>
            <description>Return value</description>
            </listheader>
            <item>
            <term>Zero or positive</term>
            <description>The positive square root of <paramref name="x"/>.</description>
            </item>
            <item>
            <term>Negative</term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></description>
            </item>
            <item>
            <term>Equals <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></description>
            </item>
            <item>
            <term>Equals <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Tan``1(``0)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The tangent of <paramref name="x"/>. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, or <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, this method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Tanh``1(``0)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The hyperbolic tangent of <paramref name="x"/>. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, this method returns -1. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, this method returns 1. If <paramref name="x"/> is equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, this method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Truncate``1(``0)">
            <summary>
            Calculates the integral part of a specified single-precision floating-point number.
            </summary>
            <param name="x">A number to truncate.</param>
            <typeparam name="T"></typeparam>
            <returns>
            The integral part of <paramref name="x"/>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.
            <list type="table">
            <listheader>
            <term><paramref name="x"/></term>
            <description>Return value</description>
            </listheader>
            <item>
            <term><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></description>
            </item>
            <item>
            <term><see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/></description>
            </item>
            <item>
            <term><see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Log``1(``0)">
            <summary>
            Returns the natural (base <c>e</c>) logarithm of a specified number.
            </summary>
            <param name="x">The number whose logarithm is to be found.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>
            One of the values in the following table.
            <list type="table">
            <listheader>
            <term><paramref name="x"/> parameter</term>
            <description>Return value</description>
            </listheader>
            <item>
            <term>Positive</term>
            <description>The natural logarithm of <paramref name="x"/>; that is, ln <paramref name="x"/>, or log e <paramref name="x"/></description>
            </item>
            <item>
            <term>Zero</term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/></description>
            </item>
            <item>
            <term>Negative</term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></description>
            </item>
            <item>
            <term>Equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></description>
            </item>
            <item>
            <term>Equal to <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Log10``1(``0)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="x">The number whose logarithm is to be found.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>
            One of the values in the following table.
            <list type="table">
            <listheader>
            <term><paramref name="x"/> parameter</term>
            <description>Return value</description>
            </listheader>
            <item>
            <term>Positive</term>
            <description>The base 10 log of <paramref name="x"/>; that is log 10 <paramref name="x"/></description>
            </item>
            <item>
            <term>Zero</term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/></description>
            </item>
            <item>
            <term>Negative</term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></description>
            </item>
            <item>
            <term>Equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.NaN"/></description>
            </item>
            <item>
            <term>Equal to <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></term>
            <description><see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/></description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Round``1(``0)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integral value, and rounds midpoint values to the nearest even number.
            </summary>
            <param name="x">A number to be rounded.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>
            The integer nearest <paramref name="x"/>. If the fractional component of <paramref name="x"/> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns <typeparamref name="T"/> instead of an integral type
            </returns>
            <remarks>
            This method uses the default rounding convention of <see cref="F:System.MidpointRounding.ToEven"/>.
            </remarks>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.IEEERemainder``1(``0,``0)">
            <summary>
            Returns the remainder resulting from the division of a specified number by another specified number.
            </summary>
            <param name="x">A dividend.</param>
            <param name="y">A divisor.</param>
            <typeparam name="T">The type of <paramref name="x"/> and <paramref name="y"/>.</typeparam>
            <returns>
            A number equal to <paramref name="x"/> - (<paramref name="y"/> Q), where Q is the quotient of <paramref name="x"/> / <paramref name="y"/> rounded to the nearest integer (if <paramref name="x"/> / <paramref name="y"/> falls halfway between two integers, the even integer is returned).
            
            If <paramref name="x"/> - (<paramref name="y"/> Q) is zero, the value +0 is returned if <paramref name="x"/> is positive, or -0 if <paramref name="x"/> is negative.
            
            If <paramref name="y"/> = 0, NaN is returned.
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Log``1(``0,``0)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="x">The number whose logarithm is to be found.</param>
            <param name="y">The base.</param>
            <typeparam name="T">The type of <paramref name="x"/> and <paramref name="y"/>.</typeparam>
            <returns>
            One of the values in the following table. (+Infinity denotes <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/>, -Infinity denotes <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, and NaN denotes <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.)
            <list type="table">
            <listheader>
            <term><paramref name="x"/></term>
            <description><c>newBase</c></description>
            <description>Return value</description>
            </listheader>
            <item>
            <term><paramref name="x"/>&gt;0</term>
            <description>(0&lt;<c>newBase</c>&lt;1) -or- (<c>newBase</c>&gt;1)</description>
            <description>lognewBase(a)</description>
            </item>
            <item>
            <term><paramref name="x"/>&lt;0</term>
            <description>(any value)</description>
            <description>NaN</description>
            </item>
            <item>
            <term>(any value)</term>
            <description><c>newBase</c>&lt;0</description>
            <description>NaN</description>
            </item>
            <item>
            <term><paramref name="x"/> != 1</term>
            <description><c>newBase</c> = 0</description>
            <description>NaN</description>
            </item>
            <item>
            <term><paramref name="x"/> != 1</term>
            <description><c>newBase</c> = +Infinity</description>
            <description>NaN</description>
            </item>
            <item>
            <term><paramref name="x"/> = NaN</term>
            <description>(any value)</description>
            <description>NaN</description>
            </item>
            <item>
            <term>(any value)</term>
            <description><c>newBase</c> = NaN</description>
            <description>NaN</description>
            </item>
            <item>
            <term>(any value)</term>
            <description><c>newBase</c> = 1</description>
            <description>NaN</description>
            </item>
            <item>
            <term><paramref name="x"/> = 0</term>
            <description>0 &lt; <c>newBase</c> &lt; 1</description>
            <description>+Infinity</description>
            </item>
            <item>
            <term><paramref name="x"/> = 0</term>
            <description><c>newBase</c> &gt; 1</description>
            <description>-Infinity</description>
            </item>
            <item>
            <term><paramref name="x"/> = +Infinity</term>
            <description>0 &lt; <c>newBase</c> &lt; 1</description>
            <description>-Infinity</description>
            </item>
            <item>
            <term><paramref name="x"/> = +Infinity</term>
            <description><c>newBase</c> &gt; 1</description>
            <description>+Infinity</description>
            </item>
            <item>
            <term><paramref name="x"/> = 1</term>
            <description><c>newBase</c> = 0</description>
            <description>0</description>
            </item>
            <item>
            <term><paramref name="x"/> = 1</term>
            <description><c>newBase</c> = +Infinity</description>
            <description>0</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Max``1(``0,``0)">
            <summary>
            Returns the larger of two numbers.
            </summary>
            <param name="x">The first of two numbers to compare.</param>
            <param name="y">The second of two numbers to compare.</param>
            <typeparam name="T">The type of <paramref name="x"/> and <paramref name="y"/>.</typeparam>
            <returns>Parameter <paramref name="x"/> or <paramref name="y"/>, whichever is larger. If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/> is returned.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Min``1(``0,``0)">
            <summary>
            Returns the smaller of two numbers.
            </summary>
            <param name="x">The first of two numbers to compare.</param>
            <param name="y">The second of two numbers to compare.</param>
            <typeparam name="T">The type of <paramref name="x"/> and <paramref name="y"/>.</typeparam>
            <returns>Parameter <paramref name="x"/> or <paramref name="y"/>, whichever is smaller. If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/> is returned.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Pow``1(``0,``0)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A number to be raised to a power.</param>
            <param name="y">A number that specifies a power.</param>
            <typeparam name="T">The type of <paramref name="x"/> and <paramref name="y"/>.</typeparam>
            <returns>The number <paramref name="x"/> raised to the power <paramref name="y"/>.</returns>
                    <remarks>
                    <format type="text/markdown"><![CDATA[  
              
            ## Remarks  
                        The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters. For more information, see <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Single.NaN?displayProperty=nameWithType>.  
              
                    |Parameters|Return value|  
                    |----------------|------------------|  
                    |`x` or `y` = `NaN`.|`NaN`|  
                    |`x` = Any value except `NaN`; `y` = 0.|1|  
                    |`x` = `NegativeInfinity`; `y` < 0.|0|  
                    |`x` = `NegativeInfinity`; `y` is a positive odd integer.|`NegativeInfinity`|  
                    |`x` = `NegativeInfinity`; `y` is positive but not an odd integer.|`PositiveInfinity`|  
                    |`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.|`NaN`|  
                    |`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.|`NaN`|  
                    |-1 < `x` < 1; `y` = `NegativeInfinity`.|`PositiveInfinity`|  
                    |-1 < `x` < 1; `y` = `PositiveInfinity`.|0|  
                    |`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.|0|  
                    |`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.|`PositiveInfinity`|  
                    |`x` = 0; `y` < 0.|`PositiveInfinity`|  
                    |`x` = 0; `y` > 0.|0|  
                    |`x` = 1; `y` is any value except `NaN`.|1|  
                    |`x` = `PositiveInfinity`; `y` < 0.|0|  
                    |`x` = `PositiveInfinity`; `y` > 0.|`PositiveInfinity`|  
              
                    ]]></format>
                    </remarks>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Atan2``1(``0,``0)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <typeparam name="T">The type of <paramref name="y"/> and <paramref name="x"/>.</typeparam>
            <returns>
            An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane. Observe the following:
            <list type="bullet">
            <item><description>For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 1, 0 &lt; θ &lt; π/2.</description></item>
            <item><description>For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 2, π/2 &lt; θ ≤ π.</description></item>
            <item><description>For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 3, -π &lt; θ &lt; -π/2.</description></item>
            <item><description>For (<paramref name="x"/>, <paramref name="y"/>) in quadrant 4, -π/2 &lt; θ &lt; 0.</description></item>
            </list>
            <list type="bullet">
            <item><description>If y is 0 and x is not negative, θ = 0.</description></item>
            <item><description>If y is 0 and x is negative, θ = π.</description></item>
            <item><description>If y is positive and x is 0, θ = π/2.</description></item>
            <item><description>If y is 0 and x is 0, θ = -π/2.</description></item>
            </list>
            If <paramref name="x"/> or <paramref name="y"/> is <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, or if <paramref name="x"/> and <paramref name="y"/> are either <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, the method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.
            </returns>
            <remarks>
            The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).
            </remarks>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Round``1(``0,System.Int32)">
            <summary>
            Rounds a single-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number.
            </summary>
            <param name="x">A number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The number nearest to <paramref name="x"/> that contains a number of fractional digits equal to digits.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits"/> is less than 0 or greater than the maximum number of integral and fractional digits supported by the <typeparamref name="T"/> type.</exception>
            <remarks>
            This method uses the default rounding convention of <see cref="F:System.MidpointRounding.ToEven"/>
            If the value of <paramref name="x"/> is <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, the method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.
            If <paramref name="x"/> is <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, the method returns <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, respectively.
            </remarks>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Round``1(``0,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a single-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values.
            </summary>
            <param name="x">A number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="mode">Specification for how to round <paramref name="x"/> if it is midway between two other numbers.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The number nearest to <paramref name="x"/> that contains a number of fractional digits equal to digits. If <paramref name="x"/> has fewer fractional digits than <paramref name="digits"/>, <paramref name="x"/> is returned unchanged.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits"/> is less than 0 or greater than the maximum number of integral and fractional digits supported by the <typeparamref name="T"/> type.</exception>
            <remarks>
            If the value of <paramref name="x"/> is <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, the method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.
            If <paramref name="x"/> is <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, the method returns <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, respectively.
            </remarks>
        </member>
        <member name="M:Silk.NET.Maths.Scalar.Round``1(``0,System.MidpointRounding)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values.
            </summary>
            <param name="x">A single-precision floating-point number to be rounded.</param>
            <param name="mode">Specification for how to round x if it is midway between two other numbers.</param>
            <typeparam name="T">The type of <paramref name="x"/>.</typeparam>
            <returns>The integer nearest <paramref name="x"/>. If <paramref name="x"/> is halfway between two integers, one of which is even and the other odd, then mode determines which of the two is returned. Note that this method returns <typeparamref name="T"/> instead of an integral type.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="mode"/> is not a valid value of <see cref="T:System.MidpointRounding"/>.</exception>
            <remarks>
            If the value of <paramref name="x"/> is <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>, the method returns <see cref="F:Silk.NET.Maths.Scalar`1.NaN"/>.
            If <paramref name="x"/> is <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, the method returns <see cref="F:Silk.NET.Maths.Scalar`1.PositiveInfinity"/> or <see cref="F:Silk.NET.Maths.Scalar`1.NegativeInfinity"/>, respectively.
            \</remarks>
        </member>
        <member name="T:Silk.NET.Maths.Scalar`1">
            <summary>
            To be added.
            </summary>
            <typeparam name="T">To be added.</typeparam>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.Epsilon">
            <summary>
            Represents the smallest positive value that is greater than zero. Zero for non-floating point numbers.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.MaxValue">
            <summary>
            Represents the largest possible value.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.MinValue">
            <summary>
            Represents the smallest possible value.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.NaN">
            <summary>
            Represents not a number (NaN). Zero for non-floating point numbers.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.NegativeInfinity">
            <summary>
            Represents negative infinity. Zero for non-floating point numbers.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.PositiveInfinity">
            <summary>
            Represents positive infinity. Zero for non-floating point numbers.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.Zero">
            <summary>
            Represents zero.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.One">
            <summary>
            Represents one.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.Two">
            <summary>
            Represents two.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.MinusOne">
            <summary>
            Represents negative one.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.MinusTwo">
            <summary>
            Represents negative two.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, <code>e</code>.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.Pi">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, <code>π</code>.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.PiOver2">
            <summary>
            Represents Pi divided by two.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.Tau">
            <summary>
            Represents the number of radians in one turn, specified by the constant, <code>τ</code>.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.DegreesPerRadian">
            <summary>
            Represents the number of degrees in a single radian.
            </summary>
            <remarks>
            This is equivalent to <c>180 / MathF.Pi</c>
            </remarks>
        </member>
        <member name="F:Silk.NET.Maths.Scalar`1.RadiansPerDegree">
            <summary>
            Represents the number of radians in a single degree.
            </summary>
            <remarks>
            This is equivalent to <c>MathF.Pi / 180</c>.
            </remarks>
        </member>
        <member name="T:Silk.NET.Maths.Sphere`1">
            <summary>
            A structure representing a sphere using a <see cref="F:Silk.NET.Maths.Sphere`1.Center"/> and a <see cref="F:Silk.NET.Maths.Sphere`1.Radius"/>.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Sphere`1.Center">
            <summary>
            The center.
            </summary>
        </member>
        <member name="F:Silk.NET.Maths.Sphere`1.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.#ctor(Silk.NET.Maths.Vector3D{`0},`0)">
            <summary>
            Constructs a sphere from a <paramref name="center"/> and a <paramref name="radius"/>
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Constructs a sphere from components of a center and a <paramref name="radius"/>
            </summary>
            <param name="centerX">The X component of the center.</param>
            <param name="centerY">The Y component of the center.</param>
            <param name="centerZ">The Z component of the center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="P:Silk.NET.Maths.Sphere`1.Diameter">
            <summary>
            The diameter.
            </summary>
        </member>
        <member name="P:Silk.NET.Maths.Sphere`1.SquaredRadius">
            <summary>
            The radius squared.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.Contains(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates whether this sphere contains a point.
            </summary>
            <param name="point">The point.</param>
            <returns>True if this sphere contains the point; False otherwise.</returns>
            <remarks>This does consider a point on the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.Contains(Silk.NET.Maths.Sphere{`0})">
            <summary>
            Calculates whether this sphere contains another sphere
            </summary>
            <param name="other">The sphere.</param>
            <returns>True if this sphere contains the given sphere; False otherwise.</returns>
            <remarks>This does consider a sphere that touches the edge contained.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.GetDistanceToNearestEdgeSquared(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates the squared distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.GetDistanceToNearestEdge(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates the distance to the nearest edge from the point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.GetTranslated(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a new sphere translated by a given distance.
            </summary>
            <param name="distance">The distance.</param>
            <returns>The calculated sphere.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.GetInflated(Silk.NET.Maths.Vector3D{`0})">
            <summary>
            Calculates a sphere inflated to contain the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>The sphere.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.Equals(Silk.NET.Maths.Sphere{`0})">
            <summary>Returns a boolean indicating whether the given Sphere is equal to this Sphere instance.</summary>
            <param name="other">The Sphere to compare this instance to.</param>
            <returns>True if the other Sphere is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this Sphere instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Sphere; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.op_Equality(Silk.NET.Maths.Sphere{`0},Silk.NET.Maths.Sphere{`0})">
            <summary>Returns a boolean indicating whether the two given Spheres are equal.</summary>
            <param name="value1">The first Spheres to compare.</param>
            <param name="value2">The second Spheres to compare.</param>
            <returns>True if the Spheres are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.op_Inequality(Silk.NET.Maths.Sphere{`0},Silk.NET.Maths.Sphere{`0})">
            <summary>Returns a boolean indicating whether the two given Spheres are not equal.</summary>
            <param name="value1">The first Sphere to compare.</param>
            <param name="value2">The second Sphere to compare.</param>
            <returns>True if the Spheres are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Sphere`1.As``1">
            <summary>
            Returns this sphere casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted sphere</returns>
        </member>
        <member name="T:Silk.NET.Maths.SystemNumericsExtensions">
            <summary>
            A collection of extension methods to convert the float versions of the generic types into System.Numerics types.
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Matrix3X2{System.Single})">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/> into a <see cref="T:System.Numerics.Matrix3x2"/>
            </summary>
            <param name="value">The source matrix</param>
            <returns>The converted matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Matrix4X4{System.Single})">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/> into a <see cref="T:System.Numerics.Matrix4x4"/>
            </summary>
            <param name="value">The source matrix</param>
            <returns>The converted matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Plane{System.Single})">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Plane`1"/> into a <see cref="T:System.Numerics.Plane"/>
            </summary>
            <param name="value">The source plane</param>
            <returns>The converted plane</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Quaternion{System.Single})">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Quaternion`1"/> into a <see cref="T:System.Numerics.Quaternion"/>
            </summary>
            <param name="value">The source quaternion</param>
            <returns>The converted quaternion</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Vector2D{System.Single})">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into a <see cref="T:System.Numerics.Vector2"/>
            </summary>
            <param name="value">The source vector</param>
            <returns>The converted vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Vector3D{System.Single})">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into a <see cref="T:System.Numerics.Vector3"/>
            </summary>
            <param name="value">The source vector</param>
            <returns>The converted vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToSystem(Silk.NET.Maths.Vector4D{System.Single})">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into a <see cref="T:System.Numerics.Vector4"/>
            </summary>
            <param name="value">The source vector</param>
            <returns>The converted vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Matrix3x2)">
            <summary>
            Converts a <see cref="T:System.Numerics.Matrix3x2"/> into a <see cref="T:Silk.NET.Maths.Matrix3X2`1"/>
            </summary>
            <param name="value">The source matrix</param>
            <returns>The converted matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Matrix4x4)">
            <summary>
            Converts a <see cref="T:System.Numerics.Matrix4x4"/> into a <see cref="T:Silk.NET.Maths.Matrix4X4`1"/>
            </summary>
            <param name="value">The source matrix</param>
            <returns>The converted matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Plane)">
            <summary>
            Converts a <see cref="T:System.Numerics.Plane"/> into a <see cref="T:Silk.NET.Maths.Plane`1"/>
            </summary>
            <param name="value">The source plane</param>
            <returns>The converted plane</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Quaternion)">
            <summary>
            Converts a <see cref="T:System.Numerics.Quaternion"/> into a <see cref="T:Silk.NET.Maths.Quaternion`1"/>
            </summary>
            <param name="value">The source quaternion</param>
            <returns>The converted quaternion</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Vector2)">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector2"/> into a <see cref="T:Silk.NET.Maths.Vector2D`1"/>
            </summary>
            <param name="value">The source vector</param>
            <returns>The converted vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Vector3)">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector3"/> into a <see cref="T:Silk.NET.Maths.Vector3D`1"/>
            </summary>
            <param name="value">The source vector</param>
            <returns>The converted vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.SystemNumericsExtensions.ToGeneric(System.Numerics.Vector4)">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector4"/> into a <see cref="T:Silk.NET.Maths.Vector4D"/>
            </summary>
            <param name="value">The source vector</param>
            <returns>The converted vector</returns>
        </member>
        <member name="T:Silk.NET.Maths.Vector2D`1">
            <summary>A structure encapsulating two values and provides hardware accelerated methods.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector2D`1.X">
            <summary>The X component of the vector.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector2D`1.Y">
            <summary>The Y component of the vector.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.#ctor(`0)">
            <summary>Creates a new <see cref="T:Silk.NET.Maths.Vector2D`1"/> object whose two elements have the same value.</summary>
            <param name="value">The value to assign to both elements.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.#ctor(`0,`0)">
            <summary>Creates a vector whose elements have the specified values.</summary>
            <param name="x">The value to assign to the <see cref="F:Silk.NET.Maths.Vector2D`1.X"/> field.</param>
            <param name="y">The value to assign to the <see cref="F:Silk.NET.Maths.Vector2D`1.Y"/> field.</param>
        </member>
        <member name="P:Silk.NET.Maths.Vector2D`1.One">
            <summary>Gets a vector whose 2 elements are equal to one.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector2D`1.UnitX">
            <summary>Gets the vector (1,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector2D`1.UnitY">
            <summary>Gets the vector (0,1).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector2D`1.Zero">
            <summary>Returns a vector whose 2 elements are equal to zero.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector2D`1.Item(System.Int32)">
            <summary>
            Indexer for the components of this vector.
            </summary>
            <param name="i">The component to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.CopyTo(`0[])">
            <summary>Copies the elements of the vector to a specified array.</summary>
            <param name="array">The destination array.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"> is <c>null</c></paramref></exception>
            <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
            <exception cref="T:System.RankException"><paramref name="array"> is multidimensional.</paramref></exception>
            <remarks><paramref name="array"></paramref> must have at least two elements. The method copies the vector's elements starting at index 0.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the elements of the vector to a specified array starting at a specified index position.</summary>
            <param name="array">The destination array.</param>
            <param name="index">The index at which to copy the first element of the vector.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"> is <c>null</c></paramref></exception>
            <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"> is less then zero.</paramref></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"> is greater then or equal to the array length.</paramref></exception>
            <exception cref="T:System.RankException"><paramref name="array"> is multidimensional.</paramref></exception>
            <remarks>array must have a sufficient number of elements to accommodate the two vector elements. In other words, elements index and index + 1 must already exist in array.</remarks>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.Equals(Silk.NET.Maths.Vector2D{`0})">
            <summary>Returns a boolean indicating whether the given <see cref="T:Silk.NET.Maths.Vector2D`1"/> is equal to this <see cref="T:Silk.NET.Maths.Vector2D`1"/> instance.</summary>
            <param name="other">The <see cref="T:Silk.NET.Maths.Vector2D`1"/> to compare this instance to.</param>
            <returns>True if the other <see cref="T:Silk.NET.Maths.Vector2D`1"/> is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this <see cref="T:Silk.NET.Maths.Vector2D`1"/> instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector2D; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:Silk.NET.Maths.Vector2D`1.Length">
            <summary>Returns the length of the vector.</summary>
            <value>The vector's length.</value>
        </member>
        <member name="P:Silk.NET.Maths.Vector2D`1.LengthSquared">
            <summary>Returns the length of the vector squared. This operation is cheaper than Length().</summary>
            <returns>The vector's length squared.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Addition(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Division(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>Divides the first vector by the second.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Division(Silk.NET.Maths.Vector2D{`0},`0)">
            <summary>Divides the vector by the given scalar.</summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Equality(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>Returns a boolean indicating whether the two given vectors are equal.</summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Inequality(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>Returns a boolean indicating whether the two given vectors are not equal.</summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Multiply(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>Multiplies two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Multiply(Silk.NET.Maths.Vector2D{`0},`0)">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Multiply(`0,Silk.NET.Maths.Vector2D{`0})">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Subtraction(Silk.NET.Maths.Vector2D{`0},Silk.NET.Maths.Vector2D{`0})">
            <summary>Subtracts the second vector from the first.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_UnaryNegation(Silk.NET.Maths.Vector2D{`0})">
            <summary>Negates a given vector.</summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.ToString">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector2D`1"/> instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.ToString(System.String)">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector2D`1"/> instance, using the specified format to format individual elements.</summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.ToString(System.String,System.IFormatProvider)">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector2D`1"/> instance, using the specified format to format individual elements and the given IFormatProvider.</summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~System.Numerics.Vector2">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into <see cref="T:System.Numerics.Vector2"/>
            </summary>
            <param name="from">The source vector</param>
            <returns>The <see cref="N:System.Numerics"/> vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.op_Explicit(Silk.NET.Maths.Vector2D{`0})~Silk.NET.Maths.Vector2D{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector2D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D`1.As``1">
            <summary>
            Returns this vector casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted vector</returns>
        </member>
        <member name="T:Silk.NET.Maths.Vector2D">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Vector2D`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Abs``1(Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns a vector whose elements are the absolute values of each of the specified vector's elements.</summary>
            <param name="value">A vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Add``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Adds two vectors together.</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Clamp``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Restricts a vector between a minimum and a maximum value.</summary>
            <param name="value1">The vector to restrict.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Distance``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Computes the Euclidean distance between the two given points.</summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.DistanceSquared``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns the Euclidean distance squared between two specified points.</summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Divide``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Divides the first vector by the second.</summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Divide``1(Silk.NET.Maths.Vector2D{``0},``0)">
            <summary>Divides the specified vector by a specified scalar value.</summary>
            <param name="left">The vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The vector that results from the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Dot``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns the dot product of two vectors.</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Lerp``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0},``0)">
            <summary>Linearly interpolates between two vectors based on the given weighting.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Max``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors</summary>
            <param name="value1">The first source vector</param>
            <param name="value2">The second source vector</param>
            <returns>The maximized vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Min``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Multiply``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Multiplies two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Multiply``1(Silk.NET.Maths.Vector2D{``0},``0)">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Multiply``1(``0,Silk.NET.Maths.Vector2D{``0})">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Negate``1(Silk.NET.Maths.Vector2D{``0})">
            <summary>Negates a given vector.</summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Normalize``1(Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns a vector with the same direction as the given vector, but with a length of 1.</summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Reflect``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns the reflection of a vector off a surface that has the specified normal.</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.SquareRoot``1(Silk.NET.Maths.Vector2D{``0})">
            <summary>Returns a vector whose elements are the square root of each of the source vector's elements.</summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Subtract``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Vector2D{``0})">
            <summary>Subtracts the second vector from the first.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Transform``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a vector by the given matrix.</summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.TransformNormal``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a vector normal by the given matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Transform``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms a vector by the given Quaternion rotation value.</summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Transform``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Transforms a vector by the given matrix.</summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.TransformNormal``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Transforms a vector normal by the given matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Multiply``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix2X4{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Multiply``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix2X3{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector2D.Multiply``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix2X2{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Vector3D`1">
            <summary>A structure encapsulating three values and provides hardware accelerated methods.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector3D`1.X">
            <summary>The X component of the vector.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector3D`1.Y">
            <summary>The Y component of the vector.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector3D`1.Z">
            <summary>The Z component of the vector.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.#ctor(`0)">
            <summary>Constructs a vector whose elements are all the single specified value.</summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.#ctor(Silk.NET.Maths.Vector2D{`0},`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Vector3D`1"/> from the given <see cref="T:Silk.NET.Maths.Vector2D`1"/> and a third value.</summary>
            <param name="value">The Vector to extract X and Y components from.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.#ctor(`0,`0,`0)">
            <summary>Constructs a vector with the given individual elements.</summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.Zero">
            <summary>Returns the vector (0,0,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.One">
            <summary>Returns the vector (1,1,1).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.UnitX">
            <summary>Returns the vector (1,0,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.UnitY">
            <summary>Returns the vector (0,1,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.UnitZ">
            <summary>Returns the vector (0,0,1).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.Item(System.Int32)">
            <summary>
            Indexer for the components of this vector.
            </summary>
            <param name="i">The component to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Addition(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Division(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>Divides the first vector by the second.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Division(Silk.NET.Maths.Vector3D{`0},`0)">
            <summary>Divides the vector by the given scalar.</summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Equality(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>Returns a boolean indicating whether the two given vectors are equal.</summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Inequality(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>Returns a boolean indicating whether the two given vectors are not equal.</summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Multiply(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>Multiplies two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Multiply(Silk.NET.Maths.Vector3D{`0},`0)">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Multiply(`0,Silk.NET.Maths.Vector3D{`0})">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Subtraction(Silk.NET.Maths.Vector3D{`0},Silk.NET.Maths.Vector3D{`0})">
            <summary>Subtracts the second vector from the first.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_UnaryNegation(Silk.NET.Maths.Vector3D{`0})">
            <summary>Negates a given vector.</summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.CopyTo(`0[])">
            <summary>Copies the contents of the vector into the given array.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the contents of the vector into the given array, starting from index.</summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array.</exception>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this <see cref="T:Silk.NET.Maths.Vector3D`1"/> instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector3D; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.Equals(Silk.NET.Maths.Vector3D{`0})">
            <summary>Returns a boolean indicating whether the given <see cref="T:Silk.NET.Maths.Vector3D`1"/> is equal to this <see cref="T:Silk.NET.Maths.Vector3D`1"/> instance.</summary>
            <param name="other">The <see cref="T:Silk.NET.Maths.Vector3D`1"/> to compare this instance to.</param>
            <returns>True if the other <see cref="T:Silk.NET.Maths.Vector3D`1"/> is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.Length">
            <summary>Returns the length of the vector.</summary>
            <value>The vector's length.</value>
        </member>
        <member name="P:Silk.NET.Maths.Vector3D`1.LengthSquared">
            <summary>Returns the length of the vector squared. This operation is cheaper than Length().</summary>
            <value>The vector's length squared.</value>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.ToString">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector3D`1"/> instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.ToString(System.String)">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector3D`1"/> instance, using the specified format to format individual elements.</summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.ToString(System.String,System.IFormatProvider)">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector3D`1"/> instance, using the specified format to format individual elements and the given IFormatProvider.</summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~System.Numerics.Vector3">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into <see cref="T:System.Numerics.Vector3"/>
            </summary>
            <param name="from">The source vector</param>
            <returns>The <see cref="N:System.Numerics"/> vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.op_Explicit(Silk.NET.Maths.Vector3D{`0})~Silk.NET.Maths.Vector3D{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector3D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D`1.As``1">
            <summary>
            Returns this vector casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted vector</returns>
        </member>
        <member name="T:Silk.NET.Maths.Vector3D">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Vector3D`1"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Abs``1(Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns a vector whose elements are the absolute values of each of the source vector's elements.</summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Add``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Adds two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Clamp``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Restricts a vector between a min and max value.</summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Cross``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Computes the cross product of two vectors.</summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The cross product.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Distance``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns the Euclidean distance between the two given points.</summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.DistanceSquared``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns the Euclidean distance squared between the two given points.</summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Divide``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Divides the first vector by the second.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Divide``1(Silk.NET.Maths.Vector3D{``0},``0)">
            <summary>Divides the vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Dot``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns the dot product of two vectors.</summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Lerp``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0},``0)">
            <summary>Linearly interpolates between two vectors based on the given weighting.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Max``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Min``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Multiply``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Multiplies two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Multiply``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix3X4{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Multiply``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix3X3{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Multiply``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix3X2{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Multiply``1(Silk.NET.Maths.Vector3D{``0},``0)">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Multiply``1(``0,Silk.NET.Maths.Vector3D{``0})">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Negate``1(Silk.NET.Maths.Vector3D{``0})">
            <summary>Negates a given vector.</summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Normalize``1(Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns a vector with the same direction as the given vector, but with a length of 1.</summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Reflect``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns the reflection of a vector off a surface that has the specified normal.</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">The normal of the surface being reflected off.</param>
            <returns>The reflected vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.SquareRoot``1(Silk.NET.Maths.Vector3D{``0})">
            <summary>Returns a vector whose elements are the square root of each of the source vector's elements.</summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Subtract``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Vector3D{``0})">
            <summary>Subtracts the second vector from the first.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Transform``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a vector by the given matrix.</summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.Transform``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms a vector by the given Quaternion rotation value.</summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector3D.TransformNormal``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a vector normal by the given matrix.</summary>
            <param name="normal">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="T:Silk.NET.Maths.Vector4D`1">
            <summary>A structure encapsulating four single precision floating point values and provides hardware accelerated methods.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector4D`1.X">
            <summary>The X component of the vector.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector4D`1.Y">
            <summary>The Y component of the vector.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector4D`1.Z">
            <summary>The Z component of the vector.</summary>
        </member>
        <member name="F:Silk.NET.Maths.Vector4D`1.W">
            <summary>The W component of the vector.</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.Item(System.Int32)">
            <summary>
            Indexer for the components of this vector.
            </summary>
            <param name="i">The component to select. Zero based.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.#ctor(`0)">
            <summary>Constructs a vector whose elements are all the single specified value.</summary>
            <param name="value">The element to fill the vector with.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.#ctor(Silk.NET.Maths.Vector2D{`0},`0,`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Vector4D`1"/> from the given <see cref="T:Silk.NET.Maths.Vector2D`1"/> and a Z and W component.</summary>
            <param name="value">The vector to use as the X and Y components.</param>
            <param name="z">The Z component.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.#ctor(Silk.NET.Maths.Vector3D{`0},`0)">
            <summary>Constructs a <see cref="T:Silk.NET.Maths.Vector4D`1"/> from the given <see cref="T:Silk.NET.Maths.Vector3D`1"/> and a W component.</summary>
            <param name="value">The vector to use as the X, Y, and Z components.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.#ctor(`0,`0,`0,`0)">
            <summary>Constructs a vector with the given individual elements.</summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.Zero">
            <summary>Returns the vector (0,0,0,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.One">
            <summary>Returns the vector (1,1,1,1).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.UnitX">
            <summary>Returns the vector (1,0,0,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.UnitY">
            <summary>Returns the vector (0,1,0,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.UnitZ">
            <summary>Returns the vector (0,0,1,0).</summary>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.UnitW">
            <summary>Returns the vector (0,0,0,1).</summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Addition(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>Adds two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Division(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>Divides the first vector by the second.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Division(Silk.NET.Maths.Vector4D{`0},`0)">
            <summary>Divides the vector by the given scalar.</summary>
            <param name="value1">The source vector.</param>
            <param name="value2">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Equality(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>Returns a boolean indicating whether the two given vectors are equal.</summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Inequality(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>Returns a boolean indicating whether the two given vectors are not equal.</summary>
            <param name="left">The first vector to compare.</param>
            <param name="right">The second vector to compare.</param>
            <returns>True if the vectors are not equal; False if they are equal.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Multiply(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>Multiplies two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Multiply(Silk.NET.Maths.Vector4D{`0},`0)">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Multiply(`0,Silk.NET.Maths.Vector4D{`0})">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Subtraction(Silk.NET.Maths.Vector4D{`0},Silk.NET.Maths.Vector4D{`0})">
            <summary>Subtracts the second vector from the first.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_UnaryNegation(Silk.NET.Maths.Vector4D{`0})">
            <summary>Negates a given vector.</summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.CopyTo(`0[])">
            <summary>Copies the contents of the vector into the given array.</summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the contents of the vector into the given array, starting from index.</summary>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.RankException">If array is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array.</exception>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.Equals(Silk.NET.Maths.Vector4D{`0})">
            <summary>Returns a boolean indicating whether the given <see cref="T:Silk.NET.Maths.Vector4D`1"/> is equal to this <see cref="T:Silk.NET.Maths.Vector4D`1"/> instance.</summary>
            <param name="other">The <see cref="T:Silk.NET.Maths.Vector4D`1"/> to compare this instance to.</param>
            <returns>True if the other <see cref="T:Silk.NET.Maths.Vector4D`1"/> is equal to this instance; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.Equals(System.Object)">
            <summary>Returns a boolean indicating whether the given Object is equal to this <see cref="T:Silk.NET.Maths.Vector4D`1"/> instance.</summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this Vector4D; False otherwise.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.Length">
            <summary>Returns the length of the vector. This operation is cheaper than Length().</summary>
            <value>The vector's length.</value>
        </member>
        <member name="P:Silk.NET.Maths.Vector4D`1.LengthSquared">
            <summary>Returns the length of the vector squared.</summary>
            <value>The vector's length squared.</value>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.ToString">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector4D`1"/> instance.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.ToString(System.String)">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector4D`1"/> instance, using the specified format to format individual elements.</summary>
            <param name="format">The format of individual elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.ToString(System.String,System.IFormatProvider)">
            <summary>Returns a String representing this <see cref="T:Silk.NET.Maths.Vector4D`1"/> instance, using the specified format to format individual elements
            and the given IFormatProvider.</summary>
            <param name="format">The format of individual elements.</param>
            <param name="formatProvider">The format provider to use when formatting elements.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Half}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Half"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Half"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Single}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Single"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Single"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~System.Numerics.Vector4">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D`1"/> into <see cref="T:System.Numerics.Vector4"/>
            </summary>
            <param name="from">The source vector</param>
            <returns>The <see cref="N:System.Numerics"/> vector</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Double}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D`1"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Double"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Double"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Decimal}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Decimal"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Decimal"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.SByte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.SByte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.SByte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Byte}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Byte"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Byte"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.UInt16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Int16}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int16"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int16"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.UInt32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Int32}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int32"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int32"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.UInt64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.UInt64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.UInt64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.op_Explicit(Silk.NET.Maths.Vector4D{`0})~Silk.NET.Maths.Vector4D{System.Int64}">
            <summary>
            Converts a <see cref="T:Silk.NET.Maths.Vector4D"/> into one with a <typeparamref name="T"/> of <see cref="T:System.Int64"/>
            </summary>
            <param name="from">The source matrix</param>
            <returns>The <see cref="T:System.Int64"/> matrix</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D`1.As``1">
            <summary>
            Returns this vector casted to <typeparamref name="TOther"></typeparamref>
            </summary>
            <typeparam name="TOther">The type to cast to</typeparam>
            <returns>The casted vector</returns>
        </member>
        <member name="T:Silk.NET.Maths.Vector4D">
            <summary>
            Methods for working with <see cref="T:Silk.NET.Maths.Vector4D"/>
            </summary>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Abs``1(Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns a vector whose elements are the absolute values of each of the source vector's elements.</summary>
            <param name="value">The source vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Add``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Adds two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The summed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Clamp``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Restricts a vector between a min and max value.</summary>
            <param name="value1">The source vector.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The restricted vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Distance``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns the Euclidean distance between the two given points.</summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.DistanceSquared``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns the Euclidean distance squared between the two given points.</summary>
            <param name="value1">The first point.</param>
            <param name="value2">The second point.</param>
            <returns>The distance squared.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Divide``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Divides the first vector by the second.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The vector resulting from the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Divide``1(Silk.NET.Maths.Vector4D{``0},``0)">
            <summary>Divides the vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="divisor">The scalar value.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Dot``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns the dot product of two vectors.</summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Lerp``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0},``0)">
            <summary>Linearly interpolates between two vectors based on the given weighting.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of the second source vector.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Max``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The maximized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Min``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors.</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>The minimized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Multiply``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Multiplies two vectors together.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Multiply``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Multiply``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Matrix4X3{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Multiply``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Matrix4X2{``0})">
            <summary>Multiplies a vector by a matrix.</summary>
            <param name="value1">The vector.</param>
            <param name="value2">The matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Multiply``1(Silk.NET.Maths.Vector4D{``0},``0)">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The source vector.</param>
            <param name="right">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Multiply``1(``0,Silk.NET.Maths.Vector4D{``0})">
            <summary>Multiplies a vector by the given scalar.</summary>
            <param name="left">The scalar value.</param>
            <param name="right">The source vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Negate``1(Silk.NET.Maths.Vector4D{``0})">
            <summary>Negates a given vector.</summary>
            <param name="value">The source vector.</param>
            <returns>The negated vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Normalize``1(Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns a vector with the same direction as the given vector, but with a length of 1.</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.SquareRoot``1(Silk.NET.Maths.Vector4D{``0})">
            <summary>Returns a vector whose elements are the square root of each of the source vector's elements.</summary>
            <param name="value">The source vector.</param>
            <returns>The square root vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Subtract``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Vector4D{``0})">
            <summary>Subtracts the second vector from the first.</summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>The difference vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Transform``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a vector by the given matrix.</summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Transform``1(Silk.NET.Maths.Vector2D{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms a vector by the given Quaternion rotation value.</summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Transform``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a vector by the given matrix.</summary>
            <param name="position">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Transform``1(Silk.NET.Maths.Vector3D{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms a vector by the given Quaternion rotation value.</summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Transform``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Matrix4X4{``0})">
            <summary>Transforms a vector by the given matrix.</summary>
            <param name="vector">The source vector.</param>
            <param name="matrix">The transformation matrix.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:Silk.NET.Maths.Vector4D.Transform``1(Silk.NET.Maths.Vector4D{``0},Silk.NET.Maths.Quaternion{``0})">
            <summary>Transforms a vector by the given Quaternion rotation value.</summary>
            <param name="value">The source vector to be rotated.</param>
            <param name="rotation">The rotation to apply.</param>
            <returns>The transformed vector.</returns>
        </member>
    </members>
</doc>
