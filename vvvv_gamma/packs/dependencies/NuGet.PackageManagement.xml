<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.PackageManagement</name>
    </assembly>
    <members>
        <member name="T:NuGet.ProjectManagement.BuildIntegratedInstallationContext">
            <summary>
            Information used by <see cref="T:NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject" /> when installing a package.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.BuildIntegratedInstallationContext.SuccessfulFrameworks">
            <summary>
            Shows the frameworks for which a preview restore operation was successful. Only use it
            in case of single package install case, and only for CpsPackageReference projects.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.BuildIntegratedInstallationContext.UnsuccessfulFrameworks">
            <summary>
            Shows the frameworks for which a preview restore operation was unsuccessful. Only use it
            in case of single package install case, and only for CpsPackageReference projects.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.BuildIntegratedInstallationContext.OriginalFrameworks">
            <summary>
            A mapping to allow the original framework string to fetched. This is important because MSBuild target
            framework evaluation depends on the target framework string matching exactly.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.BuildIntegratedInstallationContext.SuppressParent">
            <summary>
            Define transitive behavior for each package dependency for the current project.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.BuildIntegratedInstallationContext.IncludeType">
            <summary>
            Define what all sections of the current package to include in this project.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.BuildIntegratedPackageReference">
            <summary>
            Extends PackageReference to include the original LibraryDependency data.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.BuildIntegratedPackageReference.Dependency">
            <summary>
            LibraryDependency from the project.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedPackageReference.#ctor(NuGet.LibraryModel.LibraryDependency,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Create a PackageReference based on a LibraryDependency.
            </summary>
            <param name="dependency">Full PackageReference metadata.</param>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedPackageReference.#ctor(NuGet.LibraryModel.LibraryDependency,NuGet.Frameworks.NuGetFramework,NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Create a PackageReference based on a LibraryDependency.
            </summary>
            <param name="dependency">Full PackageReference metadata.</param>
            <param name="installedVersion">Package installed.</param>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedPackageReference.GetIdentity(NuGet.LibraryModel.LibraryDependency)">
            <summary>
            Convert range to a PackageIdentity
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedPackageReference.GetAllowedVersions(NuGet.LibraryModel.LibraryDependency)">
            <summary>
            Get allowed version range.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.DependencyGraphCacheContext.DependencyGraphCache">
            <summary>
            Unique name to dg
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.DependencyGraphCacheContext.PackageSpecCache">
            <summary>
            Unique name to PackageSpec
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.DependencyGraphCacheContext.DirectReferenceCache">
            <summary>
            Cache for direct project references of a project
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.DependencyGraphCacheContext.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.IPackageEventsProvider">
            <summary>
            Internal version of the public IVsPackageInstallerEvents
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.PackageEventArgs.#ctor">
            <summary>
            Default constructor for events where no info is known
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.PackageEventArgs.Identity">
            <summary>
            Package identity
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.PackageEventArgs.InstallPath">
            <summary>
            Folder path of the package
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.PackageEventArgs.Project">
            <summary>
            Project where the action occurred
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.PackageEvents">
            <summary>
            Package events relayed to the public IVsPackageInstallerEvents
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.PackageEvents.PackageInstalling">
            <summary>
            Raised when a package is about to be installed into the current solution.
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.PackageEvents.PackageInstalled">
            <summary>
            Raised after a package has been installed into the current solution.
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.PackageEvents.PackageUninstalling">
            <summary>
            Raised when a package is about to be uninstalled from the current solution.
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.PackageEvents.PackageUninstalled">
            <summary>
            Raised after a package has been uninstalled from the current solution.
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.PackageEvents.PackageReferenceAdded">
            <summary>
            Raised after a package has been installed into a project within the current solution.
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.PackageEvents.PackageReferenceRemoved">
            <summary>
            Raised after a package has been uninstalled from a project within the current solution.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.PackageEventsProvider">
            <summary>
            Provider for the PackageEvents singleton
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.IPackageFileTransformer">
            <summary>
            Represents a package file transformer.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IPackageFileTransformer.TransformFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously transforms a file.
            </summary>
            <param name="streamTaskFactory">A stream task factory.</param>
            <param name="targetPath">A path to the file to be transformed.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.IPackageFileTransformer.RevertFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.InternalZipFileInfo},NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reverses the transform on the targetPath, using all the potential source of change.
            </summary>
            <param name="streamTaskFactory">A factory for accessing the file to be reverted from the nupkg being uninstalled.</param>
            <param name="targetPath">A path to the file to be reverted.</param>
            <param name="matchingFiles">Other files in other packages that may have changed the <paramref name="targetPath" />.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="matchingFiles" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.ProjectManagement.Preprocessor">
            <summary>
            Simple token replacement system for content files.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.Preprocessor.TransformFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously transforms a file.
            </summary>
            <param name="streamTaskFactory">A stream task factory.</param>
            <param name="targetPath">A path to the file to be transformed.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.Preprocessor.RevertFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.InternalZipFileInfo},NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reverses the transform on the targetPath, using all the potential source of change.
            </summary>
            <param name="streamTaskFactory">A factory for accessing the file to be reverted from the nupkg being uninstalled.</param>
            <param name="targetPath">A path to the file to be reverted.</param>
            <param name="matchingFiles">Other files in other packages that may have changed the <paramref name="targetPath" />.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.ProjectManagement.XdtTransformer">
            <summary>
            An XDT project file transformer.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.XdtTransformer.TransformFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously transforms a file.
            </summary>
            <param name="streamTaskFactory">A stream task factory.</param>
            <param name="targetPath">A path to the file to be transformed.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.XdtTransformer.RevertFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.InternalZipFileInfo},NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reverses the transform on the targetPath, using all the potential source of change.
            </summary>
            <param name="streamTaskFactory">A factory for accessing the file to be reverted from the nupkg being uninstalled.</param>
            <param name="targetPath">A path to the file to be reverted.</param>
            <param name="matchingFiles">Other files in other packages that may have changed the <paramref name="targetPath" />.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="matchingFiles" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.ProjectManagement.XmlTransformer">
            <summary>
            An XML project file transformer.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.XmlTransformer.#ctor(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Action{System.Xml.Linq.XElement,System.Xml.Linq.XElement}})">
            <summary>
            Initializes a new <see cref="T:NuGet.ProjectManagement.XmlTransformer" /> class.
            </summary>
            <param name="nodeActions">A dictionary of XML node names to node actions.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nodeActions" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.XmlTransformer.TransformFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously transforms a file.
            </summary>
            <param name="streamTaskFactory">A stream task factory.</param>
            <param name="targetPath">A path to the file to be transformed.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.XmlTransformer.RevertFileAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.String,System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.InternalZipFileInfo},NuGet.ProjectManagement.IMSBuildProjectSystem,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reverses the transform on the targetPath, using all the potential source of change.
            </summary>
            <param name="streamTaskFactory">A factory for accessing the file to be reverted from the nupkg being uninstalled.</param>
            <param name="targetPath">A path to the file to be reverted.</param>
            <param name="matchingFiles">Other files in other packages that may have changed the <paramref name="targetPath" />.</param>
            <param name="projectSystem">The project where this change is taking place.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="projectSystem" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.ProjectManagement.IDependencyGraphProject">
            <summary>
            Represents the interface necessary for adding a project to a <see cref="T:NuGet.ProjectModel.DependencyGraphSpec" />-based restore.
            This interface has logic for creating the <see cref="T:NuGet.ProjectModel.PackageSpec" /> as well as for detecting no-op cases where
            a restore is not necessary.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.IDependencyGraphProject.MSBuildProjectPath">
            <summary>
            Gets the path to the MSBuild project file. This is an absolute path.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IDependencyGraphProject.GetPackageSpecsAsync(NuGet.ProjectManagement.DependencyGraphCacheContext)">
            <summary>
            Project specs related to this project. This must include the project's own spec, and may
            optionally include more specs to restore such as tools.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IDependencyGraphProject.GetPackageSpecsAndAdditionalMessagesAsync(NuGet.ProjectManagement.DependencyGraphCacheContext)">
            <summary>
            Project specs related to this project. This must include the project's own spec, and may
            optionally include more specs to restore such as tools.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.INuGetProjectContext">
            <summary>
            Comprises of the various client context such as logging, fileconflictaction
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.INuGetProjectContext.Log(NuGet.ProjectManagement.MessageLevel,System.String,System.Object[])">
            <summary>
            Logs a message for the given project context
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.INuGetProjectContext.Log(NuGet.Common.ILogMessage)">
            <summary>
            Logs a message for the given project context
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.INuGetProjectContext.ReportError(System.String)">
            <summary>
            Logs an error for the given project context
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.INuGetProjectContext.ReportError(NuGet.Common.ILogMessage)">
            <summary>
            Logs an error or warning for the given project context
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.INuGetProjectContext.ResolveFileConflict(System.String)">
            <summary>
            Resolves a file conflict for the given project context
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.INuGetProjectContext.OriginalPackagesConfig">
            <summary>
            The original packages.config. This is set by package management
            before the actions are executed.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.LoggerAdapter">
            <summary>
            ILogger -&gt; INuGetProjectContext
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.MessageLevel">
            <summary>
            MessageLevel
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.MessageLevel.Info">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.MessageLevel.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.MessageLevel.Debug">
            <summary>
            Debug only
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.MessageLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.MessageLevelExtensions">
            <summary> Extension methods for <see cref="T:NuGet.ProjectManagement.MessageLevel" />. </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.MessageLevelExtensions.ToLogLevel(NuGet.ProjectManagement.MessageLevel)">
            <summary> Convert <see cref="T:NuGet.ProjectManagement.MessageLevel" /> to <see cref="T:NuGet.Common.LogLevel" />. </summary>
            <param name="messageLevel"> Message level. </param>
            <returns> Corresponding log level. </returns>
        </member>
        <member name="T:NuGet.ProjectManagement.NuGetActionType">
            <summary>
            Enum for the type of NuGetAction
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetActionType.Install">
            <summary>
            Install
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetActionType.Uninstall">
            <summary>
            Uninstall
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetActionType.Reinstall">
            <summary>
            Reinstall
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetActionType.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetActionType.UpdateAll">
            <summary>
            UpdateAll
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject">
            <summary>
            A NuGet integrated MSBuild project.k
            These projects contain a project.json or package references in CSProj
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject.GetAssetsFilePathAsync">
            <summary>
            Returns the path to the assets file or the lock file. Throws an exception if the assets file path cannot be
            determined.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject.GetAssetsFilePathOrNullAsync">
            <summary>
            Returns the path to the assets file or the lock file. Returns null if the assets file path cannot be
            determined.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject.AddFileToProjectAsync(System.String)">
            <summary>
            Add specified file to Project system
            </summary>
            <param name="filePath">file to be added</param>
            <returns></returns>
        </member>
        <member name="T:NuGet.ProjectManagement.Projects.INuGetIntegratedProject">
            <summary>
            A NuGet aware project system
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.Projects.ProjectJsonNuGetProject">
            <summary>
            A NuGet integrated MSBuild project.k
            These projects contain a project.json
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.Projects.ProjectJsonNuGetProject.#ctor(System.String,System.String)">
            <summary>
            Project.json based project system.
            </summary>
            <param name="jsonConfig">Path to project.json.</param>
            <param name="msBuildProjectPath">Path to the msbuild project file.</param>
        </member>
        <member name="P:NuGet.ProjectManagement.Projects.ProjectJsonNuGetProject.JsonConfigPath">
            <summary>
            project.json path
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.Projects.ProjectJsonNuGetProject.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.Projects.ProjectJsonNuGetProject.RemoveDependencyAsync(System.String,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Uninstall a package from the config file.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.DefaultProjectServices">
            <summary>
            Null-object with no-op implementation of project services.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.FolderNuGetProject">
            <summary>
            This class represents a NuGetProject based on a folder such as packages folder on a VisualStudio solution
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.FolderNuGetProject.Root">
            <summary>
            Gets the folder project's root path.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:NuGet.ProjectManagement.FolderNuGetProject" /> class.
            </summary>
            <param name="root">The folder project root path.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="root" /> is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.#ctor(System.String,NuGet.Packaging.PackagePathResolver)">
            <summary>
            Initializes a new <see cref="T:NuGet.ProjectManagement.FolderNuGetProject" /> class.
            </summary>
            <param name="root">The folder project root path.</param>
            <param name="packagePathResolver">A package path resolver.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="root" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packagePathResolver" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.#ctor(System.String,NuGet.Packaging.PackagePathResolver,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Initializes a new <see cref="T:NuGet.ProjectManagement.FolderNuGetProject" /> class.
            </summary>
            <param name="root">The folder project root path.</param>
            <param name="packagePathResolver">A package path resolver.</param>
            <param name="targetFramework">Project target framework.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="root" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packagePathResolver" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="targetFramework" /> is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.GetInstalledPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets installed packages.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.InstallPackageAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.DownloadResourceResult,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously installs a package.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <param name="downloadResourceResult">A download resource result.</param>
            <param name="nuGetProjectContext">A NuGet project context.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indication successfulness of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="downloadResourceResult" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nuGetProjectContext" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the package stream for
            <paramref name="downloadResourceResult" /> is not seekable.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.UninstallPackageAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously uninstalls a package.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <param name="nuGetProjectContext">A NuGet project context.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indication successfulness of the operation.</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.PackageExists(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Determines if a package is installed based on the presence of a .nupkg file.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <returns>A flag indicating whether or not the package is installed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.PackageExists(NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.PackageSaveMode)">
            <summary>
            Determines if a package is installed based on the provided package save mode.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <param name="packageSaveMode">A package save mode.</param>
            <returns>A flag indicating whether or not the package is installed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.ManifestExists(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Determines if a manifest is installed.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <returns>A flag indicating whether or not the package is installed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.PackageAndManifestExists(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Determines if a manifest is installed.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <returns>A flag indicating whether or not the package is installed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.CopySatelliteFilesAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies satellite files.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <param name="nuGetProjectContext">A NuGet project context.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indication successfulness of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nuGetProjectContext" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="token" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.GetInstalledPackageFilePath(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Gets the package .nupkg file path if it exists; otherwise, <c>null</c>.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <returns>The package .nupkg file path if it exists; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.GetInstalledManifestFilePath(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Gets the package .nuspec file path if it exists; otherwise, <c>null</c>.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <returns>The package .nuspec file path if it exists; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.GetPackageDownloadMarkerFilePath(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Gets the package download marker file path if it exists; otherwise, <c>null</c>.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <returns>The package download marker file path if it exists; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.GetInstalledPath(NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Gets the package directory path if the package exists; otherwise, <c>null</c>.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <returns>The package directory path if the package exists; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FolderNuGetProject.DeletePackage(NuGet.Packaging.Core.PackageIdentity,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a package.
            </summary>
            <param name="packageIdentity">A package identity.</param>
            <param name="nuGetProjectContext">A NuGet project context.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indication successfulness of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nuGetProjectContext" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.IMSBuildProjectSystem.AddReferenceAsync(System.String)">
            <summary>
            Method called when adding an assembly reference to the project.
            </summary>
            <param name="referencePath">Physical path to the assembly file relative to the project root.</param>
        </member>
        <member name="M:NuGet.ProjectManagement.IMSBuildProjectSystem.AddFrameworkReferenceAsync(System.String,System.String)">
            <summary>
            Adds an assembly reference to a framework assembly (one in the GAC).
            </summary>
            <param name="name">name of the assembly</param>
        </member>
        <member name="M:NuGet.ProjectManagement.IMSBuildProjectSystem.RegisterProcessedFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This method can be called multiple times during a batch operation in between a single BeginProcessingAsync/EndProcessingAsync calls.
            </summary>
            <param name="files">a list of files being changed.</param>
        </member>
        <member name="M:NuGet.ProjectManagement.IMSBuildProjectSystem.GetFullPaths(System.String)">
            <summary>
            Returns the list of full paths of the files in the project that match the file name.
            </summary>
            <param name="fileName">the file name</param>
            <returns>The list of full paths.</returns>
            <remarks>We should combine GetFiles &amp; GetFullPaths into one method.</remarks>
        </member>
        <member name="M:NuGet.ProjectManagement.IMSBuildProjectSystem.GetDirectories(System.String)">
            <summary>
            Returns the directories under the directory <paramref name="path" />.
            </summary>
            <param name="path">The directory under which to search for subdirectories.</param>
            <returns>The list of subdirectories in relative path.</returns>
        </member>
        <member name="T:NuGet.ProjectManagement.INuGetProjectServices">
            <summary>
            Provides an API to a collection of <see cref="T:NuGet.ProjectManagement.NuGetProject" /> scoped services, such as
            - project references
            - assembly references
            - project capabilities
            - binding redirects
            - script executor
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.INuGetProjectServices.BuildProperties">
            <summary>
            Service to access project's build properties.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.INuGetProjectServices.Capabilities">
            <summary>
            Service to query project system capabilities.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.INuGetProjectServices.ReferencesReader">
            <summary>
            Service providing read-only access to references.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.INuGetProjectServices.References">
            <summary>
            Service to control references.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.INuGetProjectServices.ProjectSystem">
            <summary>
            Service providing project system generic functionality.
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.INuGetProjectServices.ScriptService">
            <summary>
            Service to execute package scripts.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.IProjectBuildProperties">
            <summary>
            Represents an API providing read-only access to 
            project's build properties.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectBuildProperties.GetPropertyValue(System.String)">
            <summary>
            Returns a property value.
            </summary>
            <param name="propertyName">A property name</param>
            <returns>Property value or <code>null</code> if not found.</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectBuildProperties.GetPropertyValueAsync(System.String)">
            <summary>
            Asynchronous method to retrieve a property value.
            </summary>
            <param name="propertyName">A property name</param>
            <returns>Property value or <code>null</code> if not found.</returns>
        </member>
        <member name="T:NuGet.ProjectManagement.IProjectScriptHostService">
            <summary>
            A service API providing methods of executing package scripts for the underlying project.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectScriptHostService.ExecutePackageScriptAsync(NuGet.Packaging.Core.PackageIdentity,System.String,System.String,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Executes a package script in the project's context.
            </summary>
            <param name="packageIdentity">Package id</param>
            <param name="packageInstallPath">Package install path</param>
            <param name="scriptRelativePath">Script path relative to the package install path</param>
            <param name="projectContext">Project context</param>
            <param name="throwOnFailure">Flag to control error handling</param>
            <param name="token">A cancellation token</param>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectScriptHostService.ExecutePackageInitScriptAsync(NuGet.Packaging.Core.PackageIdentity,System.String,NuGet.ProjectManagement.INuGetProjectContext,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Executes init.ps1 package script in the project's context.
            </summary>
            <param name="packageIdentity">Package id</param>
            <param name="packageInstallPath">Package files location</param>
            <param name="projectContext">Project context</param>
            <param name="throwOnFailure">Flag to control error handling</param>
            <param name="token">A cancellation token</param>
            <returns><code>true</code> if succeeded, otherwise - <code>false</code>.</returns>
        </member>
        <member name="T:NuGet.ProjectManagement.IProjectSystemCapabilities">
            <summary>
            Represents an API providing different capabilities
            exposed by a project system
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.IProjectSystemReferencesReader">
            <summary>
            Represents an API providing read-only access to references
            as exposed by the underlying project system.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectSystemReferencesReader.GetPackageReferencesAsync(NuGet.Frameworks.NuGetFramework,System.Threading.CancellationToken)">
            <summary>
            Returns a collection of package references in associated project.
            </summary>
            <param name="targetFramework">Target framework for evaluation.</param>
            <param name="token">A cancellation token.</param>
            <returns>Collection of package references as <see cref="T:NuGet.LibraryModel.LibraryDependency" /></returns>
            <exception cref="T:System.NotSupportedException">Thrown when the project system doesn't support package references.</exception>
            <remarks>A caller should verify project system's capabilities before calling this method.</remarks>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectSystemReferencesReader.GetProjectReferencesAsync(NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Returns a collection of project references in the associated project.
            </summary>
            <param name="logger">Logger instance</param>
            <param name="token">A cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:NuGet.ProjectManagement.IProjectSystemReferencesService">
            <summary>
            A service API providing methods of altering references 
            as exposed by the underlying project system.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectSystemReferencesService.AddOrUpdatePackageReferenceAsync(NuGet.LibraryModel.LibraryDependency,System.Threading.CancellationToken)">
            <summary>
            Adds a new package reference or updates the existing one.
            </summary>
            <param name="packageReference">A package reference with metadata.</param>
            <param name="token">A cancellation token.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the project system doesn't support package references.</exception>
            <remarks>A caller should verify project system's capabilities before calling this method.</remarks>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectSystemReferencesService.RemovePackageReferenceAsync(System.String)">
            <summary>
            Removes a package reference from a legacy CSProj project
            </summary>
            <param name="packageName">Name of a package to remove from project</param>
            <exception cref="T:System.NotSupportedException">Thrown when the project system doesn't support package references.</exception>
            <remarks>A caller should verify project system's capabilities before calling this method.</remarks>
        </member>
        <member name="T:NuGet.ProjectManagement.IProjectSystemService">
            <summary>
            Represents generic service API as provided by a project system.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.IProjectSystemService.SaveProjectAsync(System.Threading.CancellationToken)">
            <summary>
            Saves the underlying project.
            </summary>
            <param name="token">Cancellation token</param>
            <returns>Completion task</returns>
        </member>
        <member name="T:NuGet.ProjectManagement.MSBuildNuGetProject">
            <summary>
            This class represents a NuGetProject based on a .NET project. This also contains an instance of a
            FolderNuGetProject
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.MSBuildNuGetProject.PackageInstalling">
            <summary>
            Event to be raised while installing a package
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.MSBuildNuGetProject.PackageInstalled">
            <summary>
            Event to be raised while installing a package
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.MSBuildNuGetProject.PackageUninstalling">
            <summary>
            Event to be raised while installing a package
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.MSBuildNuGetProject.PackageUninstalled">
            <summary>
            Event to be raised while installing a package
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.MSBuildNuGetProject.PackageReferenceAdded">
            <summary>
            Event to be raised while added references to project
            </summary>
        </member>
        <member name="E:NuGet.ProjectManagement.MSBuildNuGetProject.PackageReferenceRemoved">
            <summary>
            Event to be raised while removed references from project
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.NuGetProject.InstallPackageAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.DownloadResourceResult,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            This installs a package into the NuGetProject using the <see cref="!:Stream" /> passed in
            <param name="downloadResourceResult"></param>
            should be seekable
            </summary>
            <returns>
            Returns false if the package was already present in the NuGetProject. On successful installation,
            returns true
            </returns>
        </member>
        <member name="M:NuGet.ProjectManagement.NuGetProject.UninstallPackageAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            This uninstalls the package from the NuGetProject, if found
            </summary>
            <returns>Returns false if the package was not found. On successful uninstallation, returns true</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.NuGetProject.GetInstalledPackagesAsync(System.Threading.CancellationToken)">
            <summary>
            GetInstalledPackages will be used by Dependency Resolver and more
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.ProjectManagement.NuGetProject.GetMetadataOrNull(System.String)">
            <summary>
            Get metadata value, or return null if it doesn't exist.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.ProjectManagement.NuGetProject.GetUniqueNameOrName(NuGet.ProjectManagement.NuGetProject)">
            <summary>
            This static helper method returns the unique name on the project if present
            Otherwise, returns the name. If name is not present, it will throw
            </summary>
            <param name="nuGetProject"></param>
            <returns></returns>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetProjectMetadataKeys.Name">
            <summary>
            The name of the project, e.g. "ConsoleApplication1"
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetProjectMetadataKeys.UniqueName">
            <summary>
            The name of the project, relative to the solution. e.g. "src\ConsoleApplication1"
            </summary>
        </member>
        <member name="F:NuGet.ProjectManagement.NuGetProjectMetadataKeys.SupportedFrameworks">
            <summary>
            Used by Project K projects
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.PackagesConfigNuGetProject">
            <summary>
            Represents a NuGet project as represented by packages.config
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.PackagesConfigNuGetProject.PackagesConfigPath">
            <summary>
            Represents the full path to "packages.config"
            </summary>
        </member>
        <member name="P:NuGet.ProjectManagement.PackagesConfigNuGetProject.PackagesProjectNameConfigPath">
            <summary>
            Represents the full path to "packages.'projectName'.config"
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.PackagesConfigNuGetProject.PackagesConfigExists">
            <summary>
            Checks if there is a packages.config or packages.'projectName'.config file in the current project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.ProjectManagement.PackagesConfigNuGetProject.GetPackagesConfig">
            <summary>
            Retrieve the packages.config XML.
            This will return null if the file does not exist.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.ProjectBuildProperties">
            <summary>
            Collection of constants representing project build property names.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.ProjectItemProperties">
            <summary>
            Collection of constants representing project item properties names.
            </summary>
        </member>
        <member name="T:NuGet.ProjectManagement.ProjectItems">
            <summary>
            Collection of constants representing project items names.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.SourceControlManager.CreateFile(System.String,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            CreateFile does the following
            Marks the file for edit if it already exists
            Calls File.Create which creates a file or opens it if already exists
            Marks the file for add if it was just created
            It will perform necessary operations such as undoing pending changes and so on as appropriate
            </summary>
            <param name="fullPath"></param>
            <param name="nuGetProjectContext"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.ProjectManagement.SourceControlManager.PendAddFiles(System.Collections.Generic.IEnumerable{System.String},System.String,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Marks the files for addition
            It will perform necessary operations such as undoing pending changes and so on as appropriate
            </summary>
            <param name="fullPaths"></param>
            <param name="nuGetProjectContext"></param>
        </member>
        <member name="M:NuGet.ProjectManagement.SourceControlManager.PendDeleteFiles(System.Collections.Generic.IEnumerable{System.String},System.String,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Marks the files for deletion
            It will perform necessary operations such as undoing pending changes and so on as appropriate
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.SourceControlManager.IsPackagesFolderBoundToSourceControl">
            <summary>
            Determines if the packages folder is bound to SourceControl
            If so, files added to packages folder must be checked-in to SourceControl
            </summary>
            <returns></returns>
        </member>
        <member name="T:NuGet.ProjectManagement.BuildIntegratedProjectUtility">
            <summary>
            Utilities for project.json
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedProjectUtility.GetOrderedProjectPackageDependencies(NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject)">
            <summary>
            Orders all package dependencies in a project.
            Project must be restored.
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedProjectUtility.GetLockFileOrNull(NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject)">
            <summary>
            Read lock file
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedProjectUtility.GetLockFileOrNull(System.String)">
            <summary>
            Read lock file
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedProjectUtility.GetOrderedLockFilePackageDependencies(NuGet.ProjectModel.LockFile)">
            <summary>
            Lock file dependencies - packages only
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.BuildIntegratedProjectUtility.GetOrderedLockFileDependencies(NuGet.ProjectModel.LockFile)">
            <summary>
            Get ordered dependencies from the lock file
            </summary>
            <param name="lockFile"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.ProjectManagement.FileSystemUtility.CreateFile(System.String,System.String,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Creates a file, and adds it to source control.
            </summary>
            <param name="root">Root folder.</param>
            <param name="path">Relative path in the root folder.</param>
            <param name="nuGetProjectContext">the project context.</param>
            <returns>A writeable filestream.</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.FileSystemUtility.CreateFile(System.String,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Creates a file, and adds it to source control.
            </summary>
            <param name="fullPath">Full path to the suggest file.</param>
            <returns>A writeable filestream.</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.FileSystemUtility.CreateFile(System.String)">
            <summary>
            Creates a file, but doesn't add it to source control
            </summary>
            <param name="fullPath">Full path to the suggest file.</param>
            <returns>A writeable filestream.</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.FileSystemUtility.ContentEquals(System.String,System.Func{System.IO.Stream})">
            <summary>
            Determines if the contents of a file and stream are equal.
            </summary>
            <param name="path">The path to a file.</param>
            <param name="streamFactory">A stream task factory.</param>
            <returns><c>true</c> if contents are equal; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="path" /> is either
            <c>null</c> or an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamFactory" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.ProjectManagement.FileSystemUtility.ContentEqualsAsync(System.String,System.Func{System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
            Asynchronously determines if the contents of a file and stream are equal.
            </summary>
            <param name="path">The path to a file.</param>
            <param name="streamTaskFactory">A stream task factory.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            which is <c>true</c> if contents are equal; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="path" /> is either
            <c>null</c> or an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="streamTaskFactory" />
            is <c>null</c>.</exception>
        </member>
        <member name="T:NuGet.ProjectManagement.JsonConfigUtility">
            <summary>
            project.json utils
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.GetDependencies(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Read dependencies from a project.json file
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.ParseDependency(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Convert a dependency entry into an id and version range
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.AddDependency(Newtonsoft.Json.Linq.JObject,NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Add a dependency to a project.json file
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.AddDependency(Newtonsoft.Json.Linq.JObject,NuGet.Packaging.Core.PackageDependency)">
            <summary>
            Add a dependency to a project.json file
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.RemoveDependency(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Remove a dependency from a project.json file
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.GetFrameworks(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Retrieve the NuGetFrameworks under frameworks
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.AddFramework(Newtonsoft.Json.Linq.JObject,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Add the specified framework to JSON object
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.ClearFrameworks(Newtonsoft.Json.Linq.JObject)">
            <summary>
             Clear all frameworks from the JSON object
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.JsonConfigUtility.SortProperties(Newtonsoft.Json.Linq.JObject)">
            <summary>
             Sort child properties
            </summary>
        </member>
        <member name="M:NuGet.ProjectManagement.MSBuildNuGetProjectSystemUtility.Normalize(NuGet.Packaging.FrameworkSpecificGroup)">
            <summary>
            Filter out invalid package items and replace the directory separator with the correct slash for the 
            current OS.
            </summary>
            <remarks>If the group is null or contains only only _._ this method will return the same group.</remarks>
        </member>
        <member name="M:NuGet.ProjectManagement.StreamUtility.ContentEquals(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compare the content of the two streams of data, ingoring the content within the
            NUGET: BEGIN LICENSE TEXT and NUGET: END LICENSE TEXCT markers.
            </summary>
            <param name="stream">First stream</param>
            <param name="otherStream">Second stream which MUST be a seekable stream.</param>
            <returns>true if the two streams are considered equal.</returns>
        </member>
        <member name="M:NuGet.ProjectManagement.StreamUtility.ReadStreamLines(System.IO.Stream)">
            <summary>
            Read the specified stream and return all lines, but ignoring those within the
            NUGET: BEGIN LICENSE TEXT and NUGET: END LICENSE TEXT markers, case-insenstively.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.BuildIntegratedProjectAction.OriginalLockFile">
            <summary>
            Before the update
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.BuildIntegratedProjectAction.RestoreResult">
            <summary>
            After applying the changes
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.BuildIntegratedProjectAction.RestoreResultPair">
            <summary>
            After applying the changes
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.BuildIntegratedProjectAction.Sources">
            <summary>
            Sources used for package restore.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.BuildIntegratedProjectAction.OriginalActions">
            <summary>
            Original user actions.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.BuildIntegratedProjectAction.InstallationContext">
            <summary>
            The context necessary for installing a package.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.BuildIntegratedRestoreUtility">
            <summary>
            Helper class for calling the RestoreCommand
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.BuildIntegratedRestoreUtility.GetAddedPackages(NuGet.ProjectModel.LockFile,NuGet.ProjectModel.LockFile)">
            <summary>
            Find all packages added to <paramref name="updatedLockFile" />.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.BuildIntegratedRestoreUtility.GetParentProjectsInClosure(System.Collections.Generic.IReadOnlyList{NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject},NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject,NuGet.ProjectModel.DependencyGraphSpec)">
            <summary>
            Find the list of parent projects which directly or indirectly reference the child project.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.DependencyGraphRestoreUtility">
            <summary>
            Supporting methods for restoring sets of projects that implement <see cref="T:NuGet.ProjectManagement.IDependencyGraphProject" />. This
            code is used by Visual Studio to execute restores for solutions that have mixtures of UWP project.json,
            packages.config, and PackageReference-type projects.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.DependencyGraphRestoreUtility.RestoreAsync(NuGet.PackageManagement.ISolutionManager,NuGet.ProjectModel.DependencyGraphSpec,NuGet.ProjectManagement.DependencyGraphCacheContext,NuGet.Commands.RestoreCommandProvidersCache,System.Action{NuGet.Protocol.Core.Types.SourceCacheContext},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Guid,System.Boolean,System.Boolean,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restore a solution and cache the dg spec to context.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.DependencyGraphRestoreUtility.RestoreAsync(NuGet.PackageManagement.ISolutionManager,NuGet.ProjectModel.DependencyGraphSpec,NuGet.ProjectManagement.DependencyGraphCacheContext,NuGet.Commands.RestoreCommandProvidersCache,System.Action{NuGet.Protocol.Core.Types.SourceCacheContext},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Guid,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyList{NuGet.ProjectModel.IAssetsLogMessage},NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restore a solution and cache the dg spec to context.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.DependencyGraphRestoreUtility.PreviewRestoreAsync(NuGet.PackageManagement.ISolutionManager,NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject,NuGet.ProjectModel.PackageSpec,NuGet.ProjectManagement.DependencyGraphCacheContext,NuGet.Commands.RestoreCommandProvidersCache,System.Action{NuGet.Protocol.Core.Types.SourceCacheContext},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Guid,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restore a project without writing the lock file
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.DependencyGraphRestoreUtility.PreviewRestoreProjectsAsync(NuGet.PackageManagement.ISolutionManager,System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject},System.Collections.Generic.IEnumerable{NuGet.ProjectModel.PackageSpec},NuGet.ProjectManagement.DependencyGraphCacheContext,NuGet.Commands.RestoreCommandProvidersCache,System.Action{NuGet.Protocol.Core.Types.SourceCacheContext},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Guid,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restore many projects without writing the lock file
            SourceRepositories(sources) is only used for the CachingSourceProvider, the project-specific sources will still be resolved in RestoreRunner.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.DependencyGraphRestoreUtility.RestoreProjectAsync(NuGet.PackageManagement.ISolutionManager,NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject,NuGet.ProjectManagement.DependencyGraphCacheContext,NuGet.Commands.RestoreCommandProvidersCache,System.Action{NuGet.Protocol.Core.Types.SourceCacheContext},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Guid,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restore a build integrated project(PackageReference and Project.Json only) and update the lock file
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.DependencyGraphRestoreUtility.GetRestoreContext(NuGet.ProjectManagement.DependencyGraphCacheContext,NuGet.Commands.RestoreCommandProvidersCache,NuGet.Protocol.Core.Types.SourceCacheContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},NuGet.ProjectModel.DependencyGraphSpec,System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyList{NuGet.ProjectModel.IAssetsLogMessage})">
            <summary>
            Create a restore context.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.PackageReferenceRollbackException">
            <summary>
            An exception containing a generic rollback message for the user
            and additional log messages with specific information on
            what caused the rollback.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackageReferenceRollbackException.LogMessages">
            <summary>
            Additional log messages for the error list.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackageReferenceRollbackException.#ctor(System.String,System.Collections.Generic.IEnumerable{NuGet.Common.ILogMessage})">
            <summary>
            Create a PackageReferenceRollbackException
            </summary>
            <param name="message">High level exception message.</param>
            <param name="logMessages">Log messages to be shown in the error list.</param>
        </member>
        <member name="T:NuGet.PackageManagement.PackageManagementContext">
            <summary>
            Context for Package Management
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackageManagementContext.SourceRepositoryProvider">
            <summary>
            Source repository provider
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackageManagementContext.VsSolutionManager">
            <summary>
            VS solution manager
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackageManagementContext.Settings">
            <summary>
            NuGet config settings
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackageManagementContext.SourceControlManagerProvider">
            <summary>
            SourceControlManager provider
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackageManagementContext.CommonOperations">
            <summary>
            CommonOperations to openfile, and so on
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.ResolutionContext">
            <summary>
            Resolution context such as DependencyBehavior, IncludePrerelease and so on
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolutionContext.#ctor">
            <summary>
            Public constructor to create the resolution context
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolutionContext.#ctor(NuGet.Resolver.DependencyBehavior,System.Boolean,System.Boolean,NuGet.PackageManagement.VersionConstraints)">
            <summary>
            Public constructor to create the resolution context
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolutionContext.#ctor(NuGet.Resolver.DependencyBehavior,System.Boolean,System.Boolean,NuGet.PackageManagement.VersionConstraints,NuGet.PackageManagement.GatherCache,NuGet.Protocol.Core.Types.SourceCacheContext)">
            <summary>
            Public constructor to create the resolution context
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ResolutionContext.DependencyBehavior">
            <summary>
            Determines the dependency behavior
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ResolutionContext.IncludePrerelease">
            <summary>
            Determines if prerelease may be included in the installation
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ResolutionContext.IncludeUnlisted">
            <summary>
            Determines if unlisted packages may be included in installation
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ResolutionContext.VersionConstraints">
            <summary>
            Determines the containts that are placed on package update selection with respect to the installed packages
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ResolutionContext.GatherCache">
            <summary>
            Gathe cache containing cached packages that can be used across operations.
            Ex: Update-Package updates all packages across all projects, GatherCache stores
            the gathered packages and re-uses them across all sub operations.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ResolutionContext.SourceCacheContext">
            <summary>
            Http source cache context which will be shared across operations.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.UninstallationContext.RemoveDependencies">
            <summary>
            Determines if dependencies should be uninstalled during package uninstall
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.UninstallationContext.ForceRemove">
            <summary>
            Determines if the package should be uninstalled forcefully even if it may break the build
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.IPackageProjectEventsProvider">
            <summary>
            Internal version of the public IVsPackageInstallerProjectEvents
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.PackageProjectEventArgs">
            <summary>
            Event arguments for nuget batch events.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.PackageProjectEvents">
            <summary>
            Package project events relayed to the public IVsPackageInstallerProjectEvents.
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.PackageProjectEvents.BatchStart">
            <summary>
            Raised when batch processing of install/ uninstall packages starts at a project level
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.PackageProjectEvents.BatchEnd">
            <summary>
            Raised when batch processing of install/ uninstall packages ends at a project level
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.PackageProjectEventsProvider">
            <summary>
            Provider for the PackageEvents singleton
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.ActionsExecutedEventArgs">
            <summary>
            The event args of the ActionsExecuted event.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ActionsExecutedEventArgs.Actions">
            <summary>
            The list of actions that are executed.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.IDeleteOnRestartManager">
            <summary>
            Exposes methods which mark partially deleted packages and deletes them.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.IDeleteOnRestartManager.GetPackageDirectoriesMarkedForDeletion">
            <summary>
            Gets the list of package directories that are still need to be deleted in the
            local package repository.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.IDeleteOnRestartManager.CheckAndRaisePackageDirectoriesMarkedForDeletion">
            <summary>
            Checks for any pacakge directories that are pending to be deleted and raises the
            <see cref="E:NuGet.PackageManagement.IDeleteOnRestartManager.PackagesMarkedForDeletionFound" /> event.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.IDeleteOnRestartManager.MarkPackageDirectoryForDeletion(NuGet.Packaging.Core.PackageIdentity,System.String,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Marks package directory for future removal if it was not fully deleted during the normal uninstall process
            if the directory does not contain any added or modified files.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.IDeleteOnRestartManager.DeleteMarkedPackageDirectoriesAsync(NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            Attempts to remove marked package directories that were unable to be fully deleted during the original
            uninstall.
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.IDeleteOnRestartManager.PackagesMarkedForDeletionFound">
            <summary>
            Occurs when it is detected that the one or more packages are marked for deletion in the current solution.
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.IPackageRestoreManager.PackagesMissingStatusChanged">
            <summary>
            Occurs when it is detected that the packages are missing or restored for the current solution.
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.IPackageRestoreManager.PackageRestoredEvent">
            <summary>
            PackageRestoredEvent which is raised after a package is restored.
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.IPackageRestoreManager.PackageRestoreFailedEvent">
            <summary>
            PackageRestoredEvent which is raised if a package restore failed.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.IPackageRestoreManager.GetPackagesInSolutionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the packages in the solution given the <paramref name="solutionDirectory"></paramref>.
            </summary>
            <returns>
            Returns a list of package references and the corresponding project names on which
            each package is installed, alongwith a bool which determines if the package is missing
            </returns>
        </member>
        <member name="M:NuGet.PackageManagement.IPackageRestoreManager.GetPackagesRestoreData(System.String,System.Collections.Generic.Dictionary{NuGet.Packaging.PackageReference,System.Collections.Generic.List{System.String}})">
            <summary>
            Get packages restore data for given package references.
            </summary>
            <param name="solutionDirectory">Current solution directory</param>
            <param name="packageReferencesDict">Dictionary of package reference with project names</param>
            <returns>List of packages restore data with missing package details.</returns>
        </member>
        <member name="M:NuGet.PackageManagement.IPackageRestoreManager.RaisePackagesMissingEventForSolutionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks the current solution if there is any package missing.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.IPackageRestoreManager.RestoreMissingPackagesInSolutionAsync(System.String,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restores the missing packages for the current solution.
            </summary>
            <remarks>
            Best use case is the restore button that shows up in the UI or powershell when certain packages
            are missing
            </remarks>
            <returns>Returns true if atleast one package was restored.</returns>
        </member>
        <member name="M:NuGet.PackageManagement.IPackageRestoreManager.RestoreMissingPackagesInSolutionAsync(System.String,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Restores the missing packages for the current solution.
            </summary>
            <remarks>
            Best use case is the restore button that shows up in the UI or powershell when certain packages
            are missing
            </remarks>
            <returns>Returns true if atleast one package was restored.</returns>
        </member>
        <member name="M:NuGet.PackageManagement.IPackageRestoreManager.RestoreMissingPackagesAsync(System.String,System.Collections.Generic.IEnumerable{NuGet.PackageManagement.PackageRestoreData},NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restores the package references if they are missing
            </summary>
            <param name="packages">
            This parameter is the list of package referneces mapped to the list of
            project names a package is installed on. This is most likely obtained by calling
            GetPackagesInSolutionAsync
            </param>
            <remarks>
            Best use case is when GetPackagesInSolutionAsync was already called, the result can be used
            in this method
            </remarks>
            <returns>
            Returns true if at least one package is restored. Raised package restored failed event with the
            list of project names.
            </returns>
        </member>
        <member name="M:NuGet.PackageManagement.IPackageRestoreManager.RestoreMissingPackagesAsync(System.String,System.Collections.Generic.IEnumerable{NuGet.PackageManagement.PackageRestoreData},NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,System.Threading.CancellationToken)">
            <summary>
            Restores the package references if they are missing
            </summary>
            <param name="packages">
            This parameter is the list of package referneces mapped to the list of
            project names a package is installed on. This is most likely obtained by calling
            GetPackagesInSolutionAsync
            </param>
            <remarks>
            Best use case is when GetPackagesInSolutionAsync was already called, the result can be used
            in this method
            </remarks>
            <returns>
            Returns true if at least one package is restored. Raised package restored failed event with the
            list of project names.
            </returns>
        </member>
        <member name="T:NuGet.PackageManagement.PackageRestoredEventArgs">
            <summary>
            If 'Restored' is false, it means that the package was already restored
            If 'Restored' is true, the package was restored and successfully
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.ISolutionManager.ActionsExecuted">
            <summary>
            Event raised after user actions are executed.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ISolutionManager.SolutionDirectory">
            <summary>
            Gets the current open solution directory, can only be called from the main UI thread.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ISolutionManager.IsSolutionOpen">
            <summary>
            Returns true if the solution is open
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ISolutionManager.IsSolutionAvailableAsync">
            <summary>
            Returns true if the solution is available to manage nuget packages.
            That is, if the solution is open and a solution file is available.
            For solutions with only BuildIntegratedProject(s), and a globalPackagesFolder which is
            not a relative path, it will return true, even if the solution file is not available.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ISolutionManager.GetNuGetProjectSafeNameAsync(NuGet.ProjectManagement.NuGetProject)">
            <summary>
            Get the safe name of the specified <see cref="T:NuGet.ProjectManagement.NuGetProject" /> which guarantees not to conflict with other
            projects.
            </summary>
            <returns>
            Returns the simple name if there are no conflicts. Otherwise returns the unique name.
            </returns>
        </member>
        <member name="M:NuGet.PackageManagement.ISolutionManager.GetNuGetProjectAsync(System.String)">
            <summary>
            Gets the <see cref="T:NuGet.ProjectManagement.NuGetProject" /> corresponding to the safe name passed in
            </summary>
            <param name="nuGetProjectSafeName">
            nuGetProjectSafeName is the nuGetProject's unique name if one is
            available or its name.
            </param>
            <returns>
            Returns the <see cref="T:NuGet.ProjectManagement.NuGetProject" /> in this solution manager corresponding to the safe name
            passed in.
            </returns>
        </member>
        <member name="M:NuGet.PackageManagement.ISolutionManager.OnActionsExecuted(System.Collections.Generic.IEnumerable{NuGet.PackageManagement.ResolvedAction})">
            <summary>
            Fires ActionsExecuted event.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="M:NuGet.PackageManagement.ISolutionManager.EnsureSolutionIsLoaded">
            <summary>
            It ensure to completely load the solution before continue if it was loaded with DPL.
            That is, not all the projects were loaded when solution was open.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ISolutionManager.DoesNuGetSupportsAnyProjectAsync">
            <summary>
            It's a quick check to know if NuGet supports any prokect of current solution
            without initializing whole VSSolutionManager.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.GetPackagesInSolutionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the missing packages in the solution given the <paramref name="solutionDirectory"></paramref>.
            </summary>
            <returns>
            Returns a read-only dictionary of missing package references and the corresponding project names on which
            each missing package is installed.
            </returns>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.GetPackagesRestoreData(System.String,System.Collections.Generic.Dictionary{NuGet.Packaging.PackageReference,System.Collections.Generic.List{System.String}})">
            <summary>
            Get packages restore data for given package references.
            </summary>
            <param name="solutionDirectory">Current solution directory</param>
            <param name="packageReferencesDict">Dictionary of package reference with project names</param>
            <returns>List of packages restore data with missing package details.</returns>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.RestoreMissingPackagesInSolutionAsync(System.String,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Restores missing packages for the entire solution
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.RestoreMissingPackagesInSolutionAsync(System.String,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Restores missing packages for the entire solution
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.RestoreMissingPackagesAsync(NuGet.PackageManagement.PackageRestoreContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext)">
            <summary>
            The static method which takes in all the possible parameters
            </summary>
            <returns>Returns true if at least one of the packages needed to be restored and got restored</returns>
            <remarks>
            Best use case is 'nuget.exe restore .sln' where there is no project loaded and there is no SolutionManager.
            The references are obtained by parsing of solution file and by using PackagesConfigReader. In this case,
            you don't construct an object of PackageRestoreManager,
            but just the NuGetPackageManager using constructor that does not need the SolutionManager, and, optionally
            register to events and/or specify the source repositories
            </remarks>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.ThrottledPackageRestoreAsync(System.Collections.Generic.HashSet{NuGet.Packaging.PackageReference},NuGet.PackageManagement.PackageRestoreContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext)">
            <summary>
            ThrottledPackageRestoreAsync method throttles the number of tasks created to perform package restore in
            parallel
            The maximum number of parallel tasks that may be created can be specified via
            <paramref name="packageRestoreContext" />
            The method creates a ConcurrentQueue of passed in <paramref name="packageReferences" />. And, creates a
            fixed number of tasks
            that dequeue from the ConcurrentQueue and perform package restore. So, this method should pre-populate the
            queue and must not enqueued to by other methods
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.PackageRestoreRunnerAsync(System.Collections.Concurrent.ConcurrentQueue{NuGet.Packaging.PackageReference},NuGet.PackageManagement.PackageRestoreContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext)">
            <summary>
            This is the runner which dequeues package references from <paramref name="packageReferencesQueue" />, and
            performs package restore
            Note that this method should only Dequeue from the concurrent queue and not Enqueue
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.ThrottledCopySatelliteFilesAsync(System.Collections.Generic.HashSet{NuGet.Packaging.PackageReference},NuGet.PackageManagement.PackageRestoreContext,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            ThrottledCopySatelliteFilesAsync method throttles the number of tasks created to perform copy satellite
            files in parallel
            The maximum number of parallel tasks that may be created can be specified via
            <paramref name="packageRestoreContext" />
            The method creates a ConcurrentQueue of passed in <paramref name="packageReferences" />. And, creates a
            fixed number of tasks
            that dequeue from the ConcurrentQueue and perform copying of satellite files. So, this method should
            pre-populate the queue and must not enqueued to by other methods
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackageRestoreManager.CopySatelliteFilesRunnerAsync(System.Collections.Concurrent.ConcurrentQueue{NuGet.Packaging.PackageReference},NuGet.PackageManagement.PackageRestoreContext,NuGet.ProjectManagement.INuGetProjectContext)">
            <summary>
            This is the runner which dequeues package references from <paramref name="packageReferencesQueue" />, and
            performs copying of satellite files
            Note that this method should only Dequeue from the concurrent queue and not Enqueue
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.PackagesMarkedForDeletionEventArgs">
            <summary>
            Event arguments for <see cref="E:NuGet.PackageManagement.IDeleteOnRestartManager.PackagesMarkedForDeletionFound" /> event.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackagesMarkedForDeletionEventArgs.DirectoriesMarkedForDeletion">
            <summary>
            Gets the directories which are marked for deletion.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackagesMarkedForDeletionEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Creates a new instance of <see cref="T:NuGet.PackageManagement.PackagesMarkedForDeletionEventArgs" />.
            </summary>
            <param name="directoriesMarkedForDeletion">The directory paths that are marked for deletion.</param>
        </member>
        <member name="T:NuGet.PackageManagement.IInstallationCompatibility">
            <summary>
            Validates the compatibility of a installed packages for the given project type. This
            component should be used after packages have been downloaded to disk but have not yet
            been installed to the project. If an installed package is not compatibile with the given
            project, an exception is thrown. The checks performed by this class are based on 
            package minimum client versions and package types.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.IInstallationCompatibility.EnsurePackageCompatibility(NuGet.ProjectManagement.NuGetProject,NuGet.Common.INuGetPathContext,System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.Commands.RestoreResult)">
            <summary>
            Validates the compatibility of a multiple installed packages for the given project type.
            </summary>
            <param name="nuGetProject">
            The NuGet project. The type of the NuGet project determines the sorts or validations that are done.
            </param>
            <param name="pathContext">The path context used to find the installed packages.</param>
            <param name="nuGetProjectActions">The project actions.</param>
            <param name="restoreResult">The restore result generated during installation.</param>
        </member>
        <member name="M:NuGet.PackageManagement.IInstallationCompatibility.EnsurePackageCompatibilityAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.DownloadResourceResult,System.Threading.CancellationToken)">
            <summary>
            Asynchronously validates the compatibility of a single downloaded package.
            </summary>
            <param name="nuGetProject">The NuGet project. The type of the NuGet project determines the sorts or
            validations that are done.</param>
            <param name="packageIdentity">The identity of that package contained in the download result.</param>
            <param name="resourceResult">The downloaded package.</param>
            <param name="cancellationToken">A cancellation token.</param>.
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nuGetProject" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResult" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.PackageManagement.InstallationCompatibility.EnsurePackageCompatibilityAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.DownloadResourceResult,System.Threading.CancellationToken)">
            <summary>
            Asynchronously validates the compatibility of a single downloaded package.
            </summary>
            <param name="nuGetProject">The NuGet project. The type of the NuGet project determines the sorts or
            validations that are done.</param>
            <param name="packageIdentity">The identity of that package contained in the download result.</param>
            <param name="resourceResult">The downloaded package.</param>
            <param name="cancellationToken">A cancellation token.</param>.
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="nuGetProject" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="resourceResult" />
            is <c>null</c>.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.PackageManagement.NuGetPackageManager">
            <summary>
            NuGetPackageManager orchestrates a nuget package operation such as an install or uninstall
            It is to be called by various NuGet Clients including the custom third-party ones
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.NuGetPackageManager.BatchStart">
            <summary>
            Event to be raised when batch processing of install/ uninstall packages starts at a project level
            </summary>
        </member>
        <member name="E:NuGet.PackageManagement.NuGetPackageManager.BatchEnd">
            <summary>
            Event to be raised when batch processing of install/ uninstall packages ends at a project level
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.#ctor(NuGet.Protocol.Core.Types.ISourceRepositoryProvider,NuGet.Configuration.ISettings,System.String)">
            <summary>
            To construct a NuGetPackageManager that does not need a SolutionManager like NuGet.exe
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.#ctor(NuGet.Protocol.Core.Types.ISourceRepositoryProvider,NuGet.Configuration.ISettings,NuGet.PackageManagement.ISolutionManager,NuGet.PackageManagement.IDeleteOnRestartManager)">
            <summary>
            To construct a NuGetPackageManager with a mandatory SolutionManager lke VS
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.NuGetPackageManager.GlobalPackageFolderRepositories">
            <summary>
            SourceRepositories for the user global package folder and all fallback package folders.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs the latest version of the given <paramref name="packageId" /> to NuGetProject
            <paramref name="nuGetProject" /> <paramref name="resolutionContext" /> and
            <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs the latest version of the given <paramref name="packageId" /> to NuGetProject
            <paramref name="nuGetProject" /> <paramref name="resolutionContext" /> and
            <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs the latest version of the given
            <paramref name="packageId" /> to NuGetProject <paramref name="nuGetProject" />
            <paramref name="resolutionContext" /> and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs the latest version of the given
            <paramref name="packageId" /> to NuGetProject <paramref name="nuGetProject" />
            <paramref name="resolutionContext" /> and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs given <paramref name="packageIdentity" /> to NuGetProject <paramref name="nuGetProject" />
            <paramref name="resolutionContext" /> and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs given <paramref name="packageIdentity" /> to NuGetProject <paramref name="nuGetProject" />
            <paramref name="resolutionContext" /> and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs given <paramref name="packageIdentity" /> to NuGetProject <paramref name="nuGetProject" />
            <paramref name="resolutionContext" /> and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.InstallPackageAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Installs given <paramref name="packageIdentity" /> to NuGetProject <paramref name="nuGetProject" />
            <paramref name="resolutionContext" /> and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewInstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Gives the preview as a list of NuGetProjectActions that will be performed to install
            <paramref name="packageId" /> into <paramref name="nuGetProject" /> <paramref name="resolutionContext" />
            and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewInstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Gives the preview as a list of NuGetProjectActions that will be performed to install
            <paramref name="packageId" /> into <paramref name="nuGetProject" /> <paramref name="resolutionContext" />
            and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewUpdatePackagesForBuildIntegratedAsync(System.String,System.Collections.Generic.IReadOnlyList{NuGet.Packaging.Core.PackageIdentity},NuGet.ProjectManagement.NuGetProject,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Update Package logic specific to build integrated style NuGet projects
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewUpdatePackagesForClassicAsync(System.String,System.Collections.Generic.IReadOnlyList{NuGet.Packaging.Core.PackageIdentity},NuGet.ProjectManagement.NuGetProject,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Update Package logic specific to classic style NuGet projects
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.GetInstalledPackagesDependencyInfo(NuGet.ProjectManagement.NuGetProject,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            The package dependency info for the given project. The project needs to be packages.config, otherwise returns an empty list.
            </summary>
            <param name="nuGetProject">The project is question</param>
            <param name="token">cancellation token</param>
            <param name="includeUnresolved">Whether to include the unresolved packages. The unresolved packages include packages that are not restored and cannot be found on disk.</param>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.GetInstalledPackagesInDependencyOrder(NuGet.ProjectManagement.NuGetProject,System.Threading.CancellationToken)">
            <summary>
            Returns all installed packages in order of dependency. Packages with no dependencies come first.
            </summary>
            <remarks>Packages with unresolved dependencies are NOT returned since they are not valid.</remarks>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.GetDependencies(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo})">
            <summary>
            Filter down the reinstall list to just the ones we need to reinstall (i.e. the dependencies)
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.CollectDependencies(System.Collections.Generic.HashSet{System.String},System.String,System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},System.Int32)">
            <summary>
            A walk through the dependencies to collect the additional package identities that are involved in the current set of packages to be installed
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewInstallPackageAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            Gives the preview as a list of NuGetProjectActions that will be performed to install
            <paramref name="packageIdentity" /> into <paramref name="nuGetProject" />
            <paramref name="resolutionContext" /> and <paramref name="nuGetProjectContext" /> are used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.GetSourceRepository(NuGet.Packaging.Core.PackageIdentity,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},NuGet.Protocol.Core.Types.SourceCacheContext,NuGet.Common.ILogger)">
            <summary>
            Check all sources in parallel to see if the package exists while respecting the order of the list.
            This is only used by PreviewInstall with DependencyBehavior.Ignore.
            Since, resolver gather is not used when dependencies are not used,
            we simply get the source repository using MetadataResource.Exists
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewProjectsUninstallPackageAsync(System.Collections.Generic.IReadOnlyCollection{NuGet.ProjectManagement.NuGetProject},System.String,NuGet.PackageManagement.UninstallationContext,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Gives the preview as a list of NuGetProjectActions that will be performed to uninstall for many NuGetProjects.
            </summary>
            <param name="nuGetProjects"></param>
            <param name="packageId"></param>
            <param name="uninstallationContext"></param>
            <param name="nuGetProjectContext"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewUninstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.UninstallationContext,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Gives the preview as a list of NuGetProjectActions that will be performed to uninstall
            <paramref name="packageId" /> into <paramref name="nuGetProject" />
            <paramref name="uninstallationContext" /> and <paramref name="nuGetProjectContext" /> are used in the
            process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewUninstallPackageAsync(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.UninstallationContext,NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Gives the preview as a list of <see cref="T:NuGet.PackageManagement.NuGetProjectAction" /> that will be performed to uninstall
            <paramref name="packageIdentity" /> into <paramref name="nuGetProject" />
            <paramref name="uninstallationContext" /> and <paramref name="nuGetProjectContext" /> are used in the
            process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.ExecuteNuGetProjectActionsAsync(System.Collections.Generic.IEnumerable{NuGet.ProjectManagement.NuGetProject},System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceCacheContext,System.Threading.CancellationToken)">
            <summary>
            Executes the list of <paramref name="nuGetProjectActions" /> on list of <paramref name="nuGetProjects" /> , which is
            likely obtained by calling into
            <see cref="!:PreviewInstallPackageAsync(IEnumerable&lt;NuGetProject&gt;,string,ResolutionContext,INuGetProjectContext,SourceRepository,IEnumerable&lt;SourceRepository&gt;,CancellationToken)" />
            <paramref name="nuGetProjectContext" /> is used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.ExecuteNuGetProjectActionsAsync(NuGet.ProjectManagement.NuGetProject,System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceCacheContext,System.Threading.CancellationToken)">
            <summary>
            Executes the list of <paramref name="nuGetProjectActions" /> on <paramref name="nuGetProject" /> , which is
            likely obtained by calling into
            <see cref="M:NuGet.PackageManagement.NuGetPackageManager.PreviewInstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)" />
            <paramref name="nuGetProjectContext" /> is used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.ExecuteNuGetProjectActionsAsync(NuGet.ProjectManagement.NuGetProject,System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,System.Threading.CancellationToken)">
            <summary>
            Executes the list of <paramref name="nuGetProjectActions" /> on <paramref name="nuGetProject" /> , which is
            likely obtained by calling into
            <see cref="M:NuGet.PackageManagement.NuGetPackageManager.PreviewInstallPackageAsync(NuGet.ProjectManagement.NuGetProject,System.String,NuGet.PackageManagement.ResolutionContext,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.SourceRepository,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)" />
            <paramref name="nuGetProjectContext" /> is used in the process.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewBuildIntegratedProjectActionsAsync(NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject,System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Run project actions for a build integrated project.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PreviewBuildIntegratedProjectsActionsAsync(System.Collections.Generic.IReadOnlyCollection{NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject},System.Collections.Generic.Dictionary{System.String,NuGet.PackageManagement.NuGetProjectAction[]},NuGet.Packaging.Core.PackageIdentity,System.Collections.Generic.IReadOnlyCollection{NuGet.Protocol.Core.Types.SourceRepository},NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Run project actions for build integrated many projects.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.ExecuteBuildIntegratedProjectActionsAsync(NuGet.ProjectManagement.Projects.BuildIntegratedNuGetProject,System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.ProjectManagement.INuGetProjectContext,System.Threading.CancellationToken)">
            <summary>
            Run project actions for build integrated projects.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.RestorePackageAsync(NuGet.Packaging.Core.PackageIdentity,NuGet.ProjectManagement.INuGetProjectContext,NuGet.Protocol.Core.Types.PackageDownloadContext,System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},System.Threading.CancellationToken)">
            <summary>
            RestorePackage is only allowed on a folderNuGetProject. In most cases, one will simply use the
            packagesFolderPath from NuGetPackageManager
            to create a folderNuGetProject before calling into this method
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PackageExistsInPackagesFolder(NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.PackageSaveMode)">
            <summary>
            Checks whether package exists in packages folder and verifies that nupkg and nuspec are present as specified by packageSaveMode
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetPackageManager.PackageExistsInAnotherNuGetProject(NuGet.ProjectManagement.NuGetProject,NuGet.Packaging.Core.PackageIdentity,NuGet.PackageManagement.ISolutionManager,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Checks if package <paramref name="packageIdentity" /> that is installed in
            project <paramref name="nuGetProject" /> is also installed in any
            other projects in the solution.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.NuGetProjectActionType">
            <summary>
            Enum for the type of NuGetProjectAction
            </summary>
        </member>
        <member name="F:NuGet.PackageManagement.NuGetProjectActionType.Install">
            <summary>
            Install
            </summary>
        </member>
        <member name="F:NuGet.PackageManagement.NuGetProjectActionType.Uninstall">
            <summary>
            Uninstall
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.NuGetProjectAction">
            <summary>
            NuGetProjectAction
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.NuGetProjectAction.PackageIdentity">
            <summary>
            PackageIdentity on which the action is performed
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.NuGetProjectAction.NuGetProjectActionType">
            <summary>
            Type of NuGetProjectAction. Install/Uninstall
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.NuGetProjectAction.SourceRepository">
            <summary>
            For NuGetProjectActionType.Install, SourceRepository from which the package should be installed
            For NuGetProjectActionType.Uninstall, this will be null
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.NuGetProjectAction.Project">
            <summary>
            NugetProject for which the action is created
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.PackageDownloader">
            <summary>
            Abstracts the logic to get a package stream for a given package identity from a given source repository
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackageDownloader.GetDownloadResourceResultAsync(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourceRepository},NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.PackageDownloadContext,System.String,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns a <see cref="T:NuGet.Protocol.Core.Types.DownloadResourceResult" /> for a given package identity
            and enumerable of source repositories.
            </summary>
            <param name="sources">An enumerable of source repositories.</param>
            <param name="packageIdentity">A package identity.</param>
            <param name="downloadContext">A package download context.</param>
            <param name="globalPackagesFolder">A global packages folder path.</param>
            <param name="logger">A logger.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:NuGet.Protocol.Core.Types.DownloadResourceResult" />
            instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sources" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="downloadContext" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="token" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.PackageManagement.PackageDownloader.GetDownloadResourceResultAsync(NuGet.Protocol.Core.Types.SourceRepository,NuGet.Packaging.Core.PackageIdentity,NuGet.Protocol.Core.Types.PackageDownloadContext,System.String,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns a <see cref="T:NuGet.Protocol.Core.Types.DownloadResourceResult" /> for a given package identity
            and source repository.
            </summary>
            <param name="sourceRepository">A source repository.</param>
            <param name="packageIdentity">A package identity.</param>
            <param name="downloadContext">A package download context.</param>
            <param name="globalPackagesFolder">A global packages folder path.</param>
            <param name="logger">A logger.</param>
            <param name="token">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:NuGet.Protocol.Core.Types.DownloadResourceResult" />
            instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sourceRepository" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="downloadContext" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="token" />
            is cancelled.</exception>
        </member>
        <member name="F:NuGet.PackageManagement.PackageManagementConstants.DefaultMaxDegreeOfParallelism">
            <summary>
            Default MaxDegreeOfParallelism to use for restores and other threaded operations.
            </summary>
        </member>
        <member name="F:NuGet.PackageManagement.PackageManagementConstants.DefaultRequestTimeout">
            <summary>
            Default amount of time a source request can take before timing out. This includes both UNC shares
            and online sources.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackagePreFetcher.GetPackagesAsync(System.Collections.Generic.IEnumerable{NuGet.PackageManagement.NuGetProjectAction},NuGet.ProjectManagement.FolderNuGetProject,NuGet.Protocol.Core.Types.PackageDownloadContext,System.String,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Download all needed packages for install actions.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackagePreFetcher.LogFetchMessages(System.Collections.Generic.IEnumerable{NuGet.PackageManagement.PackagePreFetcherResult},System.String,NuGet.Common.ILogger)">
            <summary>
            Log a message to indicate where each package is being downloaded from
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackagePreFetcherResult.InPackagesFolder">
            <summary>
            True if the result came from the packages folder.
            </summary>
            <remarks>Not thread safe.</remarks>
        </member>
        <member name="P:NuGet.PackageManagement.PackagePreFetcherResult.Package">
            <summary>
            Package identity.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackagePreFetcherResult.Source">
            <summary>
            PackageSource for the download. This is null if the packages folder was used.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.PackagePreFetcherResult.IsComplete">
            <summary>
            True if the download is complete.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackagePreFetcherResult.#ctor(System.Threading.Tasks.Task{NuGet.Protocol.Core.Types.DownloadResourceResult},NuGet.Packaging.Core.PackageIdentity,NuGet.Configuration.PackageSource)">
            <summary>
            Create a PreFetcher result for a downloaded package.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackagePreFetcherResult.#ctor(System.String,NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Create a PreFetcher result for a package in the packages folder.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackagePreFetcherResult.EnsureResultAsync">
            <summary>
            A safe wait for the download task. Exceptions are caught and stored.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PackagePreFetcherResult.GetResultAsync">
            <summary>
            Ensure and retrieve the download result.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.GatherCache">
            <summary>
            GatherCache contains cached results from DependencyInfoResource providers
            This class is for internal use or testing only.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.GatherCache.AddPackageFromSingleVersionLookup(NuGet.Configuration.PackageSource,NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,NuGet.Protocol.Core.Types.SourcePackageDependencyInfo)">
            <summary>
            Add a single package
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.GatherCache.AddAllPackagesForId(NuGet.Configuration.PackageSource,System.String,NuGet.Frameworks.NuGetFramework,System.Collections.Generic.List{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo})">
            <summary>
            Add the full list of versions for a package
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.GatherCache.GetPackage(NuGet.Configuration.PackageSource,NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Retrieve an exact version of a package
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.GatherCache.GetPackages(NuGet.Configuration.PackageSource,System.String,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Retrieve all versions of a package id
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.GatherCache.GatherSingleCacheKey">
            <summary>
            Cache key for a package id and version
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.GatherCache.GatherAllCacheKey">
            <summary>
            Cache key for a package id and all versions
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.GatherCacheResult">
            <summary>
            The result of a cache look up. HasEntry determines if the query has already been made. 
            If a result has zero packages HasEntry will be true, but Packages will be empty.
            If the query has not been done HasEntry will be false.
            This class is for internal use or testing only.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherCacheResult.HasEntry">
            <summary>
            True if an entry has been added (including a result with zero packages).
            This will be false if the package has not been searched for in the source.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherCacheResult.Packages">
            <summary>
            Cached packages
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.TargetFramework">
            <summary>
            Project target framework
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.PrimarySources">
            <summary>
            Primary sources - Primary targets must exist here.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.AllSources">
            <summary>
            All sources - used for dependencies
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.PackagesFolderSource">
            <summary>
            Packages folder
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.PrimaryTargetIds">
            <summary>
            Target ids
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.PrimaryTargets">
            <summary>
            Targets with an id and version
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.InstalledPackages">
            <summary>
            Already installed packages
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.AllowDowngrades">
            <summary>
            If false dependencies from downgrades will be ignored.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.ResolutionContext">
            <summary>
            Resolution context containing the GatherCache and DependencyBehavior.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.ProjectContext">
            <summary>
            Project context for logging
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.IsUpdateAll">
            <summary>
            If true, missing primary targets will be ignored.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.PackageSourceMapping">
            <summary>
            PackageSourceMapping section value from nuget.config file, if section doesn't exist then it's null.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.GatherContext.Log">
            <summary>
            Logging adapter
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.GatherExceptionHelpers.ThrowIfVersionIsDisallowedByPackagesConfig(System.String,System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},NuGet.Common.ILogger)">
            <summary>
            Throw if packages.config contains an AllowedVersions entry for the target, 
            and no packages outside of that range have been found.
            </summary>
            <param name="target">target package id</param>
            <param name="packagesConfig">entries from packages.config</param>
            <param name="availablePackages">gathered packages</param>
        </member>
        <member name="M:NuGet.PackageManagement.GatherExceptionHelpers.ThrowIfVersionIsDisallowedByPackagesConfig(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},NuGet.Common.ILogger)">
            <summary>
            Throw if packages.config contains an AllowedVersions entry for the target, 
            and no packages outside of that range have been found.
            </summary>
            <param name="targets">target package ids</param>
            <param name="packagesConfig">entries from packages.config</param>
            <param name="availablePackages">gathered packages</param>
        </member>
        <member name="M:NuGet.PackageManagement.GatherExceptionHelpers.ThrowIfNewerVersionAlreadyReferenced(System.String,System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo})">
            <summary>
            Throw if packages.config contains a newer version of the package already 
            </summary>
            <param name="target">target package id</param>
            <param name="packagesConfig">entries from packages.config</param>
            <param name="availablePackages">gathered packages</param>
        </member>
        <member name="T:NuGet.PackageManagement.PrunePackageTree">
            <summary>
            Helpers to reduce down the gathered package dependency info to the allowed set
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PrunePackageTree.PrunePrereleaseExceptAllowed(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Boolean)">
            <summary>
            Remove some of the prerelease packages in update scenarios
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PrunePackageTree.PrunePreleaseForStableTargets(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity})">
            <summary>
            Remove all prerelease packages for stable targets
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PrunePackageTree.RemoveAllVersionsForIdExcept(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Remove all versions of a package id from the list, except for the target version
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PrunePackageTree.RemoveAllPrereleaseVersionsForId(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},System.String)">
            <summary>
            Keep only stable versions of a package
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PrunePackageTree.RemoveAllVersionsLessThan(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Clear out all versions less than the minimuim. This can be used to prevent downgrading
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.PrunePackageTree.PruneByPrimaryTargets(System.Collections.Generic.IEnumerable{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity})">
            <summary>
            This is used in update scenarios ro remove packages that are of the same Id but different version than the primartTargets 
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.ResolverGather.MaxDegreeOfParallelism">
            <summary>
            Maximum number of threads to use when gathering packages.
            </summary>
            <remarks>The value must be &gt;= 1.</remarks>
        </member>
        <member name="P:NuGet.PackageManagement.ResolverGather.RequestTimeout">
            <summary>
            Timeout when waiting for source requests
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.GatherAsync(NuGet.PackageManagement.GatherContext,System.Threading.CancellationToken)">
            <summary>
            Gather packages
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.StartTasksAndProcessWork(System.Threading.CancellationToken)">
            <summary>
            Start tasks for queued requests and process finished tasks.
            This method will continue until at least 1 task has finished,
            and keep going until all queued requests have been started.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.GatherInstalledPackagesAsync(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.HashSet{System.String},System.Threading.CancellationToken)">
            <summary>
            Retrieve already installed packages
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.GetClosure(System.Collections.Generic.HashSet{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},System.Collections.Generic.HashSet{NuGet.Protocol.Core.Types.SourcePackageDependencyInfo},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Find the closure of required package ids
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.ProcessResultsAsync">
            <summary>
            Retrieve results from completed tasks
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.StartWorkerTasks(System.Threading.CancellationToken)">
            <summary>
            Load up to the MaxThread count
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.GatherPackageAsync(NuGet.PackageManagement.ResolverGather.GatherRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieve the packages from the cache or source
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.GatherPackageFromSourceAsync(System.String,NuGet.Versioning.NuGetVersion,NuGet.Protocol.Core.Types.DependencyInfoResource,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Call the DependencyInfoResource safely
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.ResolverGather.GetNextRequestId">
            <summary>
            Get the current request id number, and increment it for the next count
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.ResolverGather.SourceResource">
            <summary>
            Holds a Source and DependencyInfoResource
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.ResolverGather.GatherRequest">
            <summary>
            Request info
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.ResolverGather.GatherResult">
            <summary>
            Contains the original request along with the resulting packages.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddedPackageToFolder">
            <summary>
              Looks up a localized string similar to Added package '{0}' to folder '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddedPackageToFolderFromSource">
            <summary>
              Looks up a localized string similar to Added package '{0}' to folder '{1}' from source '{2}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddedPackageToMSBuildProject">
            <summary>
              Looks up a localized string similar to Added package '{0}' to project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddedPackageToPackagesConfig">
            <summary>
              Looks up a localized string similar to Added package '{0}' to '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddingPackageToFolder">
            <summary>
              Looks up a localized string similar to Adding package '{0}' to folder '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddingPackageToMSBuildProject">
            <summary>
              Looks up a localized string similar to Adding package '{0}' to project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddingPackageWithOnlyDependencies">
            <summary>
              Looks up a localized string similar to Adding package '{0}', which only has dependencies, to project '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AddingPackageWithOnlyToolsGroup">
            <summary>
              Looks up a localized string similar to Adding package '{0}', which only has tools group, to project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AnotherNuGetProjectWithSameNameExistsInSolution">
            <summary>
              Looks up a localized string similar to Another NuGetProject with the same name '{0}' exists in solution.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Argument_Cannot_Be_Null_Or_Empty">
            <summary>
              Looks up a localized string similar to Argument cannot be null or empty.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Argument_Must_Be_GreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AttemptingToGatherDependencyInfo">
            <summary>
              Looks up a localized string similar to Attempting to gather dependency information for package '{0}' with respect to project '{1}', targeting '{2}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AttemptingToGatherDependencyInfoForMultiplePackages">
            <summary>
              Looks up a localized string similar to Attempting to gather dependency information for multiple packages with respect to project '{0}', targeting '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AttemptingToResolveDependencies">
            <summary>
              Looks up a localized string similar to Attempting to resolve dependencies for package '{0}' with DependencyBehavior '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.AttemptingToResolveDependenciesForMultiplePackages">
            <summary>
              Looks up a localized string similar to Attempting to resolve dependencies for multiple packages..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.BuildIntegratedPackageRestoreFailed">
            <summary>
              Looks up a localized string similar to Package restore failed for '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.BuildIntegratedPackageRestoreStarted">
            <summary>
              Looks up a localized string similar to Restoring packages for '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.BuildIntegratedPackageRestoreSucceeded">
            <summary>
              Looks up a localized string similar to Package restore completed successfully for '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ContentFilesShouldNotBeTargetFrameworkSpecific">
            <summary>
              Looks up a localized string similar to Content files should not be target framework specific, whereas, '{0}' is.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_AddedFile">
            <summary>
              Looks up a localized string similar to Added file '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_AddedFileToFolder">
            <summary>
              Looks up a localized string similar to Added file '{0}' to folder '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_RemovedFile">
            <summary>
              Looks up a localized string similar to Removed file '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_RemovedFileFromFolder">
            <summary>
              Looks up a localized string similar to Removed file '{0}' from folder '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_RemovedFolder">
            <summary>
              Looks up a localized string similar to Removed folder '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_TargetFrameworkInfo">
            <summary>
              Looks up a localized string similar to &gt;&gt; {0} are being added from '{1}'{2}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_TargetFrameworkInfo_AssemblyReferences">
            <summary>
              Looks up a localized string similar to Assembly references.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_TargetFrameworkInfo_BuildFiles">
            <summary>
              Looks up a localized string similar to Build files.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_TargetFrameworkInfo_ContentFiles">
            <summary>
              Looks up a localized string similar to Content files.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_TargetFrameworkInfo_NotFrameworkSpecific">
            <summary>
              Looks up a localized string similar to (not framework-specific).
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_TargetFrameworkInfo_PowershellScripts">
            <summary>
              Looks up a localized string similar to &gt;&gt; PowerShell scripts are being executed from '{0}'{1}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Debug_TargetFrameworkInfoPrefix">
            <summary>
              Looks up a localized string similar to For adding package '{0}' to project '{1}' that targets '{2}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.DependencyDoesNotHaveValidVersion">
            <summary>
              Looks up a localized string similar to Dependency '{0}' has invalid version specification..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.DownloadResourceNotFound">
            <summary>
              Looks up a localized string similar to Cannot download packages from '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.DownloadStreamNotAvailable">
            <summary>
              Looks up a localized string similar to Package stream for '{0}' cannot be found at '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Error_DirectoryDoesNotExist">
            <summary>
              Looks up a localized string similar to Directory {0} does not exist..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Error_FileDoesNotExist">
            <summary>
              Looks up a localized string similar to File {0} does not exist..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Error_InvalidLockFileInput">
            <summary>
              Looks up a localized string similar to Invalid restore input where RestorePackagesWithLockFile property is set to false but a packages lock file exists at {0}..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Error_PackageValidationFailed">
            <summary>
              Looks up a localized string similar to Package content hash validation failed for {0}. The package is different than the last restore..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Error_RestoreInLockedModePackagesConfig">
            <summary>
              Looks up a localized string similar to The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Run restore without using restore locked mode to update the lock file..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ErrorLoadingPackagesConfig">
            <summary>
              Looks up a localized string similar to An error occurred while reading file '{0}': {1}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ErrorWritingPackagesConfig">
            <summary>
              Looks up a localized string similar to An error occurred while writing file '{0}': {1}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Exception_PackageNotFound">
            <summary>
              Looks up a localized string similar to Unable to find package '{0}' at source '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ExceptionType">
            <summary>
              Looks up a localized string similar to Exception Type.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ExceptionWhenTryingToAddSource">
            <summary>
              Looks up a localized string similar to Exception '{0}' thrown when trying to add source '{1}'. Please verify all your online package sources are available..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.FileConflictMessage">
            <summary>
              Looks up a localized string similar to File '{0}' already exists in project '{1}'. Do you want to overwrite it?.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.FoundPackageInPackagesFolder">
            <summary>
              Looks up a localized string similar to Found package '{0} {1}' in '{2}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.GatherTotalTime">
            <summary>
              Looks up a localized string similar to Gathering dependency information took {0}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Info_OverwritingExistingFile">
            <summary>
              Looks up a localized string similar to Overwriting existing file '{0}'...
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.InstalledPackage">
            <summary>
              Looks up a localized string similar to Installed package '{0}' to project.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.InstallingPackage">
            <summary>
              Looks up a localized string similar to Installing package '{0}' to project.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.InvalidNullSettingsOperation">
            <summary>
              Looks up a localized string similar to '{0}' cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to '%AppData%\NuGet\NuGet.config'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.InvalidProjectName">
            <summary>
              Looks up a localized string similar to Unable to determine the project name for '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.MultiplePackageInstallOrUpdateHasToBeAnUpdate">
            <summary>
              Looks up a localized string similar to When updating multiple packages, dependency behavior has to be DependencyBehavior.Highest.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.MultiplePackageTypesNotSupported">
            <summary>
              Looks up a localized string similar to Package '{0}' has multiple package types, which is not supported..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NewerVersionAlreadyReferenced">
            <summary>
              Looks up a localized string similar to Already referencing a newer version of '{0}'...
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NoFolderSpecificToTargetFxFound">
            <summary>
              Looks up a localized string similar to Invalid!! Could not find a folder under artifact type '{0}', so cannot request for artifacts specific to target framework '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NoLatestVersionFound">
            <summary>
              Looks up a localized string similar to No latest version found for '{0}' for the given source repositories and resolution context.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NoNuGetProjectWithSpecifiedName">
            <summary>
              Looks up a localized string similar to No NuGetProject is available with specified name '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NoPackagesInProject">
            <summary>
              Looks up a localized string similar to No packages were found in packages.config for project '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NoPackageUpdates">
            <summary>
              Looks up a localized string similar to No package updates are available from the current package source for project '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NoUpdatesAvailable">
            <summary>
              Looks up a localized string similar to There are no new updates available..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NugetActionsTotalTime">
            <summary>
              Looks up a localized string similar to Executing nuget actions took {0}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.NuGetProjectDoesNotHaveName">
            <summary>
              Looks up a localized string similar to NuGetProject does not have 'Name' set in metadata. It should be set and it should be unique.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.OneOrMorePackagesNotFound">
            <summary>
              Looks up a localized string similar to One or more packages not found.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageAlreadyExistsInFolder">
            <summary>
              Looks up a localized string similar to Package '{0}' already exists in folder '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageAlreadyExistsInPackagesConfig">
            <summary>
              Looks up a localized string similar to Package '{0}' already exists in '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageAlreadyExistsInProject">
            <summary>
              Looks up a localized string similar to Package '{0}' already exists in project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageCancelledFromSource">
            <summary>
              Looks up a localized string similar to Getting package '{0}' from source '{1}' was cancelled..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageCouldNotBeInstalled">
            <summary>
              Looks up a localized string similar to Package '{0}' could not be installed.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageDoesNotExistInFolder">
            <summary>
              Looks up a localized string similar to Package '{0}' does not exist in folder '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageDoesNotExistInProject">
            <summary>
              Looks up a localized string similar to Package '{0}' does not exist in project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageDoesNotExisttInPackagesConfig">
            <summary>
              Looks up a localized string similar to Package '{0}' does not exists in '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageHasDependent">
            <summary>
              Looks up a localized string similar to Unable to uninstall '{0}' because '{1}' depends on it..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageHasDependents">
            <summary>
              Looks up a localized string similar to Unable to uninstall '{0}' because '{1}' depend on it..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageNotFound">
            <summary>
              Looks up a localized string similar to Package '{0}' is not found.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageNotFoundInPrimarySources">
            <summary>
              Looks up a localized string similar to Package '{0}' is not found in the following primary source(s): '{1}'. Please verify all your online package sources are available (OR) package id, version are specified correctly..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageNotFoundOnSource">
            <summary>
              Looks up a localized string similar to Package '{0}' is not found on source '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackagesConfigAllowedVersionConflict">
            <summary>
              Looks up a localized string similar to Unable to resolve '{0}'. An additional constraint '{1}' defined in {2} prevents this operation..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackagesConfigAllowedVersions">
            <summary>
              Looks up a localized string similar to Applying constraint '{0}' defined in '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackagesCouldNotBeInstalled">
            <summary>
              Looks up a localized string similar to Packages could not be installed.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageSourceMappingPatternMatchFound">
            <summary>
              Looks up a localized string similar to Package source mapping matches found for package ID '{0}' are: '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageSourceMappingPatternNoMatchFound">
            <summary>
              Looks up a localized string similar to Package source mapping match not found for package ID '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageStreamShouldBeSeekable">
            <summary>
              Looks up a localized string similar to Package stream should be seekable.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PackageToBeUninstalledCouldNotBeFound">
            <summary>
              Looks up a localized string similar to Package '{0}' to be uninstalled could not be found in project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ParameterCannotBeZeroOrNegative">
            <summary>
              Looks up a localized string similar to Parameter cannot be zero or negative.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ProjectNotLoaded_RestoreFailed">
            <summary>
              Looks up a localized string similar to The operation failed as details for project {0} could not be loaded..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.PropertyCannotBeNull">
            <summary>
              Looks up a localized string similar to '{0}' cannot be null..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RemovedPackageFromFolder">
            <summary>
              Looks up a localized string similar to Removed package '{0}' from folder '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RemovedPackageFromMSBuildProject">
            <summary>
              Looks up a localized string similar to Removed package '{0}' from project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RemovedPackageFromPackagesConfig">
            <summary>
              Looks up a localized string similar to Removed package '{0}' from '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RemovingPackageFromFolder">
            <summary>
              Looks up a localized string similar to Removing package '{0}' from folder '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RemovingPackageFromMSBuildProject">
            <summary>
              Looks up a localized string similar to Removing package '{0}' from project '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ResolutionSuccessfulNoAction">
            <summary>
              Looks up a localized string similar to Resolution was successful but resulted in no action.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ResolvedActionsToInstallPackage">
            <summary>
              Looks up a localized string similar to Resolved actions to install package '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ResolvedActionsToUninstallPackage">
            <summary>
              Looks up a localized string similar to Resolved actions to uninstall package '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ResolvingActionsToInstallOrUpdateMultiplePackages">
            <summary>
              Looks up a localized string similar to Resolving actions install multiple packages.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ResolvingActionsToInstallPackage">
            <summary>
              Looks up a localized string similar to Resolving actions to install package '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.ResolvingActionsToUninstallPackage">
            <summary>
              Looks up a localized string similar to Resolving actions to uninstall package '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RestoreFailedRollingBack">
            <summary>
              Looks up a localized string similar to Package restore failed. Rolling back package changes for '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RestoringPackage">
            <summary>
              Looks up a localized string similar to Restoring NuGet package {0}..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.RetrievingPackageStart">
            <summary>
              Looks up a localized string similar to Retrieving package '{0} {1}' from '{2}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.SignatureVerificationMultiple">
            <summary>
              Looks up a localized string similar to Signed package validation failed with multiple errors:{0}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.SolutionDirectoryMustBeRooted">
            <summary>
              Looks up a localized string similar to Solution directory '{0}' must be a rooted path..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.SolutionDirectoryNotAvailable">
            <summary>
              Looks up a localized string similar to Solution is not opened or not saved. Please ensure you have an open and saved solution..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.SolutionManagerNotAvailableForUninstall">
            <summary>
              Looks up a localized string similar to Uninstall is not supported when SolutionManager is not available.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.SuccessfullyInstalled">
            <summary>
              Looks up a localized string similar to Successfully installed '{0}' to {1}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.SuccessfullyUninstalled">
            <summary>
              Looks up a localized string similar to Successfully uninstalled '{0}' from {1}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.TokenHasNoValue">
            <summary>
              Looks up a localized string similar to The replacement token '{0}' has no value.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnableToFindCompatibleItems">
            <summary>
              Looks up a localized string similar to Could not install package '{0}'. You are trying to install this package into a project that targets '{1}', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnableToFindPathInLookupOrList">
            <summary>
              Looks up a localized string similar to Either should have value in {0} for {1} or {2} &amp; {3}..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnableToGatherDependencyInfo">
            <summary>
              Looks up a localized string similar to Unable to gather dependency information for package '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnableToGatherDependencyInfoForMultiplePackages">
            <summary>
              Looks up a localized string similar to Unable to gather dependency information for multiple packages.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnableToGatherPackageFromSource">
            <summary>
              Looks up a localized string similar to Unable to gather package '{0}' from source '{1}'. Please verify all your online package sources are available. .
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnableToResolveDependencyInfo">
            <summary>
              Looks up a localized string similar to Unable to resolve dependencies for package '{0}' with DependencyBehavior '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnableToResolveDependencyInfoForMultiplePackages">
            <summary>
              Looks up a localized string similar to Unable to resolve dependencies for multiple packages.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnknownPackage">
            <summary>
              Looks up a localized string similar to Unable to find package '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnknownPackageSpecificVersion">
            <summary>
              Looks up a localized string similar to Unable to find version '{1}' of package '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnknownSource">
            <summary>
              Looks up a localized string similar to Source '{0}' not found. Please provide an HTTP or local source..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnknownSourceType">
            <summary>
              Looks up a localized string similar to Unsupported type of source '{0}'. Please provide an HTTP or local source..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnknownSourceWithId">
            <summary>
              Looks up a localized string similar to Unable to find package '{0}' at source '{1}'. Source not found..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnsupportedPackageFeature">
            <summary>
              Looks up a localized string similar to Package '{0}' uses features that are not supported by the current version of NuGet. To upgrade NuGet, see https://docs.nuget.org/consume/installing-nuget.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.UnsupportedPackageType">
            <summary>
              Looks up a localized string similar to Package '{0}' has a package type '{1}' that is not supported by project '{2}'..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Warning_DirectoryNotEmpty">
            <summary>
              Looks up a localized string similar to Directory '{0}' is not empty. Skipping....
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Warning_ErrorFindingRepository">
            <summary>
              Looks up a localized string similar to Error finding repository for '{0}': {1}.
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Warning_FileAlreadyExists">
            <summary>
              Looks up a localized string similar to '{0}' already exists. Skipping....
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Warning_FileModified">
            <summary>
              Looks up a localized string similar to Skipping '{0}' because it was modified..
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.Warning_RollingBack">
            <summary>
              Looks up a localized string similar to Install failed. Rolling back....
            </summary>
        </member>
        <member name="P:NuGet.PackageManagement.Strings.XdtError">
            <summary>
              Looks up a localized string similar to An error occurred while applying transformation to '{0}' in project '{1}'.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.ActionEventBase">
            <summary>
            Base class to generate telemetry data for nuget operations like install, update or restore.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.ActionsTelemetryEvent">
            <summary>
            Telemetry event data for nuget operations like install, update, or uninstall.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.NuGetOperationType">
            <summary>
            Define nuget operation type values.
            </summary>
        </member>
        <member name="F:NuGet.PackageManagement.NuGetOperationType.Install">
            <summary>
            Install package action.
            </summary>
        </member>
        <member name="F:NuGet.PackageManagement.NuGetOperationType.Update">
            <summary>
            Update package action.
            </summary>
        </member>
        <member name="F:NuGet.PackageManagement.NuGetOperationType.Uninstall">
            <summary>
            Uninstall package action.
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.TelemetryConstants">
            <summary>
            This class contains telemetry events name and properties name.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.LogUtility.AsRestoreLogMessage(NuGet.ProjectModel.IAssetsLogMessage)">
            <summary>
            Converts an IAssetsLogMessage into a RestoreLogMessage.
            This is needed when an IAssetsLogMessage needs to be logged and loggers do not have visibility to IAssetsLogMessage.
            </summary>
            <param name="logMessage">IAssetsLogMessage to be converted.</param>
            <returns>RestoreLogMessage equivalent to the IAssetsLogMessage.</returns>
        </member>
        <member name="T:NuGet.PackageManagement.NuGetEventArgs`1">
            <summary>
            Generic EventArg class for NuGet.
            </summary>
            <typeparam name="T">Class type of the argument Arg.</typeparam>
        </member>
        <member name="P:NuGet.PackageManagement.NuGetEventArgs`1.Arg">
            <summary>
            Argument data of the EventArg.
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.NuGetEventArgs`1.#ctor(`0)">
            <summary>
            Constructor for creating NuGetEventArgs object.
            </summary>
            <param name="arg"> Argument to NuGetEventArgs of type T.</param>
        </member>
        <member name="M:NuGet.PackageManagement.PackageGraphAnalysisUtilities.GetDependencyInfoForPackageIdentitiesAsync(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},NuGet.Frameworks.NuGetFramework,NuGet.Protocol.Core.Types.DependencyInfoResource,NuGet.Protocol.Core.Types.SourceCacheContext,System.Boolean,NuGet.Common.ILogger,System.Threading.CancellationToken)">
            <summary>
            Returns package dependency info for the given package identities in the given resource. It returns null if any protocol errors occur.
            For example, the feed is not accessible.
            </summary>
            <param name="packageIdentities">A collection of <see cref="T:NuGet.Packaging.Core.PackageIdentity" /> to get info for.</param>
            <param name="nuGetFramework">Framework for determining the dependency groups of packages</param>
            <param name="dependencyInfoResource">The resource to fetch dependency info from. Could be http/file feed/global packages folder/solution packages folder.</param>
            <param name="sourceCacheContext">Caching context. Only really applicable when the dependency info resource is http based.</param>
            <param name="includeUnresolved">Whether to include unresolved packages in the list. If true, the unresolved packages will have an empty dependencies collection.</param>
            <param name="logger">logger</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>A collection of <see cref="T:NuGet.Packaging.Core.PackageDependencyInfo" />, null if a protocol exception happens.  </returns>
        </member>
        <member name="M:NuGet.PackageManagement.PackageGraphAnalysisUtilities.GetDependantPackages(NuGet.Packaging.Core.PackageDependencyInfo,System.Collections.Generic.IList{NuGet.Packaging.Core.PackageDependencyInfo})">
            <summary>
            Return the packages from a list that have a dependency on a specific package (id and version).
            </summary>
            <param name="package"></param>
            <param name="packageDependencyInfos"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.PackageGraphAnalysisUtilities.GetPackagesWithDependants(System.Collections.Generic.IList{NuGet.Packaging.Core.PackageDependencyInfo})">
            <summary>
            Given <paramref name="packageDependencyInfos" /> generates a collection of <see cref="T:NuGet.PackageManagement.PackageWithDependants" /> with the dependants populated correctly.
            </summary>
            <returns>A collection of <see cref="T:NuGet.PackageManagement.PackageWithDependants" /></returns>
        </member>
        <member name="T:NuGet.PackageManagement.PackagesFolderPathUtility">
            <summary>
            Static class to help get PackagesFolderPath
            </summary>
        </member>
        <member name="T:NuGet.PackageManagement.UriHelper">
            <summary>
            Static class for UriHelper
            </summary>
        </member>
        <member name="M:NuGet.PackageManagement.UriHelper.OpenExternalLink(System.Uri)">
            <summary>
            Open external link
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:NuGet.PackageManagement.UriHelper.IsHttpSource(System.String)">
            <summary>
            Determine if Http Source via Uri.TryCreate()
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.UriHelper.IsHttpSource(NuGet.Configuration.PackageSourceProvider)">
            <summary>
            Determine if active package source is http source
            </summary>
            <param name="packageSourceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.UriHelper.IsHttpSource(System.String,NuGet.Configuration.PackageSourceProvider)">
            <summary>
            Determine if source is http source
            </summary>
            <param name="source"></param>
            <param name="packageSourceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.UriHelper.IsAnySourceLocal(NuGet.Configuration.PackageSourceProvider,System.String@)">
            <summary>
            Determine is any source is local source
            </summary>
            <param name="packageSourceProvider"></param>
            <param name="localSource"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.PackageManagement.UriHelper.IsAnySourceAvailable(NuGet.Configuration.PackageSourceProvider,System.Boolean)">
            <summary>
            Determine if any source is available
            </summary>
            <param name="packageSourceProvider"></param>
            <param name="checkHttp"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.String)">
            <summary>
            Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file.
            </summary>
            <param name="path">The complete file path to be read into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.String,System.Xml.Linq.LoadOptions)">
            <summary>
            Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file. Optionally, whitespace can be preserved.
            </summary>
            <param name="path">The complete file path to be read into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
            <param name="options">A set of <see cref="T:System.Xml.Linq.LoadOptions" />.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a stream.
            </summary>
            <param name="input">The stream that contains the XML data.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified stream.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
            <summary>
            Creates a new System.Xml.Linq.XDocument from a stream. Optionally, whitespace can be preserved.
            </summary>
            <param name="input">The stream that contains the XML data.</param>
            <param name="options">A set of <see cref="T:System.Xml.Linq.LoadOptions" />.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified stream.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.GetEncodedXMLName(System.String)">
            <summary>
            Converts the name to a valid XML local name, if it is invalid.
            </summary>
            <param name="name">The name to be encoded.</param>
            <returns>The encoded name.</returns>
        </member>
        <member name="M:NuGet.Shared.XmlUtility.GetXmlReaderSettings(System.Xml.Linq.LoadOptions)">
            <summary>
            Creates an instance of <see cref="T:System.Xml.XmlReaderSettings" /> with safe settings
            <param name="options">A set of <see cref="T:System.Xml.Linq.LoadOptions" />.</param>
            </summary>
        </member>
        <member name="T:NuGet.StringBuilderPool">
            <summary>
            Provides a resource pool that enables reusing instances of <see cref="T:System.Text.StringBuilder" /> instances.
            </summary>
            <remarks>
            <para>
            Renting and returning buffers with an <see cref="T:NuGet.StringBuilderPool" /> can increase performance
            in situations where <see cref="T:System.Text.StringBuilder" /> instances are created and destroyed frequently,
            resulting in significant memory pressure on the garbage collector.
            </para>
            <para>
            This class is thread-safe.  All members may be used by multiple threads concurrently.
            </para>
            </remarks>
        </member>
        <member name="F:NuGet.StringBuilderPool.Shared">
            <summary>
            Retrieves a shared <see cref="T:NuGet.StringBuilderPool" /> instance.
            </summary>
        </member>
        <member name="M:NuGet.StringBuilderPool.Rent(System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.Text.StringBuilder" /> that is at least the requested length.
            </summary>
            <param name="minimumCapacity">The minimum capacity of the <see cref="T:System.Text.StringBuilder" /> needed.</param>
            <returns>
            A <see cref="T:System.Text.StringBuilder" /> that is at least <paramref name="minimumCapacity" /> in length.
            </returns>
            <remarks>
            This buffer is loaned to the caller and should be returned to the same pool via
            <see cref="M:NuGet.StringBuilderPool.Return(System.Text.StringBuilder)" /> so that it may be reused in subsequent usage of <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" />.
            It is not a fatal error to not return a rented string builder, but failure to do so may lead to
            decreased application performance, as the pool may need to create a new instance to replace
            the one lost.
            </remarks>
        </member>
        <member name="M:NuGet.StringBuilderPool.Return(System.Text.StringBuilder)">
            <summary>
            Returns to the pool an array that was previously obtained via <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" /> on the same
            <see cref="T:NuGet.StringBuilderPool" /> instance.
            </summary>
            <param name="builder">
            The <see cref="T:System.Text.StringBuilder" /> previously obtained from <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" /> to return to the pool.
            </param>
            <remarks>
            Once a <see cref="T:System.Text.StringBuilder" /> has been returned to the pool, the caller gives up all ownership
            of the instance and must not use it. The reference returned from a given call to <see cref="M:NuGet.StringBuilderPool.Rent(System.Int32)" />
            must only be returned via <see cref="M:NuGet.StringBuilderPool.Return(System.Text.StringBuilder)" /> once.  The default <see cref="T:NuGet.StringBuilderPool" />
            may hold onto the returned instance in order to rent it again, or it may release the returned instance
            if it's determined that the pool already has enough instances stored.
            </remarks>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>2gKwo+/5L9E5fCAPbHjcDFQbq+dFvhW91Mwjc0JCPWw=</DigestValue></Reference></SignedInfo><SignatureValue>HF64/N4JX0ZWu1gBE1l+pUvf1tUvHwWrRrLDJW4yGj4ZLaRSuooLn7qN5mX57si+cOjC2NMmbmgmYDKTWZquBvjQu3ve9zvKzmmo+t6ggsjz0uz6mq2YSGOZ4O93Xv7FP2WCS9THN7ZCWjQWHdMC1AN+IqjaBWwTLxXIOG5jWKWGlMNd5GYaxHc9LiI+OLiBQF+T0MeqmmErtb4BfShihSapzXIfLCbGNcMhd1iG9byWLR49hY7Y6UMsfwxbf73VW0cvZPjAvliBKzGjU9vLJlyxpB7m+GbaE2WWXOXo8HZAVrgD8f8yuN7c6tzUYRO4z3Ea0/Eb/x9+mT5BqkwIpA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>trsZWRAAo6nx5LhcqAsHy9uaHyPQ2VireMBI9yQUOPBj7dVLA7/N+AnKFFDzJ7P+grT6GkOE4cv5GzjoP8yQJ6yXojEKkXti7HW/zUiNoF11/ZWndf8j1Azl6OBjcD416tSWYvh2VfdW1K+mY83j49YPm3qbKnfxwtV0nI9H092gMS0cpCUsxMRAZlPXksrjsFLqvgq4rnULVhjHSVOudL/yps3zOOmOpaPzAp56b898xC+zzHVHcKo/52IRht1FSC8V+7QHTG8+yzfuljiKU9QONa8GqDlZ7/vFGveB8IY2ZrtUu98nle0WWTcaIRHoCYvWGLLF2u1GVFJAggPipw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIE9TCCA92gAwIBAgITMwAAAVdEB2Lcb+i+KgAAAAABVzANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMTAxMTQxOTAyMTNaFw0yMjA0MTExOTAyMTNaMIHOMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046QzRCRC1FMzdGLTVGRkMxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDebQOnVGb558C/akLV3MDwDYQeHs/uQkK3j6f2fEx+DQa+bwHxjKNJVf5YnQWrSk4BxKzrih9dcVQHwXoRybx/U/zoTnPNwibPW8w4a5XdCXct3icgtMgXcVXrnEvtmtmQXedMAYP+f9mI0NspXw9HcSiurUC8XTg07mnUDG3WtOZTxp1hsGd54koCClUYKqglZYR88DbUYdQB/mcW30nu7fM96BCgHUwMu0rD/MpIbd7K43YdAcpDxXaWgIKsFgiSSZhpNIAK0rxwvPr17RqNzCYVkEXuSbc3Q+ZHWih/bnPYJ0obF8gxIRmY8d/m/HLqhDvGx79Fj1/TERH638b5AgMBAAGjggEbMIIBFzAdBgNVHQ4EFgQUXTF7u+g4IZ1P5D0zCnRZEfaAqdkwHwYDVR0jBBgwFoAU1WM6XIoxkPNDe3xGG8UzaFqFbVUwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljVGltU3RhUENBXzIwMTAtMDctMDEuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAQEAJXd5AIBul1omcr3Ymy0Zlq+8m+kUsnI1Q4PLXAorUtNbE1aeE/AHdkHmHyVnyugzBJO0EQXyoHTe6BPHV7ZkFS/iXMS49KVLsuDQeUXIXLXg+XUZ03ypUYvL4ClGsQ3KBSMzRFM9RB6aKXmoA2+P7iPVI+bSLsJYpP6q7/7BwMO5DOIBCyzToHXr/Wf+8aNSSMH3tHqEDN8MXAhS7n/EvTp3LbWhQFh7RBEfCL4EQICyf1p5bhc+vPoaw30cl/6qlkjyBNL6BOqhcdc/FLy8CqZuuUDcjQ0TKf1ZgqakWa8QdaNEWOz/p+I0jRr25Nm0e9JCrf3aIBRUQR1VblMX/g==</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
