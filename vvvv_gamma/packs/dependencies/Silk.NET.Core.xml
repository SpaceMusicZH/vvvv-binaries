<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Silk.NET.Core</name>
    </assembly>
    <members>
        <member name="T:Silk.NET.Core.Attributes.CountAttribute">
            <summary>
            Represents the count of a parameter.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Attributes.CountAttribute.Count">
            <summary>
            Gets or sets the static count.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Attributes.CountAttribute.Parameter">
            <summary>
            Gets or sets the deterministic parameter for this count.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Attributes.CountAttribute.Computed">
            <summary>
            Gets or sets the computed count.
            </summary>
        </member>
        <member name="T:Silk.NET.Core.Attributes.FlowAttribute">
            <summary>
            The direction a parameter flows.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Attributes.FlowAttribute.#ctor(Silk.NET.Core.Native.FlowDirection)">
            <summary>
            Create a new FlowAttribute.
            </summary>
            <param name="flowDirection">The direction this attribute flows.</param>
        </member>
        <member name="P:Silk.NET.Core.Attributes.FlowAttribute.Direction">
            <summary>
            The direction this parameter flows.
            </summary>
        </member>
        <member name="T:Silk.NET.Core.Attributes.InjectAttribute">
            <summary>
            An attribute specifying an inject point to be injected by SilkTouch.
            </summary>
            <remarks>See SilkTouch documentation.</remarks>
            <seealso cref="T:Silk.NET.Core.Attributes.SilkTouchStage"/>
        </member>
        <member name="M:Silk.NET.Core.Attributes.InjectAttribute.#ctor(Silk.NET.Core.Attributes.SilkTouchStage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Silk.NET.Core.Attributes.InjectAttribute"/> class.
            </summary>
            <param name="silkTouchStage">The stage at which to inject.</param>
            <param name="code">The code to inject.</param>
        </member>
        <member name="T:Silk.NET.Core.Attributes.SilkTouchStage">
            <summary>
            An enum indicating where to inject code to SilkTouch. DO NOT RELY ON NUMERIC VALUES.
            </summary>
            <remarks>See SilkTouch documentation.</remarks>
            <seealso cref="T:Silk.NET.Core.Attributes.InjectAttribute"/>
        </member>
        <member name="F:Silk.NET.Core.Attributes.SilkTouchStage.None">
            <summary>
            No stage. Default value.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Attributes.SilkTouchStage.Begin">
            <summary>
            The start of the pipeline.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Attributes.SilkTouchStage.PostInit">
            <summary>
            After basic values have been initialized.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Attributes.SilkTouchStage.PostPin">
            <summary>
            After pinning occurs.
            </summary>
            <remarks>Currently there is no PostRelease or similar (that would occur after pins have been released), since SilkTouch currently never closes blocks.</remarks>
        </member>
        <member name="F:Silk.NET.Core.Attributes.SilkTouchStage.PreLoad">
            <summary>
            Just before loading.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Attributes.SilkTouchStage.PostLoad">
            <summary>
            Just after loading.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Attributes.SilkTouchStage.End">
            <summary>
            The end of the pipeline.
            </summary>
        </member>
        <member name="T:Silk.NET.Core.Contexts.DefaultNativeContext">
            <summary>
            A native context that uses an <see cref="T:Silk.NET.Core.Loader.UnmanagedLibrary" /> for native library/function loading.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.#ctor(Silk.NET.Core.Loader.UnmanagedLibrary)">
            <summary>
            Creates a new native context for the given underlying library.
            </summary>
            <param name="library">The library to use.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.#ctor(System.String)">
            <summary>
            Loads a native library using the given name and creates a new native context from it.
            </summary>
            <param name="name">The name of the underlying library.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.#ctor(System.String[])">
            <summary>
            Loads a native library using the given possible names and creates a new native context from it.
            </summary>
            <param name="names">The possible names of the underlying library.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.#ctor(System.String,Silk.NET.Core.Loader.LibraryLoader)">
            <summary>
            Loads a native library using the given name and a custom loader, then creates a new native context from it.
            </summary>
            <param name="name">The name of the underlying library.</param>
            <param name="loader">The custom loader to use.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.#ctor(System.String[],Silk.NET.Core.Loader.LibraryLoader)">
            <summary>
            Loads a native library using the given possible names and a custom loader, then creates a new native
            context from it.
            </summary>
            <param name="names">The possible names of the underlying library.</param>
            <param name="loader">The custom loader to use.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.#ctor(System.String,Silk.NET.Core.Loader.LibraryLoader,Silk.NET.Core.Loader.PathResolver)">
            <summary>
            Loads a native library using the given name, custom loader, and path resolver; then creates a new native
            context from it.
            </summary>
            <param name="name">The name of the underlying library.</param>
            <param name="loader">The custom loader to use.</param>
            <param name="pathResolver">The path resolver to use.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.#ctor(System.String[],Silk.NET.Core.Loader.LibraryLoader,Silk.NET.Core.Loader.PathResolver)">
            <summary>
            Loads a native library using the given possible names, custom loader, and path resolver; then creates a
            new native context from it.
            </summary>
            <param name="names">The possible names of the underlying library.</param>
            <param name="loader">The custom loader to use.</param>
            <param name="pathResolver">The path resolver to use.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.GetProcAddress(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.TryGetProcAddress(System.String,System.IntPtr@,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Silk.NET.Core.Contexts.DefaultNativeContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Silk.NET.Core.Contexts.INativeWindow">
            <summary>
            Wraps any underlying native window handles a window (or window-like instance) may have. 
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Kind">
            <summary>
            Gets a bitmask enum representing the underlying platforms powering this window.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.X11">
            <summary>
            The X11 display pointer (Display*) and the window XID (Window) of the underlying X11 window. May be null,
            in which case the underlying window is not using X11.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Cocoa">
            <summary>
            The Cocoa window (NSWindow*). May be null, in which case the underlying window is not using Cocoa.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Wayland">
            <summary>
            The Wayland display pointer (wl_display*) and surface pointer (wl_surface*). May be null, in which case the
            underlying window is not using Wayland.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.WinRT">
            <summary>
            The WinRT window's inspectable interface (IInspectable*). May be null, in which case the underlying window
            is not using WinRT.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.UIKit">
            <summary>
            The UIKit window pointer (UIWindow*), OpenGL framebuffer object, OpenGL renderbuffer object, and resolve
            color renderbuffer. May be null, in which case the underlying window is not using UIKit.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Win32">
            <summary>
            The Win32 window handle (HWND), display controller (HDC), and instance (HINSTANCE). May be null, in which
            case the underlying window is not using Win32.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Vivante">
            <summary>
            The Vivante EGL display type (EGLNativeDisplayType) and EGL window type (EGLNativeWindowType). May be null,
            in which case the underlying window is not using Vivante.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Android">
            <summary>
            The Android native window pointer (ANativeWindow*) and EGL surface (EGLSurface). May be null, in which case
            the underlying window is not using Android.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Glfw">
            <summary>
            The GLFW window handle (GLFWwindow* or WindowHandle* if using Silk.NET.GLFW). May be null, in which case the
            underlying window is not using GLFW.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindow.Sdl">
            <summary>
            The SDL window handle (SDL_Window* or Window* if using Silk.NET.SDL). May be null, in which case the
            underlying window is not using SDL.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.INativeWindowSource.Native">
            <summary>
            Gets the <see cref="T:Silk.NET.Core.Contexts.INativeWindow"/> instance representing the underlying native window handle(s), or null
            if a native window has not been created (i.e. because the window has not been initialized yet)
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Contexts.IVkSurface.Create``1(Silk.NET.Core.Native.VkHandle,``0*)">
            <summary>
            Create a Vulkan surface.
            </summary>
            <param name="instance">The Vulkan instance to create a surface for.</param>
            <param name="allocator">A custom Vulkan allocator. Can be omitted by passing null.</param>
            <typeparam name="T">Allocator type</typeparam>
            <returns>A handle to the Vulkan surface created</returns>
        </member>
        <member name="M:Silk.NET.Core.Contexts.IVkSurface.GetRequiredExtensions(System.UInt32@)">
            <summary>
            Get the extensions required for Vulkan to work on this platform.
            </summary>
            <param name="count">The number of extensions in the returned array</param>
            <returns>An array of strings, containing names for all required extensions</returns>
        </member>
        <member name="T:Silk.NET.Core.Contexts.MultiNativeContext">
            <summary>
            A <see cref="T:Silk.NET.Core.Contexts.INativeContext"/> implementation which uses multiple children <see cref="T:Silk.NET.Core.Contexts.INativeContext"/>s for
            sourcing its function pointers.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Contexts.MultiNativeContext.Contexts">
            <summary>
            The child contexts.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Contexts.MultiNativeContext.#ctor(Silk.NET.Core.Contexts.INativeContext[])">
            <summary>
            Creates a <see cref="T:Silk.NET.Core.Contexts.MultiNativeContext"/> from the given child contexts.
            </summary>
            <param name="contexts">The children to use.</param>
        </member>
        <member name="M:Silk.NET.Core.Contexts.MultiNativeContext.GetProcAddress(System.String,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Silk.NET.Core.Contexts.MultiNativeContext.TryGetProcAddress(System.String,System.IntPtr@,System.Nullable{System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Silk.NET.Core.Contexts.MultiNativeContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Silk.NET.Core.Loader.DefaultPathResolver">
            <summary>
                Enumerates possible library load targets. This default implementation returns the following load targets:
                First: The library contained in the applications base folder.
                Second: The simple name, unchanged.
                Third: The library as resolved via the default DependencyContext, in the default nuget package cache folder.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Loader.DefaultPathResolver.EnumeratePossibleLibraryLoadTargets(System.String)">
            <summary>
                Returns an enumerator which yields possible library load targets, in priority order.
            </summary>
            <param name="name">The name of the library to load.</param>
            <returns>An enumerator yielding load targets.</returns>
        </member>
        <member name="T:Silk.NET.Core.Loader.LibraryLoader">
            <summary>
                Exposes functionality for loading native libraries and function pointers.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.LoadNativeLibrary(System.String)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="name">The name of the library to open.</param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.TryLoadNativeLibrary(System.String,System.IntPtr@)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="name">The name of the library to open.</param>
            <param name="result">A pointer to the loaded library.</param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.LoadNativeLibrary(System.String[])">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="names">
                An ordered list of names. Each name is tried in turn, until the library is successfully loaded.
            </param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.TryLoadNativeLibrary(System.String[],System.IntPtr@)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="names">
                An ordered list of names. Each name is tried in turn, until the library is successfully loaded.
            </param>
            <param name="result">A pointer to the loaded library.</param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.LoadNativeLibrary(System.String,Silk.NET.Core.Loader.PathResolver)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="name">The name of the library to open.</param>
            <param name="pathResolver">The path resolver to use.</param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.TryLoadNativeLibrary(System.String,Silk.NET.Core.Loader.PathResolver,System.IntPtr@)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="name">The name of the library to open.</param>
            <param name="pathResolver">The path resolver to use.</param>
            <param name="result">A pointer to the loaded library.</param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.LoadNativeLibrary(System.String[],Silk.NET.Core.Loader.PathResolver)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="names">
                An ordered list of names. Each name is tried in turn, until the library is successfully loaded.
            </param>
            <param name="pathResolver">The path resolver to use.</param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.TryLoadNativeLibrary(System.String[],Silk.NET.Core.Loader.PathResolver,System.IntPtr@)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="names">
                An ordered list of names. Each name is tried in turn, until the library is successfully loaded.
            </param>
            <param name="pathResolver">The path resolver to use.</param>
            <param name="result">A pointer to the loaded library.</param>
            <returns>The operating system handle for the shared library.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.LoadFunctionPointer(System.IntPtr,System.String)">
            <summary>
                Loads a function pointer out of the given library by name.
            </summary>
            <param name="handle">The operating system handle of the opened shared library.</param>
            <param name="functionName">The name of the exported function to load.</param>
            <returns>A pointer to the loaded function.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.TryLoadFunctionPointer(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
                Attempts a function pointer out of the given library by name.
            </summary>
            <param name="handle">The operating system handle of the opened shared library.</param>
            <param name="functionName">The name of the exported function to load.</param>
            <param name="pfn">A pointer to the loaded function, or 0 if it failed to load.</param>
            <returns>Whether the load was successful or not.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.FreeNativeLibrary(System.IntPtr)">
            <summary>
                Frees the library represented by the given operating system handle.
            </summary>
            <param name="handle">The handle of the open shared library.</param>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.CoreLoadNativeLibrary(System.String)">
            <summary>
                Loads a native library by name and returns an operating system handle to it.
            </summary>
            <param name="name">The name of the library to open. This parameter must not be null or empty.</param>
            <returns>
                The operating system handle for the shared library.
                If the library cannot be loaded, IntPtr.Zero should be returned.
            </returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.CoreFreeNativeLibrary(System.IntPtr)">
            <summary>
                Frees the library represented by the given operating system handle.
            </summary>
            <param name="handle">The handle of the open shared library. This must not be zero.</param>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.CoreLoadFunctionPointer(System.IntPtr,System.String)">
            <summary>
                Loads a function pointer out of the given library by name.
            </summary>
            <param name="handle">The operating system handle of the opened shared library. This must not be zero.</param>
            <param name="functionName">The name of the exported function to load. This must not be null or empty.</param>
            <returns>A pointer to the loaded function.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.LibraryLoader.GetPlatformDefaultLoader">
            <summary>
                Returns a default library loader for the running operating system.
            </summary>
            <returns>A LibraryLoader suitable for loading libraries.</returns>
        </member>
        <member name="T:Silk.NET.Core.Loader.PathResolver">
            <summary>
                Enumerates possible library load targets.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.PathResolver.Default">
            <summary>
                Gets a default path resolver.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Loader.PathResolver.EnumeratePossibleLibraryLoadTargets(System.String)">
            <summary>
                Returns an enumerator which yields possible library load targets, in priority order.
            </summary>
            <param name="name">The name of the library to load.</param>
            <returns>An enumerator yielding load targets.</returns>
        </member>
        <member name="T:Silk.NET.Core.Loader.SearchPathContainer">
            <summary>
            Contains the platform-specific search paths and names for a native library.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.SearchPathContainer.Platform">
            <summary>
            Gets or sets the underlying platform (operating system) to use for search path resolution.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.SearchPathContainer.Windows64">
            <summary>
            Gets the library name to use on Windows 64-bit.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.SearchPathContainer.Windows86">
            <summary>
            Gets the library name to use on Windows 32-bit.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.SearchPathContainer.Linux">
            <summary>
            Gets the library name to use on Linux.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.SearchPathContainer.MacOS">
            <summary>
            Gets the library name to use on MacOS.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.SearchPathContainer.Android">
            <summary>
            Gets the library name to use on Android.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Loader.SearchPathContainer.IOS">
            <summary>
            Gets the library name to use on iOS.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Loader.SearchPathContainer.GetLibraryName">
            <summary>
            Gets the library name to use on the current platform.
            </summary>
            <returns>The library name.</returns>
        </member>
        <member name="T:Silk.NET.Core.Loader.UnmanagedLibrary">
            <summary>
                Represents a native shared library opened by the operating system.
                This type can be used to load native function pointers by name.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.#ctor(System.String)">
            <summary>
                Constructs a new NativeLibrary using the platform's default library loader.
            </summary>
            <param name="name">The name of the library to load.</param>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.#ctor(System.String[])">
            <summary>
                Constructs a new NativeLibrary using the platform's default library loader.
            </summary>
            <param name="names">An ordered list of names to attempt to load.</param>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.#ctor(System.String,Silk.NET.Core.Loader.LibraryLoader)">
            <summary>
                Constructs a new NativeLibrary using the specified library loader.
            </summary>
            <param name="name">The name of the library to load.</param>
            <param name="loader">The loader used to open and close the library, and to load function pointers.</param>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.#ctor(System.String[],Silk.NET.Core.Loader.LibraryLoader)">
            <summary>
                Constructs a new NativeLibrary using the specified library loader.
            </summary>
            <param name="names">An ordered list of names to attempt to load.</param>
            <param name="loader">The loader used to open and close the library, and to load function pointers.</param>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.#ctor(System.String,Silk.NET.Core.Loader.LibraryLoader,Silk.NET.Core.Loader.PathResolver)">
            <summary>
                Constructs a new NativeLibrary using the specified library loader.
            </summary>
            <param name="name">The name of the library to load.</param>
            <param name="loader">The loader used to open and close the library, and to load function pointers.</param>
            <param name="pathResolver">The path resolver, used to identify possible load targets for the library.</param>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.#ctor(System.String[],Silk.NET.Core.Loader.LibraryLoader,Silk.NET.Core.Loader.PathResolver)">
            <summary>
                Constructs a new NativeLibrary using the specified library loader.
            </summary>
            <param name="names">An ordered list of names to attempt to load.</param>
            <param name="loader">The loader used to open and close the library, and to load function pointers.</param>
            <param name="pathResolver">The path resolver, used to identify possible load targets for the library.</param>
        </member>
        <member name="P:Silk.NET.Core.Loader.UnmanagedLibrary.Handle">
            <summary>
                The operating system handle of the loaded library.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.Dispose">
            <summary>
                Frees the native library. Function pointers retrieved from this library will be void.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.LoadFunction``1(System.String)">
            <summary>
                Loads a function whose signature matches the given delegate type's signature.
            </summary>
            <typeparam name="T">The type of delegate to return.</typeparam>
            <param name="name">The name of the native export.</param>
            <returns>A delegate wrapping the native function.</returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown when no function with the given name
                is exported from the native library.
            </exception>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.TryLoadFunction``1(System.String,``0@)">
            <summary>
                Attempts to load a function whose signature matches the given delegate type's signature.
            </summary>
            <typeparam name="T">The type of delegate to return.</typeparam>
            <param name="name">The name of the native export.</param>
            <param name="pfn">A delegate wrapping the native function.</param>
            <returns>Whether the load operation was successful or not.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.LoadFunction(System.String)">
            <summary>
                Loads a function pointer with the given name.
            </summary>
            <param name="name">The name of the native export.</param>
            <returns>A function pointer for the given name.</returns>
        </member>
        <member name="M:Silk.NET.Core.Loader.UnmanagedLibrary.TryLoadFunction(System.String,System.IntPtr@)">
            <summary>
                Attempts to load a function pointer with the given name.
            </summary>
            <param name="name">The name of the native export.</param>
            <param name="pfn">A function pointer for the given name, or 0 if no function with that name exists.</param>
            <returns>Whether the load was successful or not.</returns>
        </member>
        <member name="T:Silk.NET.Core.Bool32">
            <summary>
            A 32-bit boolean.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Bool32.Value">
            <summary>
            Gets the 32-bit value for this boolean.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Bool32.#ctor(System.UInt32)">
            <summary>
            Creates a 32-bit boolean from the given 32-bit unsigned integer.
            </summary>
            <param name="val">The 32-bit unsigned integer value.</param>
        </member>
        <member name="M:Silk.NET.Core.Bool32.#ctor(System.Boolean)">
            <summary>
            Creates a 32-bit boolean from the given managed boolean.
            </summary>
            <param name="val">The boolean value.</param>
        </member>
        <member name="M:Silk.NET.Core.Bool32.op_Implicit(Silk.NET.Core.Bool32)~System.Boolean">
            <summary>
            Converts this 32-bit boolean to a managed boolean.
            </summary>
            <param name="val">The 32-bit boolean.</param>
            <returns>The managed boolean.</returns>
        </member>
        <member name="M:Silk.NET.Core.Bool32.op_Implicit(Silk.NET.Core.Bool32)~System.UInt32">
            <summary>
            Converts this 32-bit boolean to a 32-bit unsigned integer.
            </summary>
            <param name="val">The 32-bit boolean.</param>
            <returns>The 32-bit unsigned integer.</returns>
        </member>
        <member name="M:Silk.NET.Core.Bool32.op_Implicit(System.Boolean)~Silk.NET.Core.Bool32">
            <summary>
            Creates a 32-bit boolean from the given managed boolean.
            </summary>
            <param name="val">The boolean value.</param>
        </member>
        <member name="M:Silk.NET.Core.Bool32.op_Implicit(System.UInt32)~Silk.NET.Core.Bool32">
            <summary>
            Creates a 32-bit boolean from the given 32-bit unsigned integer.
            </summary>
            <param name="val">The 32-bit unsigned integer value.</param>
        </member>
        <member name="T:Silk.NET.Core.BreakneckLock">
            <summary>
            Provided a lightweight spin lock for synchronization in high performance
            scenarios with a low hold time
            </summary>
            <remarks>
            This lock is very performant, but it is very dangerous (hence breakneck).
            It's recommended to use the framework-provided locks where possible.
            </remarks>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.Create">
            <summary>
            Creates a new <see cref="T:Silk.NET.Core.BreakneckLock"/>
            </summary>
            <returns>A new <see cref="T:Silk.NET.Core.BreakneckLock"/></returns>
        </member>
        <member name="P:Silk.NET.Core.BreakneckLock.IsAcquired">
            <summary>
            Returns <c>true</c> if the lock is acquired, else <c>false</c>
            </summary>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.Enter(System.Boolean@)">
            <summary>
            Enter the lock. If this method returns, <paramref name="taken"/>
            will be <c>true</c>. If an exception occurs, <paramref name="taken"/> will indicate
            whether the lock was taken and needs to be released using <see cref="M:Silk.NET.Core.BreakneckLock.Exit"/>.
            This method may never exit
            </summary>
            <param name="taken">A reference to a bool that indicates whether the lock is taken. Must
            be <c>false</c> when passed, else the internal state or return state may be corrupted.
            If the method returns, this is guaranteed to be <c>true</c></param>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.TryEnter(System.Boolean@)">
            <summary>
            Enter the lock if it not acquired, else, do not. <paramref name="taken"/> will be
            <c>true</c> if the lock was taken, else <c>false</c>. If <paramref name="taken"/> is
            <c>true</c>, <see cref="M:Silk.NET.Core.BreakneckLock.Exit"/> must be called to release it, else, it must not be called
            </summary>
            <param name="taken">A reference to a bool that indicates whether the lock is taken. Must
            be <c>false</c> when passed, else the internal state or return state may be corrupted</param>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.TryEnter(System.Boolean@,System.UInt32)">
            <summary>
            Try to safely enter the lock a certain number of times (<paramref name="iterations"/>).
            <paramref name="taken"/> will be <c>true</c> if the lock was taken, else <c>false</c>.
            If <paramref name="taken"/> is <c>true</c>, <see cref="M:Silk.NET.Core.BreakneckLock.Exit"/> must be called to release
            it, else, it must not be called
            </summary>
            <param name="taken">A reference to a bool that indicates whether the lock is taken. Must
            be <c>false</c> when passed, else the internal state or return state may be corrupted</param>
            <param name="iterations">The number of attempts to acquire the lock before returning
            without the lock</param>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.TryEnter(System.Boolean@,System.TimeSpan)">
            <summary>
            Try to safely enter the lock for a certain <see cref="T:System.TimeSpan"/> (<paramref name="timeout"/>).
            <paramref name="taken"/> will be <c>true</c> if the lock was taken, else <c>false</c>.
            If <paramref name="taken"/> is <c>true</c>, <see cref="M:Silk.NET.Core.BreakneckLock.Exit"/> must be called to release
            it, else, it must not be called
            </summary>
            <param name="taken">A reference to a bool that indicates whether the lock is taken. Must
            be <c>false</c> when passed, else the internal state or return state may be corrupted</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to attempt to acquire the lock for before
            returning without the lock. A negative <see cref="T:System.TimeSpan"/>will cause undefined behaviour</param>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.Exit">
            <summary>
            Exit the lock. This method is dangerous and must be called only once the caller is sure they have
            ownership of the lock.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.Exit(System.Boolean)">
            <summary>
            Exit the lock with an optional post-release memory barrier. This method is dangerous and must be called only
            once the caller is sure they have ownership of the lock.
            </summary>
            <param name="insertMemBarrier">Whether a memory barrier should be inserted after the release</param>
        </member>
        <member name="M:Silk.NET.Core.BreakneckLock.ExitWithBarrier">
            <summary>
            Exit the lock with a post-release memory barrier. This method is dangerous and must be called only once the
            caller is sure they have ownership of the lock.
            </summary>
        </member>
        <member name="T:Silk.NET.Core.PlatformException">
            <summary>
            An exception thrown when an underlying native platform fails to complete an operation due to an error.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.PlatformException.#ctor">
            <summary>
            Creates an instance of this exception with the default message.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.PlatformException.#ctor(System.String)">
            <summary>
            Creates an instance of this exception with the given message.
            </summary>
            <param name="msg">The message.</param>
        </member>
        <member name="M:Silk.NET.Core.PlatformException.#ctor(System.Exception)">
            <summary>
            Creates an instance of this exception with the given inner exception.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Silk.NET.Core.PlatformException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this exception with the given message and inner exception.
            </summary>
            <param name="msg">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Silk.NET.Core.PlatformException.#ctor(System.String,System.Exception[])">
            <summary>
            Creates an instance of this exception with the given message and inner exceptions.
            </summary>
            <param name="msg">The message.</param>
            <param name="inner">The inner exceptions.</param>
        </member>
        <member name="T:Silk.NET.Core.RawImage">
            <summary>
            Represents loaded, uncompressed, processed image data.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.RawImage.#ctor(System.Int32,System.Int32,System.Memory{System.Byte})">
            <summary>
            Creates a <see cref="T:Silk.NET.Core.RawImage"/> given pixel data and pixel dimensions.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="rgbaPixels">The image daqta.</param>
        </member>
        <member name="P:Silk.NET.Core.RawImage.Width">
            <summary>
            The width of the image in pixels
            </summary>
        </member>
        <member name="P:Silk.NET.Core.RawImage.Height">
            <summary>
            The height of the image in pixels.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.RawImage.Pixels">
            <summary>
            The image data.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.RawImage.op_Equality(Silk.NET.Core.RawImage,Silk.NET.Core.RawImage)">
            <summary>
            Checks whether the two given <see cref="T:Silk.NET.Core.RawImage"/>s are equal.
            </summary>
            <param name="left">The first raw image.</param>
            <param name="right">The second raw image to compare the first against.</param>
            <returns>True if they are equal, false otherwise.</returns>
            <remarks>
            This does not check whether the byte arrays are equal, only whether their references are the same.
            </remarks>  
        </member>
        <member name="M:Silk.NET.Core.RawImage.op_Inequality(Silk.NET.Core.RawImage,Silk.NET.Core.RawImage)">
            <summary>
            Checks whether the two given <see cref="T:Silk.NET.Core.RawImage"/>s are not equal.
            </summary>
            <param name="left">The first raw image.</param>
            <param name="right">The second raw image to compare the first against.</param>
            <returns>True if they are not equal, false otherwise.</returns>
            <remarks>
            This does not check whether the byte arrays are equal, only whether their references are the same.
            </remarks>
        </member>
        <member name="M:Silk.NET.Core.RawImage.Equals(Silk.NET.Core.RawImage)">
            <summary>
            Checks whether the given <see cref="T:Silk.NET.Core.RawImage"/> is equal to this one.
            </summary>
            <param name="other">The raw image to compare this raw image against.</param>
            <returns>True if they are equal, false otherwise.</returns>
            <remarks>
            This does not check whether the byte arrays have equal, only whether their references are the same.
            </remarks>  
        </member>
        <member name="M:Silk.NET.Core.RawImage.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Silk.NET.Core.RawImage.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Silk.NET.Core.Version32">
            <summary>
            A 32-bit version structure.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Version32.Value">
            <summary>
            The underlying Vulkan-compatible 32-bit version integer.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Version32.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a Vulkan version structure from the given major, minor, and patch values.
            </summary>
            <param name="major">The major value.</param>
            <param name="minor">The minor value.</param>
            <param name="patch">The patch value.</param>
        </member>
        <member name="M:Silk.NET.Core.Version32.#ctor(System.UInt32)">
            <summary>
            Creates a Vulkan version structure from the given Vulkan-compatible value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Silk.NET.Core.Version32.Major">
            <summary>
            Gets the major component of this version structure.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Version32.Minor">
            <summary>
            Gets the minor component of this version structure.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Version32.Patch">
            <summary>
            Gets the patch component of this version structure.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Version32.op_Explicit(System.UInt32)~Silk.NET.Core.Version32">
            <summary>
            Creates a 32-bit version structure from the given 32-bit unsigned integer.
            </summary>
            <param name="val">The uint value.</param>
            <returns>The 32-bit version structure.</returns>
        </member>
        <member name="M:Silk.NET.Core.Version32.op_Implicit(System.Version)~Silk.NET.Core.Version32">
            <summary>
            Creates a 32-bit version structure from the given managed version class.
            </summary>
            <param name="version">The version instance.</param>
            <returns>The 32-bit version structure.</returns>
        </member>
        <member name="M:Silk.NET.Core.Version32.op_Implicit(Silk.NET.Core.Version32)~System.UInt32">
            <summary>
            Gets the 32-bit unsigned integer representation for this 32-bit version structure.
            </summary>
            <param name="version">The 32-bit version structure.</param>
            <returns>The 32-bit unsigned integer.</returns>
        </member>
        <member name="M:Silk.NET.Core.Version32.op_Implicit(Silk.NET.Core.Version32)~System.Version">
            <summary>
            Converts this 32-bit version structure to a managed version class.
            </summary>
            <param name="version">The 32-bit version structure.</param>
            <returns>The managed representation.</returns>
        </member>
        <member name="T:Silk.NET.Core.Version64">
            <summary>
            A 64-bit version structure.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Version64.Value">
            <summary>
            The underlying OpenXR-compatible 64-bit version integer.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Version64.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a OpenXR version structure from the given major, minor, and patch values.
            </summary>
            <param name="major">The major value.</param>
            <param name="minor">The minor value.</param>
            <param name="patch">The patch value.</param>
        </member>
        <member name="M:Silk.NET.Core.Version64.#ctor(System.UInt64)">
            <summary>
            Creates a OpenXR version structure from the given OpenXR-compatible value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Silk.NET.Core.Version64.Major">
            <summary>
            Gets the major component of this version structure.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Version64.Minor">
            <summary>
            Gets the minor component of this version structure.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Version64.Patch">
            <summary>
            Gets the patch component of this version structure.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Version64.op_Explicit(System.UInt64)~Silk.NET.Core.Version64">
            <summary>
            Creates a 64-bit version structure from the given 64-bit unsigned integer.
            </summary>
            <param name="val">The uint value.</param>
            <returns>The 64-bit version structure.</returns>
        </member>
        <member name="M:Silk.NET.Core.Version64.op_Implicit(System.Version)~Silk.NET.Core.Version64">
            <summary>
            Creates a 64-bit version structure from the given managed version class.
            </summary>
            <param name="version">The version instance.</param>
            <returns>The 64-bit version structure.</returns>
        </member>
        <member name="M:Silk.NET.Core.Version64.op_Implicit(Silk.NET.Core.Version64)~System.UInt64">
            <summary>
            Gets the 64-bit unsigned integer representation for this 64-bit version structure.
            </summary>
            <param name="version">The 64-bit version structure.</param>
            <returns>The 64-bit unsigned integer.</returns>
        </member>
        <member name="M:Silk.NET.Core.Version64.op_Implicit(Silk.NET.Core.Version64)~System.Version">
            <summary>
            Converts this 64-bit version structure to a managed version class.
            </summary>
            <param name="version">The 64-bit version structure.</param>
            <returns>The managed representation.</returns>
        </member>
        <member name="T:Silk.NET.Core.Native.FlowDirection">
            <summary>
            How the parameter should flow - in or out?
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Native.FlowDirection.Undefined">
            <summary>
            The flow direction is undefined.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Native.FlowDirection.In">
            <summary>
            An input parameter.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Native.FlowDirection.Out">
            <summary>
            An output parameter.
            </summary>
        </member>
        <member name="T:Silk.NET.Core.Native.GlobalMemory">
            <summary>
            Represents a block of global memory. That is, memory that is pinned and is valid so long as this object is alive.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Native.GlobalMemory.Length">
            <summary>
            Gets the length of this block of global memory.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Native.GlobalMemory.Item(System.Int32)">
            <summary>
            Gets a reference to a specific index of this block of global memory.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Silk.NET.Core.Native.GlobalMemory.Item(System.Index)">
            <summary>
            Gets a reference to a specific index of this block of global memory.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Silk.NET.Core.Native.GlobalMemory.Item(System.Range)">
            <summary>
            Gets a span representing a specific area of this block of global memory.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="P:Silk.NET.Core.Native.GlobalMemory.Handle">
            <summary>
            Gets a handle to this block of global memory.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.AsSpan">
            <summary>
            Gets a span representing this block of global memory.
            </summary>
            <returns>A span of global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.AsSpan``1">
            <summary>
            Gets a span of the given type representing this block of global memory.
            </summary>
            <returns>A span of global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.AsRef``1(System.Int32)">
            <summary>
            Gets a reference of the given type to a specific index within this block of global memory.
            </summary>
            <param name="index">
            The index to get a reference to. This is in terms of the destination type, and is not a byte offset (i.e.
            the index is multiplied by the size of the destination type to get the byte offset)
            </param>
            <typeparam name="T">The type of the reference to return.</typeparam>
            <returns>A reference to global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.AsPtr``1(System.Int32)">
            <summary>
            Gets a pointer of the given type to a specific index within this block of global memory.
            </summary>
            <param name="index">
            The index to get a pointer to. This is in terms of the destination type, and is not a byte offset (i.e.
            the index is multiplied by the size of the destination type to get the byte offset)
            </param>
            <typeparam name="T">The type of the pointer to return.</typeparam>
            <returns>A pointer to global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.op_Implicit(Silk.NET.Core.Native.GlobalMemory)~System.Span{System.Byte}">
            <summary>
            Gets a span representing this block of global memory.
            </summary>
            <returns>A span of global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.op_Implicit(Silk.NET.Core.Native.GlobalMemory)~System.Void*">
            <summary>
            Gets a handle to this block of global memory.
            </summary>
            <returns>A handle to this block of global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.op_Implicit(Silk.NET.Core.Native.GlobalMemory)~System.IntPtr">
            <summary>
            Gets a handle to this block of global memory.
            </summary>
            <returns>A handle to this block of global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.GetPinnableReference">
            <summary>
            Gets a reference to the global memory. This reference is valid until this object is disposed or finalized.
            </summary>
            <returns>A reference to the global memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Silk.NET.Core.Native.GlobalMemory.Allocate(System.Int32)">
            <summary>
            Allocates a block of global memory of the given length.
            </summary>
            <param name="length">The number of bytes to allocate.</param>
            <returns>A block of global memory.</returns>
        </member>
        <member name="T:Silk.NET.Core.Native.NativeAPI">
            <inheritdoc />
        </member>
        <member name="P:Silk.NET.Core.Native.NativeAPI.Context">
            <summary>
            The <see cref="T:Silk.NET.Core.Contexts.INativeContext"/> this instance was created with.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Native.NativeAPI.#ctor(Silk.NET.Core.Contexts.INativeContext)">
            <inheritdoc />
        </member>
        <member name="M:Silk.NET.Core.Native.NativeAPI.IsExtensionPresent(System.String)">
            <summary>
            Whether or not an extension is present. This function might not be valid for some APIs.
            </summary>
            <param name="name">The name of the extension.</param>
            <returns>Whether or not the extension exists.</returns>
        </member>
        <member name="P:Silk.NET.Core.Native.NativeApiAttribute.EntryPoint">
            <summary>
                Gets or sets the native entry point for this method. Ignored on classes and interfaces.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Native.NativeApiAttribute.Prefix">
            <summary>
                Gets or sets the native entry point prefix for this method. If used on a method, this will override the
                prefix set in a class or interface declaration. Otherwise, this will be inherited from the class or
                interface.
            </summary>
        </member>
        <member name="P:Silk.NET.Core.Native.NativeApiAttribute.Convention">
            <summary>
                Gets or sets the calling convention.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Native.NativeExtension`1.#ctor(Silk.NET.Core.Contexts.INativeContext)">
            <inheritdoc />
        </member>
        <member name="T:Silk.NET.Core.Native.SilkMarshal">
            <summary>
            A helper class that marshals between native and managed types.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Native.SilkMarshal.IsWinapiStdcall">
            <summary>
            Gets a value indicating whether <see cref="F:System.Runtime.InteropServices.CallingConvention.Winapi"/> is equivalent to
            <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall"/>.
            </summary>
            <remarks>
            If false, <see cref="F:System.Runtime.InteropServices.CallingConvention.Winapi"/> can be generally assumed to be equivalent to
            <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl"/>.
            </remarks>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.AllocBStr(System.Int32)">
            <summary>
            Allocate a new BStr pointer.
            </summary>
            <param name="length">The length of the string pointer, in bytes.</param>
            <returns>A pointer to the created string.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.FreeBStr(System.IntPtr)">
            <summary>
            Free a BStr pointer
            </summary>
            <param name="ptr">The pointer to be freed.</param>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.Allocate(System.Int32)">
            <summary>
            Allocates a block of global memory of the given size.
            </summary>
            <remarks>
            The allocated memory must be manually freed using <see cref="M:Silk.NET.Core.Native.SilkMarshal.Free(System.IntPtr)"/>.
            </remarks>
            <param name="length">The number of bytes to allocate.</param>
            <returns>The allocated bytes.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.Free(System.IntPtr)">
            <summary>
            Frees the unmanaged construct represented by this pointer.
            </summary>
            <param name="ptr">The item to free.</param>
            <returns>
            Whether the operation was successful or not. If false, the pointer likely didn't originate from a
            <see cref="T:Silk.NET.Core.Native.SilkMarshal"/> method.
            </returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.StringToMemory(System.String,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Gets a <see cref="T:Silk.NET.Core.Native.GlobalMemory"/> object containing a copy of the input string marshalled per the specified
            native string encoding.
            </summary>
            <param name="input">The string to marshal.</param>
            <param name="encoding">The target native string encoding.</param>
            <returns>The <see cref="T:Silk.NET.Core.Native.GlobalMemory"/> object containing the marshalled string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.GetMaxSizeOf(System.String,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Gets the maximum bytes this string can consume in memory once marshalled using the given native
            encoding (including any null terminators)
            </summary>
            <param name="input">The string to get the maximum potential byte consumption of.</param>
            <param name="encoding">The native string encoding in question.</param>
            <returns>
            The number of bytes this string can consume in memory when marshalled, or <c>-1</c> if the given
            <paramref name="encoding"/> is not supported.
            </returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.StringIntoSpan(System.String,System.Span{System.Byte},Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Marshals the input string per the specified native string encoding, and stores the marshalled bytes into
            the given span
            </summary>
            <param name="input">The string to marshal.</param>
            <param name="span">The span to marshal the string into.</param>
            <param name="encoding">The target native string encoding.</param>
            <returns>The number of bytes copied into the span including the null terminator.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.AllocateString(System.Int32,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Allocates a string pointer
            </summary>
            <param name="length">Length of the memory to be allocated</param>
            <param name="encoding">The encoding of the string stored in this memory region</param>
            <returns>The pointer to the allocated memory</returns>
            <seealso cref="M:Silk.NET.Core.Native.SilkMarshal.FreeString(System.IntPtr,Silk.NET.Core.Native.NativeStringEncoding)"/>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.FreeString(System.IntPtr,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Free a string pointer
            </summary>
            <param name="ptr">The pointer to be freed</param>
            <param name="encoding">The encoding used to allocate this pointer</param>
            <seealso cref="M:Silk.NET.Core.Native.SilkMarshal.AllocateString(System.Int32,Silk.NET.Core.Native.NativeStringEncoding)"/>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.StringToPtr(System.String,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Gets a pointer to memory containing a copy of the input string marshalled per the specified
            native string encoding.
            </summary>
            <remarks>
            The allocated memory must be manually freed using <see cref="M:Silk.NET.Core.Native.SilkMarshal.Free(System.IntPtr)"/>.
            </remarks>
            <param name="input">The string to marshal.</param>
            <param name="encoding">The target native string encoding.</param>
            <returns>A pointer to the memory containing the marshalled string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.PtrToString(System.IntPtr,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Reads a null-terminated string from unmanaged memory, with the given native encoding.
            </summary>
            <param name="input">A pointer to memory containing a null-terminated string.</param>
            <param name="encoding">The encoding of the string in memory.</param>
            <returns>The string read from memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.MemoryToString(Silk.NET.Core.Native.GlobalMemory,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Reads a null-terminated string from global memory, with the given native encoding.
            </summary>
            <param name="input">Global memory containing a null-terminated string.</param>
            <param name="e">The encoding of the string in memory.</param>
            <returns>The string read from memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.SpanToString(System.Span{System.Byte},Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Reads a null-terminated string from the given span, with the given native encoding.
            </summary>
            <param name="input">A span containing a null-terminated string.</param>
            <param name="encoding">The encoding of the string in memory.</param>
            <returns>The string read from memory.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.StringArrayToMemory(System.Collections.Generic.IReadOnlyList{System.String},Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Returns a copy of the given string array in global memory, marshalled using the specified encoding.
            </summary>
            <param name="input">The input array.</param>
            <param name="e">The encoding of the resultant string array.</param>
            <returns>Global memory containing the marshalled string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.StringArrayToMemory(System.Collections.Generic.IReadOnlyList{System.String},System.Func{System.String,System.IntPtr})">
            <summary>
            Returns a copy of the given string array in global memory, marshalled using the specified custom marshaller.
            </summary>
            <param name="input">The input array.</param>
            <param name="customStringMarshaller">The custom string-to-pointer marshaller to use.</param>
            <returns>Global memory containing the marshalled string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.StringArrayToPtr(System.Collections.Generic.IReadOnlyList{System.String},Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Returns a copy of the given string array in memory, marshalled using the specified encoding.
            </summary>
            <param name="input">The input array.</param>
            <param name="encoding">The encoding of the resultant string array.</param>
            <returns>A pointer to memory containing the marshalled string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.StringArrayToPtr(System.Collections.Generic.IReadOnlyList{System.String},System.Func{System.String,System.IntPtr})">
            <summary>
            Returns a copy of the given string array in memory, marshalled using the given custom string marshaller.
            </summary>
            <param name="input">The input array.</param>
            <param name="customStringMarshaller">The marshaller to use for the individual strings in the array.</param>
            <returns>A pointer to memory containing the marshalled string array.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Silk.NET.Core.Native.SilkMarshal.CopyPtrToStringArray(System.IntPtr,System.String[],Silk.NET.Core.Native.NativeStringEncoding)" -->
        <member name="M:Silk.NET.Core.Native.SilkMarshal.PtrToStringArray(System.IntPtr,System.Int32,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Reads an array null-terminated string from unmanaged memory, with the given native encoding.
            </summary>
            <param name="input">A pointer to unmanaged memory containing a string array.</param>
            <param name="numStrings">The number of strings contained within the string array.</param>
            <param name="encoding">The encoding of the strings in memory.</param>
            <returns>The read string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.PtrToStringArray(System.IntPtr,System.Int32,System.Func{System.IntPtr,System.String})">
            <summary>
            Reads an array null-terminated string from unmanaged memory, with the given custom pointer-to-string
            marshaller.
            </summary>
            <param name="input">A pointer to unmanaged memory containing a string array.</param>
            <param name="numStrings">The number of strings contained within the string array.</param>
            <param name="customUnmarshaller">The pointer-to-string marshaller to use.</param>
            <returns>The read string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.MemoryToStringArray(Silk.NET.Core.Native.GlobalMemory,Silk.NET.Core.Native.NativeStringEncoding)">
            <summary>
            Reads an array null-terminated string from global memory, with the given native encoding.
            </summary>
            <param name="input">Global memory containing a string array.</param>
            <param name="encoding">The encoding of the strings in memory.</param>
            <returns>The read string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.MemoryToStringArray(Silk.NET.Core.Native.GlobalMemory,System.Func{System.IntPtr,System.String})">
            <summary>
            Reads an array null-terminated string from global memory, with the given pointer-to-string marshaller.
            </summary>
            <param name="input">Global memory containing a string array.</param>
            <param name="customUnmarshaller">The pointer-to-string marshaller to use.</param>
            <returns>The read string array.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.HGlobalToMemory(System.IntPtr,System.Int32)">
            <summary>
            Gets a <see cref="T:Silk.NET.Core.Native.GlobalMemory"/> object representing this HGlobal.
            </summary>
            <param name="hGlobal">The HGlobal to wrap.</param>
            <param name="length">The length of this HGlobal in bytes.</param>
            <returns>An object representing this HGlobal.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.BStrToMemory(System.IntPtr,System.Int32)">
            <summary>
            Gets a <see cref="T:Silk.NET.Core.Native.GlobalMemory"/> object representing this BStr.
            </summary>
            <param name="bStr">The BStr to wrap.</param>
            <param name="length">The length of this BStr in bytes.</param>
            <returns>An object representing this BStr.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.PtrToMemory(System.IntPtr,System.Int32)">
            <summary>
            Gets a <see cref="T:Silk.NET.Core.Native.GlobalMemory"/> object representing this pointer.
            </summary>
            <param name="ptr">The pointer to wrap.</param>
            <param name="length">The length of this pointer in bytes.</param>
            <returns>An object representing this pointer.</returns>
            <remarks>
            This is not recommended for use as it may be implied that freeing occurs when this object goes out of scope,
            even though this is not the case. If the pointer is a HGlobal or a BStr, use one of the other methods;
            otherwise, this method should only be used for accessing <see cref="T:Silk.NET.Core.Native.GlobalMemory"/>'s rich set of APIs and
            not to manage lifetime.
            </remarks>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.DelegateToPtr(System.Delegate,Silk.NET.Core.Native.DelegatePointerKind,System.Boolean)">
            <summary>
            Gets a function pointer for the given delegate.
            </summary>
            <param name="delegate">The delegate to get a function pointer to.</param>
            <param name="kind">
            The method by which SilkMarshal should retrieve the pointer. If <see cref="F:Silk.NET.Core.Native.DelegatePointerKind.Stub"/>, the
            pointer is retrieved using <see cref="T:System.Runtime.InteropServices.Marshal"/>'s <see cref="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)"/> which
            will generate an unmanaged-to-managed transition runtime stub. This may have some overhead, but is critical
            if you want to pass this pointer to native code. If this pointer is not being sent to native code, and you
            just want to use this delegate as a managed function pointer, <see cref="F:Silk.NET.Core.Native.DelegatePointerKind.Passthrough"/>
            may be used which will return a function pointer directly to the method instead of going through an
            unmanaged stub. The method represented by the delegate must be static, however.
            </param>
            <param name="pinned">
            Whether to pin the delegate such that the returned pointer remains valid for long periods of time.
            </param>
            <returns>A function pointer to the given delegate.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.DelegateToCdecl(System.Delegate,Silk.NET.Core.Native.DelegatePointerKind,System.Boolean,System.Boolean)">
            <summary>
            Gets a function pointer for the given delegate using the <c>__cdecl</c> calling convention.
            </summary>
            <param name="delegate">The delegate to get a function pointer to.</param>
            <param name="kind">
            The method by which SilkMarshal should retrieve the pointer. Should always be
            <see cref="F:Silk.NET.Core.Native.DelegatePointerKind.Stub"/> except in very rare edge cases.
            </param>
            <param name="pinned">
            Whether to pin the delegate such that the returned pointer remains valid for long periods of time.
            </param>
            <param name="ignoreValidityChecks">
            Whether to skip validity checks, such as calling convention mismatch checks. 
            </param>
            <returns>A function pointer to the given delegate.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.DelegateToStdcall(System.Delegate,Silk.NET.Core.Native.DelegatePointerKind,System.Boolean,System.Boolean)">
            <summary>
            Gets a function pointer for the given delegate using the <c>__stdcall</c> calling convention.
            </summary>
            <param name="delegate">The delegate to get a function pointer to.</param>
            <param name="kind">
            The method by which SilkMarshal should retrieve the pointer. Should always be
            <see cref="F:Silk.NET.Core.Native.DelegatePointerKind.Stub"/> except in very rare edge cases.
            </param>
            <param name="pinned">
            Whether to pin the delegate such that the returned pointer remains valid for long periods of time.
            </param>
            <param name="ignoreValidityChecks">
            Whether to skip validity checks, such as calling convention mismatch checks. 
            </param>
            <returns>A function pointer to the given delegate.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.DelegateToFastcall(System.Delegate,Silk.NET.Core.Native.DelegatePointerKind,System.Boolean,System.Boolean)">
            <summary>
            Gets a function pointer for the given delegate using the <c>__fastcall</c> calling convention.
            </summary>
            <param name="delegate">The delegate to get a function pointer to.</param>
            <param name="kind">
            The method by which SilkMarshal should retrieve the pointer. Should always be
            <see cref="F:Silk.NET.Core.Native.DelegatePointerKind.Stub"/> except in very rare edge cases.
            </param>
            <param name="pinned">
            Whether to pin the delegate such that the returned pointer remains valid for long periods of time.
            </param>
            <param name="ignoreValidityChecks">
            Whether to skip validity checks, such as calling convention mismatch checks. 
            </param>
            <returns>A function pointer to the given delegate.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.DelegateToThiscall(System.Delegate,Silk.NET.Core.Native.DelegatePointerKind,System.Boolean,System.Boolean)">
            <summary>
            Gets a function pointer for the given delegate using the <c>__thiscall</c> calling convention.
            </summary>
            <param name="delegate">The delegate to get a function pointer to.</param>
            <param name="kind">
            The method by which SilkMarshal should retrieve the pointer. Should always be
            <see cref="F:Silk.NET.Core.Native.DelegatePointerKind.Stub"/> except in very rare edge cases.
            </param>
            <param name="pinned">
            Whether to pin the delegate such that the returned pointer remains valid for long periods of time.
            </param>
            <param name="ignoreValidityChecks">
            Whether to skip validity checks, such as calling convention mismatch checks. 
            </param>
            <returns>A function pointer to the given delegate.</returns>
        </member>
        <member name="M:Silk.NET.Core.Native.SilkMarshal.ThrowHResult(System.Int32)">
            <summary>
            Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception"></see> object
            and throws if a match was found.
            </summary>
            <param name="hResult">The HRESULT to be converted.</param>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.QueryInterface(System.Guid*,System.Void**)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.QueryInterface(System.Guid*,System.Void*@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.QueryInterface(System.Guid@,System.Void**)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.QueryInterface(System.Guid@,System.Void*@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.AddRef">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.Release">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.GetBufferPointer">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3D10Blob.GetBufferSize">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.QueryInterface(System.Guid*,System.Void**)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.QueryInterface(System.Guid*,System.Void*@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.QueryInterface(System.Guid@,System.Void**)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.QueryInterface(System.Guid@,System.Void*@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.AddRef">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.Release">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.RegisterDestructionCallback(Silk.NET.Core.Native.PfnDestructionCallback,System.Void*,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.RegisterDestructionCallback(Silk.NET.Core.Native.PfnDestructionCallback,System.Void*,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.RegisterDestructionCallback``1(Silk.NET.Core.Native.PfnDestructionCallback,``0@,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.RegisterDestructionCallback``1(Silk.NET.Core.Native.PfnDestructionCallback,``0@,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DDestructionNotifier.UnregisterDestructionCallback(System.UInt32)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,System.Void*,System.Void**,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,System.Void*,System.Void**,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,System.Void*,System.Void*@,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,System.Void*,System.Void*@,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,``0@,System.Void**,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,``0@,System.Void**,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,``0@,System.Void*@,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte*,``0@,System.Void*@,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,System.Void*,System.Void**,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,System.Void*,System.Void**,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,System.Void*,System.Void*@,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,System.Void*,System.Void*@,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,``0@,System.Void**,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,``0@,System.Void**,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,``0@,System.Void*@,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.Byte@,``0@,System.Void*@,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.String,System.Void*,System.Void**,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.String,System.Void*,System.Void**,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.String,System.Void*,System.Void*@,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open(Silk.NET.Core.Native.D3DIncludeType,System.String,System.Void*,System.Void*@,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.String,``0@,System.Void**,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.String,``0@,System.Void**,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.String,``0@,System.Void*@,System.UInt32*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Open``1(Silk.NET.Core.Native.D3DIncludeType,System.String,``0@,System.Void*@,System.UInt32@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Close(System.Void*)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.ID3DInclude.Close``1(``0@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.IUnknown.QueryInterface(System.Guid*,System.Void**)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.IUnknown.QueryInterface(System.Guid*,System.Void*@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.IUnknown.QueryInterface(System.Guid@,System.Void**)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.IUnknown.QueryInterface(System.Guid@,System.Void*@)">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.IUnknown.AddRef">
            <summary>To be documented.</summary>
        </member>
        <member name="M:Silk.NET.Core.Native.IUnknown.Release">
            <summary>To be documented.</summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.Bool">
            <summary>A 4-byte Boolean value (true != 0, false = 0).</summary>
            <returns></returns>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.I1">
            <summary>A 1-byte signed integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.U1">
            <summary>A 1-byte unsigned integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.I2">
            <summary>A 2-byte signed integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.U2">
            <summary>A 2-byte unsigned integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.I4">
            <summary>A 4-byte signed integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.U4">
            <summary>A 4-byte unsigned integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.I8">
            <summary>An 8-byte signed integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.U8">
            <summary>An 8-byte unsigned integer.</summary>
            <remarks>When applied to Booleans (true != 0, false = 0)</remarks>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.R4">
            <summary>A 4-byte floating-point number.</summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.R8">
            <summary>An 8-byte floating-point number.</summary>
            <returns></returns>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.BStr">
            <summary>A Unicode character string that is a length-prefixed double byte.</summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.LPStr">
            <summary>A single byte, null-terminated ANSI character string. </summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.LPWStr">
            <summary>A 2-byte, null-terminated Unicode character string.</summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.LPTStr">
            <summary>A platform-dependent character string: ANSI on Windows 98, and Unicode on Windows NT and Windows XP.</summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.LPUTF8Str">
            <summary>A UTF8-encoded, null-terminated character string.</summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.SysInt">
            <summary>A platform-dependent, signed integer: 4 bytes on 32-bit, 8 bytes on 64-bit.</summary>
            <seealso cref="T:System.IntPtr" />
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.SysUInt">
            <summary>A platform-dependent, unsigned integer: 4 bytes on 32-bit Windows, 8 bytes on 64-bit Windows.</summary>
            <seealso cref="T:System.UIntPtr" />
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.AnsiBStr">
            <summary>An ANSI character string that is a length-prefixed single byte.</summary>
        </member>
        <member name="F:Silk.NET.Core.Native.UnmanagedType.VariantBool">
            <summary>A 2-byte, OLE-defined VARIANT_BOOL type (true = -1, false = 0).</summary>
        </member>
        <member name="T:Silk.NET.Core.Native.VkHandle">
            <summary>
                A handle to a Vulkan object.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Native.VkHandle.Handle">
            <summary>
            The actual value of the Vulkan handle.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Native.VkHandle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Silk.NET.Core.Native.VkHandle" /> struct.
            </summary>
            <param name="handle">
            The native Vulkan handle.
            This is NOT a pointer to a field containing the handle, this is the actual handle itself.
            </param>
        </member>
        <member name="T:Silk.NET.Core.Native.VkNonDispatchableHandle">
            <summary>
                A handle to a Vulkan object.
            </summary>
        </member>
        <member name="F:Silk.NET.Core.Native.VkNonDispatchableHandle.Handle">
            <summary>
            The actual value of the Vulkan handle.
            </summary>
        </member>
        <member name="M:Silk.NET.Core.Native.VkNonDispatchableHandle.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Silk.NET.Core.Native.VkNonDispatchableHandle" /> struct.
            </summary>
            <param name="handle">
            The native Vulkan handle.
            This is NOT a pointer to a field containing the handle, this is the actual handle itself.
            </param>
        </member>
    </members>
</doc>
