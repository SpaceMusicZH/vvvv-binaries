<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.Video.MediaFoundation</name>
    </assembly>
    <members>
        <member name="T:VL.Video.MediaFoundation.DeviceProvider">
            <summary>
            Provides access to the <see cref="T:SharpDX.Direct3D11.Device"/> used to initialize media foundation services.
            </summary>
        </member>
        <member name="T:VL.Video.MediaFoundation.TexturePool">
            <summary>
            Texture pooling mechanism used by the video player. Each texture gets wrapped in a video frame which allows to keep the texture alive through ref counting.
            </summary>
        </member>
        <member name="T:VL.Video.MediaFoundation.VideoCaptureDeviceEnum">
            <summary>
            Dynamic enum of available video input devices
            </summary>
        </member>
        <member name="T:VL.Video.MediaFoundation.CameraControlPropertyName">
            <summary>
            The list of camera property settings
            </summary>
        </member>
        <member name="T:VL.Video.MediaFoundation.CameraControlFlags">
            <summary>
            Is the setting automatic?
            </summary>
        </member>
        <member name="T:VL.Video.MediaFoundation.IAMCameraControl">
            <summary>
            The IAMCameraControl interface controls web camera settings such as zoom, pan, aperture adjustment,
            or shutter speed. To obtain this interface, cast a MediaSource.
            </summary>
        </member>
        <member name="M:VL.Video.MediaFoundation.IAMCameraControl.GetRange(VL.Video.MediaFoundation.CameraControlPropertyName,System.Int32@,System.Int32@,System.Int32@,System.Int32@,VL.Video.MediaFoundation.CameraControlFlags@)">
            <summary>
            Get the range and default value of a specified camera property.
            </summary>
            <param name="Property">The property to query.</param>
            <param name="pMin">The minimum value of the property.</param>
            <param name="pMax">The maximum value of the property.</param>
            <param name="pSteppingDelta">The step size for the property.</param>
            <param name="pDefault">The default value of the property. </param>
            <param name="pCapsFlags">Can it be controlled automatically or manually?</param>
        </member>
        <member name="M:VL.Video.MediaFoundation.IAMCameraControl.Set(VL.Video.MediaFoundation.CameraControlPropertyName,System.Int32,VL.Video.MediaFoundation.CameraControlFlags)">
            <summary>
            Set a specified property on the camera.
            </summary>
            <param name="Property">The property to set.</param>
            <param name="lValue">The new value of the property.</param>
            <param name="Flags">Control it manually or automatically.</param>
        </member>
        <member name="M:VL.Video.MediaFoundation.IAMCameraControl.Get(VL.Video.MediaFoundation.CameraControlPropertyName,System.Int32@,VL.Video.MediaFoundation.CameraControlFlags@)">
            <summary>
            Get the current setting of a camera property.
            </summary>
            <param name="Property">The property to retrieve.</param>
            <param name="lValue">The current value of the property.</param>
            <param name="Flags">Is it currently manual or automatic?.</param>
        </member>
        <member name="T:VL.Video.MediaFoundation.VideoProcAmpProperty">
            <summary>
            The list of video camera settings
            </summary>
        </member>
        <member name="T:VL.Video.MediaFoundation.VideoProcAmpFlags">
            <summary>
            The auto and manual flag
            </summary>
        </member>
        <member name="T:VL.Video.MediaFoundation.IAMVideoProcAmp">
            <summary>
            The IAMVideoProcAmp interface controls video camera settings such as brightness, contrast, hue,
            or saturation. To obtain this interface, cast the MediaSource.
            </summary>
        </member>
        <member name="M:VL.Video.MediaFoundation.IAMVideoProcAmp.GetRange(VL.Video.MediaFoundation.VideoProcAmpProperty,System.Int32@,System.Int32@,System.Int32@,System.Int32@,VL.Video.MediaFoundation.VideoProcAmpFlags@)">
            <summary>
            Get the range and default value of a camera property.
            </summary>
            <param name="Property">The property.</param>
            <param name="pMin">The min value.</param>
            <param name="pMax">The max value.</param>
            <param name="pSteppingDelta">The step size.</param>
            <param name="pDefault">The default value.</param>
            <param name="pCapsFlags">Shows if it can be controlled automatically and/or manually.</param>
        </member>
        <member name="M:VL.Video.MediaFoundation.IAMVideoProcAmp.Set(VL.Video.MediaFoundation.VideoProcAmpProperty,System.Int32,VL.Video.MediaFoundation.VideoProcAmpFlags)">
            <summary>
            Set a specified property on the camera.
            </summary>
            <param name="Property">The property to set.</param>
            <param name="lValue">The new value of the property.</param>
            <param name="Flags">The auto or manual setting.</param>
        </member>
        <member name="M:VL.Video.MediaFoundation.IAMVideoProcAmp.Get(VL.Video.MediaFoundation.VideoProcAmpProperty,System.Int32@,VL.Video.MediaFoundation.VideoProcAmpFlags@)">
            <summary>
            Get the current setting of a camera property.
            </summary>
            <param name="Property">The property to retrieve.</param>
            <param name="lValue">The current value of the property.</param>
            <param name="Flags">Is it manual or automatic?</param>
        </member>
        <member name="T:VL.Video.MediaFoundation.VideoFrame">
            <summary>
            Used to manage the lifetime of the native texture through ref counting.
            When the ref count goes to zero the internal texture usually goes back into a pool.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.Url">
            <summary>
            The URL of the media to play.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.Play">
            <summary>
            Set to true to start playback, false to pause playback.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.Rate">
            <summary>
            Gets or sets the rate at which the media is being played back.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.Volume">
            <summary>
            The audio volume.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.SourceBounds">
            <summary>
            The normalized source rectangle.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.BorderColor">
            <summary>
            The border color.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.TextureSize">
            <summary>
            The size of the output texture. Use zero to take the size from the video.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.Playing">
            <summary>
            Whether or not playback started.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.IsEnded">
            <summary>
            A Boolean which is true if the media contained in the element has finished playing.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.CurrentTime">
            <summary>
            The current playback time in seconds
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.Duration">
            <summary>
            The length of the element's media in seconds.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.NetworkState">
            <summary>
            The current state of the fetching of media over the network.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.ReadyState">
            <summary>
            The readiness state of the media.
            </summary>
        </member>
        <member name="P:VL.Video.MediaFoundation.VideoPlayer.ErrorCode">
            <summary>
            Gets the most recent error status.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.NetworkState.Empty">
            <summary>
            There is no data yet. Also, readyState is HaveNothing.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.NetworkState.Idle">
            <summary>
            HTMLMediaElement is active and has selected a resource, but is not using the network.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.NetworkState.Loading">
            <summary>
            The browser is downloading HTMLMediaElement data.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.NetworkState.NoSource">
            <summary>
            No HTMLMediaElement src found.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.ReadyState.HaveNothing">
            <summary>
            No information is available about the media resource.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.ReadyState.HaveMetadata">
            <summary>
            Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.ReadyState.HaveCurrentData">
            <summary>
            Data is available for the current playback position, but not enough to actually play more than one frame.
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.ReadyState.HaveFutureData">
            <summary>
            Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).
            </summary>
        </member>
        <member name="F:VL.Video.MediaFoundation.ReadyState.HaveEnoughData">
            <summary>
            Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.
            </summary>
        </member>
    </members>
</doc>
