[Category("Filter")]
[Summary("")]
shader ShiftRGB_TextureFX : FilterBase
{
    float Direction = 0.25f;
    float Shift = 0.1f;
    float Hue = 0.1f;

    // this method was present in beta ShiftRGB shader but not used anywhere
    // and i am not sure how it works
    float4 sm(float4 m[16],float i)
    {
        return float4(HSVtoRGB(float3(Hue,0,0)+ RGBtoHSV(lerp(m[floor(i)],m[ceil(i)],frac(i)).xyz)),1);
    }

    float4 ts(Texture2D tex2d, float2 uv, float2 offset)
    {
        float2 dir = sin((Direction + float2(0, .25)) * 2 * acos(-1));
        uv += dir * offset;
        float3 col = tex2d.SampleLevel(Sampler0, uv, 0).rgb;
        return float4(base.HSVtoRGB(float3(Hue,0,0) + base.RGBtoHSV(col)), 1);
    }

    float4 Filter(float4 tex0col)
    {
        float4 c = tex0col;
        float2 uv0 = streams.Texturing.TexCoord;
        /* 
        so in the original shader shift is multipled by a sampled control texture (tex1)
        i don't understand though how is it supposed not to entirely 'cancel'
        the whole effect if that texture isn't provided since we would basically multiply
        by zero then.

        unless in gamma empty texture sample resulted with white instead of black
        */
        float sh = Shift; // * InTex1().x;
        c.r = ts(Texture0, uv0, sh * .1).r;
        c.g = ts(Texture0, uv0, sh * 0).g;
        c.b = ts(Texture0, uv0, sh * -.1).b;
        c.rgb = HSVtoRGB(-float3(Hue,0,0) + RGBtoHSV(c.rgb));

        return c;
    }
};


