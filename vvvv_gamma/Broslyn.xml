<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Broslyn</name>
    </assembly>
    <members>
        <member name="T:Broslyn.CSharpCompilationCapture">
            <summary>
            Frontend class to capture the build of a project/solution that contains CSharp projects.
            </summary>
        </member>
        <member name="M:Broslyn.CSharpCompilationCapture.Build(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Build the specified project or solution to collect the CSharp compilations and allow to reconstruct in memory an inspect-able Roslyn workspace.
            </summary>
            <param name="projectFileOrSolution">The path to a project or solution.</param>
            <param name="configuration">The default configuration to build. Default: Debug.</param>
            <param name="platform">The default configuration to build. Default: Any CPU.</param>
            <param name="properties">Optional additional properties to pass to the build.</param>
            <returns>The result of the compilation capture. Use <see cref="P:Broslyn.CSharpCompilationCaptureResult.Workspace"/> to get an access to a Roslyn Workspace.</returns>
        </member>
        <member name="M:Broslyn.CSharpCompilationCapture.BuildBinLog(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Launch a dotnet msbuild /t:rebuild with the specified project and options
            </summary>
            <returns>The path to the binary log of msbuild.</returns>
        </member>
        <member name="M:Broslyn.CSharpCompilationCapture.GetCompilationOptionsAndFiles(Microsoft.CodeAnalysis.Project,Microsoft.Build.Logging.StructuredLogger.CompilerInvocation,System.Collections.Generic.List{System.String},Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments@)">
            <summary>
            Creates a Project and collect CSharp arguments from a compiler invocation.
            </summary>
        </member>
        <member name="M:Broslyn.CSharpCompilationCapture.GetOrCreateMetaDataReference(System.String)">
            <summary>
            Cache metadata references to avoid loading them between projects
            </summary>
        </member>
        <member name="M:Broslyn.CSharpCompilationCapture.ParseArguments(System.String)">
            <summary>
            Collect compiler arguments in a list from the specified string.
            </summary>
        </member>
        <member name="T:Broslyn.CSharpCompilationCaptureResult">
            <summary>
            Result of a CSharp compilation capture that provides access to a Roslyn Workspace to allow in memory inspection.
            </summary>
        </member>
        <member name="P:Broslyn.CSharpCompilationCaptureResult.Workspace">
            <summary>
            Gets the associated workspace.
            </summary>
        </member>
        <member name="M:Broslyn.CSharpCompilationCaptureResult.TryGetCommandLineArguments(Microsoft.CodeAnalysis.ProjectId,Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments@)">
            <summary>
            Tries to get the associated <see cref="T:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments"/> to the specified project id.
            </summary>
            <param name="projectId">The project id.</param>
            <param name="commandLineArguments">The output arguments if it was found.</param>
            <returns><c>true</c> if the project id has associated command line arguments.</returns>
        </member>
        <member name="M:Broslyn.CSharpCompilationCaptureResult.TryGetCommandLineArguments(Microsoft.CodeAnalysis.Project,Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments@)">
            <summary>
            Tries to get the associated <see cref="T:Microsoft.CodeAnalysis.CSharp.CSharpCommandLineArguments"/> to the specified project.
            </summary>
            <param name="project">The project</param>
            <param name="commandLineArguments">The output arguments if it was found.</param>
            <returns><c>true</c> if the project id has associated command line arguments.</returns>
        </member>
    </members>
</doc>
