// Bakeing SDF using ComputeShader from AMD TressFX : https://github.com/GPUOpen-Effects/TressFX/
// Copyright (c) 2019 Advanced Micro Devices, Inc. All rights reserved.

shader FuseSDFUtils
{
    RWStructuredBuffer<uint> SDFBuffer;

    float3 gridSize;
    float3 gridCenter;
    float3 cellCount;
    float cellSize;

    uint FloatFlip2(float fl)
    {
        uint f = asuint(fl);
        return (f << 1) | (f >> 31 ^ 0x00000001);		//Rotate sign bit to least significant and Flip sign bit so that (0 == negative)
    }

    uint IFloatFlip2(uint f2)
    {
        return (f2 >> 1) | (f2 << 31 ^ 0x80000000);
    }

    uint FloatFlip3(float fl)
    {
        uint f = asuint(fl);
        return (f << 1) | (f >> 31);		//Rotate sign bit to least significant
    }

    uint IFloatFlip3(uint f2)
    {
        return (f2 >> 1) | (f2 << 31);
    }

    // Get SDF cell index coordinates (x, y and z) from a point position in world space
    int3 GetSdfCoordinates(float3 positionInWorld)
    {
        float3 sdfPosition = (positionInWorld - gridCenter) / cellSize;
        
        int3 result;
        result.x = (int)sdfPosition.x;
        result.y = (int)sdfPosition.y;
        result.z = (int)sdfPosition.z;
        
        return result;
    }

    float3 GetSdfCellPosition(int3 gridPosition)
    {
        float3 cellCenter = float3(gridPosition.x, gridPosition.y, gridPosition.z) * cellSize;
        cellCenter += gridCenter.xyz;
        
        return cellCenter;
    }

    int GetSdfCellIndex(int3 gridPosition)
    {
        int cellsPerLine = cellCount.x;
        int cellsPerPlane = cellCount.x * cellCount.y;

        return cellsPerPlane*gridPosition.z + cellsPerLine*gridPosition.y + gridPosition.x;
    }

    float DistancePointToEdge(float3 p, float3 x0, float3 x1, out float3 n)
    {
        float3 x10 = x1 - x0;

        float t = dot(x1 - p, x10) / dot(x10, x10);
        t = max(0.0f, min(t, 1.0f));

        float3 a = p - (t*x0 + (1.0f - t)*x1);
        float d = length(a);
        n = a / (d + 1e-30f);

        return d;
    }

    // from Inigo Quilez
    // http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
    float dot2( float3 v ) { return dot(v,v); }
    float udTriangle( float3 p, float3 a, float3 b, float3 c )
    {
        float3 ba = b - a; float3 pa = p - a;
        float3 cb = c - b; float3 pb = p - b;
        float3 ac = a - c; float3 pc = p - c;
        float3 nor = cross( ba, ac );

        return sqrt(
            (sign(dot(cross(ba,nor),pa)) +
            sign(dot(cross(cb,nor),pb)) +
            sign(dot(cross(ac,nor),pc))<2.0)
            ?
            min( min(
            dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),
            dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),
            dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )
            :
            dot(nor,pa)*dot(nor,pa)/dot2(nor) );
    }


    // Check if p is in the positive or negative side of triangle (x0, x1, x2)
    // Positive side is where the normal vector of triangle ( (x1-x0) x (x2-x0) ) is pointing to.
    float SignedDistancePointToTriangle(float3 p, float3 x0, float3 x1, float3 x2)
    {
        float d = 0;
        float3 x02 = x0 - x2;
        float l0 = length(x02) + 1e-30f;
        x02 = x02 / l0;
        float3 x12 = x1 - x2;
        float l1 = dot(x12, x02);
        x12 = x12 - l1*x02;
        float l2 = length(x12) + 1e-30f;
        x12 = x12 / l2;
        float3 px2 = p - x2;

        float b = dot(x12, px2) / l2;
        float a = (dot(x02, px2) - l1*b) / l0;
        float c = 1 - a - b;

        // normal vector of triangle. Don't need to normalize this yet.
        float3 nTri = cross((x1 - x0), (x2 - x0));
        float3 n;

        float tol = 1e-8f;

        if (a >= -tol && b >= -tol && c >= -tol)
        {
            n = p - (a*x0 + b*x1 + c*x2);
            d = length(n);

            float3 n1 = n / d;
            float3 n2 = nTri / (length(nTri) + 1e-30f);		// if d == 0

            n = (d > 0) ? n1 : n2;
        }
        else
        {
            float3 n_12;
            float3 n_02;
            d = DistancePointToEdge(p, x0, x1, n);

            float d12 = DistancePointToEdge(p, x1, x2, n_12);
            float d02 = DistancePointToEdge(p, x0, x2, n_02);

            d = min(d, d12);
            d = min(d, d02);

            n = (d == d12) ? n_12 : n;
            n = (d == d02) ? n_02 : n;
        }

        d = (dot(p - x0, nTri) < 0.f) ? d : -d;

        return d;
    }

    // Check if p is in the positive or negative side of triangle (x0, x1, x2)
    // Positive side is where the normal vector of triangle ( (x1-x0) x (x2-x0) ) is pointing to.
    float SignedDistancePointToUDTriangle(float3 p, float3 x0, float3 x1, float3 x2)
    {
        // normal vector of triangle. Don't need to normalize this yet.
        float3 nTri = cross((x1 - x0), (x2 - x0));
        float3 n;

        float d = udTriangle(p, x0, x1, x2);

        d = (dot(p - x0, nTri) < 0.f) ? d : -d;

        return d;
    }
};