shader FuseCoreTransform : FuseCoreMath, FuseCommonTypes
{
	////////////////////////////////////////////////////////////////
	//
	//          Transformation Functions
	// 	
	////////////////////////////////////////////////////////////////

	// may need to take Stride coord system into account

	////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////
	//
	//          Helpers
	// 	
	////////////////////////////////////////////////////////////////
	float3 getPos(float4x4 m) { return float3(m._41,m._42,m._43); }
	float3 getScale(float4x4 m) { return float3(length(float3(m._11, m._12, m._13)), length(float3(m._21, m._22, m._23)), length(float3(m._31, m._32, m._33))); }
	float getMaxScale(float4x4 m){ return vmax(getScale(m)); }

	float4x4 identity4x4()
	{
		float4x4 m = {  1, 0, 0,  0, 
						0, 1, 0,  0, 
						0, 0, 1,  0, 
						0, 0, 0,  1  };
		return m;
	}

	float3x3 identity3x3()
	{
		float3x3 m = {  1, 0, 0,   
						0, 1, 0,   
						0, 0, 1, };
		return m;
	}

	float4x4 as4x4(float3x3 m)
	{
			float4x4 newM =	{m._11,  m._12,  m._13, 0, 
							 m._21,  m._22,  m._23, 0, 
							 m._31,  m._32,  m._33, 0, 
							 0,   	 0,    	0,  	1 };
			return newM;
	}

	float3x3 lookat(float3 dir,float3 up=float3(0,1,0)){float3 z=normalize(dir);float3 x=normalize(cross(up,z));float3 y=normalize(cross(z,x));return float3x3(x,y,z);} 

	float4x4 lookat4x4(float3 dir,float3 up=float3(0,1,0))
	{
		return as4x4(lookat(dir, up));
	}
	////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////
	//
	//          Transformations
	// 	
	////////////////////////////////////////////////////////////////


	// 2D rotation

	void pR(inout float2 p, float a) // demo style
	{
		p = cos(a)*p + sin(a)*float2(p.y, -p.x);
	}

	// Shortcut for 45-degrees rotation
	void pR45(inout float2 p) 
	{
		p = (p + float2(p.y, -p.x))*sqrt(0.5);
	}


	float2 r2d(float2 pt, float a)
	{
		a *= TWOPI; // convert to rotation units
		float x = cos(a) * pt.x + sin(a) * pt.y;
		float y = cos(a) * pt.y - sin(a) * pt.x;
		return float2(x,y);
	}


	//offset version
	float2 r2d(float2 pt, float2 o, float a)
	{
		a *= TWOPI; // convert to rotation units
		float x = cos(a) * (pt.x - o.x) + sin(a) * (pt.y - o.y) + o.x;
		float y = cos(a) * (pt.y - o.y) - sin(a) * (pt.x - o.x) + o.y;
		return float2(x,y);
	}


	float4x4 scaleM (float3 scale, float4x4 m)
	{
		m._11 *= scale.x;  m._21 *= scale.x;  m._31 *= scale.x; m._41 *= scale.x;
		m._12 *= scale.y;  m._22 *= scale.y;  m._32 *= scale.y; m._42 *= scale.y;
		m._13 *= scale.z;  m._23 *= scale.z;  m._33 *= scale.z; m._43 *= scale.z;
		return m;
	}

	float4x4 translateM (float3 pos,float4x4 m)
	{
		float4x4 mT = identity4x4();
		mT._41 = pos.x;
		mT._42 = pos.y;
		mT._43 = pos.z;
		return mul(mT, m);
	}


	float3x3 rot3x3(float pitch, float yaw, float roll)
	{
		float3 z=float3(-pitch,yaw,-roll)*acos(-1)*2;float3 x=cos(z),y=sin(z);
		return float3x3(
			x.y * x.z + y.x * y.y * y.z, -x.x * y.z,  y.x * x.y * y.z-y.y * x.z, 
			x.y * y.z - y.x * y.y * x.z,  x.x * x.z, -y.y * y.z - y.x * x.y * x.z,
			x.x * y.y, y.x, x.x * x.y
		);
	}

	float3x3 GetEulerMatrix(float3 angles)
    {
        float3 s, c;
        sincos(angles, s, c);

        return float3x3(
             c.y * c.z + s.x * s.y * s.z, c.z * s.x * s.y - c.y * s.z, c.x * s.y,
             c.x * s.z,                   c.x * c.z, -s.x,
            -c.z * s.y + c.y * s.x * s.z, c.y * c.z * s.x + s.y * s.z, c.x * c.y);
    }

	float3x3 rot3x3(float3 rotation)
	{
		float3 z=float3(-rotation.x,rotation.y,-rotation.z)*acos(-1)*2;float3 x=cos(z),y=sin(z);
		return float3x3(x.y*x.z+y.x*y.y*y.z,-x.x*y.z,y.x*x.y*y.z-y.y*x.z,x.y*y.z-y.x*y.y*x.z,x.x*x.z,-y.y*y.z-y.x*x.y*x.z,x.x*y.y,y.x,x.x*x.y);
	}

	float4x4 rot4x4(float pitch, float yaw, float roll)
	{
		return as4x4(rot3x3(pitch, yaw, roll));
	}

	float4x4 rot4x4(float3 rotation)
	{
		return as4x4(rot3x3(rotation));
	}


	float3 rX(float3 p, float a) 
	{
		a *= 6.2831854820251465; // convert to cycle
		float c,s;float3 q=p;
		c = cos(a); s = sin(a);
		p.y = c * q.y - s * q.z;
		p.z = s * q.y + c * q.z;
		return p;
	}

	float3 rY(float3 p, float a) 
	{
		a *= 6.2831854820251465; // convert to cycle
		float c,s;float3 q=p;
		c = cos(a); s = sin(a);
		p.x = c * q.x + s * q.z;
		p.z = -s * q.x + c * q.z;
		return p;
	}

	float3 rZ(float3 p, float a) 
	{
		a *= 6.2831854820251465; // convert to cycle
		float c,s;float3 q=p;
		c = cos(a); s = sin(a);
		p.x = c * q.x - s * q.y;
		p.y = s * q.x + c * q.y;
		return p;
	}

	float3 rCX(float3 p, float a,float3 ce) 
	{
		a *= 6.2831854820251465; // convert to cycle
		float c,s;float3 q=p-ce;
		c = cos(a); s = sin(a);
		p.y = c * q.y - s * q.z;
		p.z = s * q.y + c * q.z;
		return p+ce;
	}

	float3 rCY(float3 p, float a,float3 ce) 
	{
		a *= 6.2831854820251465; // convert to cycle
		float c,s;float3 q=p-ce;
		c = cos(a); s = sin(a);
		p.x = c * q.x + s * q.z;
		p.z = -s * q.x + c * q.z;
		return p+ce;
	}

	float3 rCZ(float3 p, float a,float3 ce) 
	{
		a *= 6.2831854820251465; // convert to cycle
		float c,s;float3 q=p-ce;
		c = cos(a); s = sin(a);
		p.x = c * q.x - s * q.y;
		p.y = s * q.x + c * q.y;
		return p+ce;
	}
	////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////
	//
	//          Quaternions
	// 	
	////////////////////////////////////////////////////////////////

	float4 invertQuat(float4 q)
	{ 
	  return float4(-q.x, -q.y, -q.z, q.w); 
	}

	float4 mulQuat(float4 q1, float4 q2)
	{
		return float4
		(
			q1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,
			q1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,
			q1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,
			q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
		);
	}

	float4 rotateVector( float4 quat, float4 vec ) {
		float4 qv = mulQuat( quat, vec );
		return mulQuat( qv, float4(-quat.x, -quat.y, -quat.z, quat.w) );
	}

	float3x3 qRot3x3(float4 q)
	{
		float3x3 m = identity3x3();
		m[0][0] = 1 - 2*q.y*q.y - 2*q.z*q.z;
		m[0][1] = 2*q.x*q.y + 2*q.w*q.z;
		m[0][2] = 2*q.x*q.z - 2*q.w*q.y;
		m[1][0] = 2*q.x*q.y - 2*q.w*q.z;
		m[1][1] = 1 - 2*q.x*q.x - 2*q.z*q.z;
		m[1][2] = 2*q.y*q.z + 2*q.w*q.x;
		m[2][0] = 2*q.x*q.z + 2*q.w*q.y;
		m[2][1] = 2*q.y*q.z - 2*q.w*q.x;
		m[2][2] = 1 - 2*q.x*q.x - 2*q.y*q.y;
		return m;
	}

	float4x4 qRot4x4(float4 q)
	{
		return as4x4(qRot3x3(q));
	}

	/// <summary>
	/// Interpolates between two quaternions, using spherical linear interpolation.
	/// </summary>
	/// <param name="a">Start quaternion.</param>
	/// <param name="b">End quaternion.</param>
	/// <param name="t">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
	float4 slerp (float4 a, float4 b, float t )
	{
		if ( t <= 0.0f )
		{
			return a;
		}

		if ( t >= 1.0f )
		{
			return b;
		}

		float coshalftheta = dot(a, b);
		//coshalftheta = std::min (1.0f, std::max (-1.0f, coshalftheta));
		float4 c = b;

		// Angle is greater than 180. We can negate the angle/quat to get the
		// shorter rotation to reach the same destination.
		if ( coshalftheta < 0.0f )
		{
			coshalftheta = -coshalftheta;
			c = -c;
		}

			if ( coshalftheta > 0.99f )
			{
			// Angle is tiny - save some computation by lerping instead.
					float4 r = lerp(a, c, t);
					return r;
			}

		float halftheta = acos(coshalftheta);
		float sintheta = sin(halftheta);

		return (sin((1.0f - t) * halftheta) * a + sin(t * halftheta) * c) / sin(halftheta);
	}


	// Converting these quaternion function inputs from radians to revolutions, as that is the standard usage in vvvv


	/// <summary>
	/// Creates a quaternion given a yaw, pitch, and roll value (angles in radians).
	/// </summary>
	/// <param name="yaw">The yaw of rotation in radians.</param>
	/// <param name="pitch">The pitch of rotation in radians.</param>
	/// <param name="roll">The roll of rotation in radians.</param>
	float4 CreateQuatRotationYawPitchRoll(float yaw, float pitch, float roll){
		//float halfRoll = roll * 0.5f;
		//float halfPitch = pitch * 0.5f;
		//float halfYaw = yaw * 0.5f;


		//radians to revolutions
		float halfRoll = roll * PI;
		float halfPitch = pitch * PI;
		float halfYaw = yaw * PI;
			
		float sinRoll = sin(halfRoll);
		float cosRoll = cos(halfRoll);
		float sinPitch = sin(halfPitch);
		float cosPitch = cos(halfPitch);
		float sinYaw = sin(halfYaw);
		float cosYaw = cos(halfYaw);

		float cosYawPitch = cosYaw * cosPitch;
		float sinYawPitch = sinYaw * sinPitch;

		return float4 (
			(cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll),
			(sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll),
			(cosYawPitch * sinRoll) - (sinYawPitch * cosRoll),
			(cosYawPitch * cosRoll) + (sinYawPitch * sinRoll)
		);
	}





	/// <summary>
	/// Creates a quaternion given a rotation and an axis.
	/// </summary>
	/// <param name="axis">The axis of rotation.</param>
	/// <param name="angle">The angle of rotation.</param>
	float4 CreateQuatRotationAxis(float3 axis, float angle)
	{
		float3 normalized = normalize(axis);
			
		//angle *= TWOPI; // radians to revolutions
		//float halfAngle = angle * 0.5f;
		float halfAngle = angle * PI;
		float sinHalf = sin(halfAngle);
		float cosHalf = cos(halfAngle);

		return float4(normalized * sinHalf, cosHalf);
	}

	/// <summary>
	/// This function calculates the unit quaternion that represents the rotation from the start orientation (start) to the end orientation (end).
	/// </summary>
	/// <param name="start">The start orientation.</param>
	/// <param name="end">The end orientation.</param>
	float4 CreateQuatFromVectors(float3 start, float3 end)
	{
		start = normalize(start);
		end = normalize(end);
		
		float d = dot(start, end);
		if (d > 1.0)
			d = 1.0;
		else if (d < -1.0)
			d = -1.0;
		
		float angle = acos(d);

		float3 axis = cross(start, end);
		axis = normalize(axis);
		
		float s = sin(angle / 2.0);
		float qw = cos(angle / 2.0);
		float3 q = axis * s;
		return float4(qw, q.x, q.y, q.z);
	}

	/// <summary>
	/// Creates a quaternion that rotates around the x-axis.
	/// </summary>
	/// <param name="angle">Angle of rotation in radians.</param>
	float4 CreateQuatRotationX(float angle)
	{
		//angle *= TWOPI; // radians to revolutions
		//float halfAngle = angle * 0.5f;
		float halfAngle = angle * PI;
		return(sin(halfAngle), 0.0f, 0.0f, cos(halfAngle));
	}

	/// <summary>
	/// Creates a quaternion that rotates around the y-axis.
	/// </summary>
	/// <param name="angle">Angle of rotation in radians.</param>
	float4 CreateQuatRotationY(float angle)
	{
		//angle *= TWOPI; // radians to revolutions
		//float halfAngle = angle * 0.5f;
		float halfAngle = angle * PI;
		return(0.0f, sin(halfAngle), 0.0f, cos(halfAngle));
	}

	/// <summary>
	/// Creates a quaternion that rotates around the z-axis.
	/// </summary>
	/// <param name="angle">Angle of rotation in radians.</param>
	float4 CreateQuatRotationZ(float angle)
	{
		//angle *= TWOPI; // radians to revolutions
		//float halfAngle = angle * 0.5f;
		float halfAngle = angle * PI;
		return(0.0f, 0.0f, sin(halfAngle), cos(halfAngle));
	}

	float4 axisAngle2Quat(float3 a, float r)
	{
		float4 res = 0;
		float sinr = sin( r*PI );
		float cosr = cos( r*PI );
		res.x = a.x * sinr;
		res.y = a.y * sinr;
		res.z = a.z * sinr;
		res.w = cosr;
		return res;
	}


	////////////////////////////////////////////////////////////////
	//
	//          Transformations w/ inverse
	// 	
	////////////////////////////////////////////////////////////////

	void TransformTSWithInverse(float3 translation, float3 scaling, out float4x4 m, out float4x4 im)
	{
		float3 inverseScaling = 1.0 / scaling;

		m = identity4x4();
		im = identity4x4();

		// scale rows
		m[0][0] = scaling.x;
		m[1][1] = scaling.y;
		m[2][2] = scaling.z;

		// set position
		m[3].xyz = translation.xyz;

		// inv position
		im[3].xyz = -translation.xyz * inverseScaling;

		// inv scale
		im[0][0] = inverseScaling.x;
		im[1][1] = inverseScaling.y;
		im[2][2] = inverseScaling.z;
	}

	void TransformTRWithInverse(float3 translation, float3 rotation, out float4x4 m, out float4x4 im)
	{
		im = identity4x4();

		// calc rotation
		m = rot4x4(rotation);
		float4x4 inverseRotation = transpose(m);

		// set position
		m[3].xyz = translation.xyz;

		// inv position
		im[3].xyz = -translation.xyz;

		// inv rotation
		im = mul(im, inverseRotation);
	}

	// quaternion rotation
	void TransformTRWithInverse(float3 translation, float4 rotation, out float4x4 m, out float4x4 im)
	{
		im = identity4x4();

		// calc rotation
		m = qRot4x4(rotation);
		float4x4 inverseRotation = transpose(m);

		// set position
		m[3].xyz = translation.xyz;

		// inv position
		im[3].xyz = -translation.xyz;

		// inv rotation
		im = mul(im, inverseRotation);
	}

	void TransformTRSWithInverse(float3 translation, float3 rotation, float3 scaling, out float4x4 m, out float4x4 im)
	{
		float3 inverseScaling = 1.0 / scaling;

		im = identity4x4();

		// calc rotation
		m = rot4x4(rotation);
		float4x4 inverseRotation = transpose(m);

		// scale rows
		m[0] *= scaling.x;
		m[1] *= scaling.y;
		m[2] *= scaling.z;

		// set position
		m[3].xyz = translation.xyz;

		// inv position
		im[3].xyz = -translation.xyz;

		// inv rotation
		im = mul(im, inverseRotation);

		// inv scale
		im._11_21_31_41 *= inverseScaling.x;
		im._12_22_32_42 *= inverseScaling.y;
		im._13_23_33_43 *= inverseScaling.z;
	}

	// quaternion rotation
	void TransformTRSWithInverse(float3 translation, float4 rotation, float3 scaling, out float4x4 m, out float4x4 im)
	{
		float3 inverseScaling = 1.0 / scaling;

		im = identity4x4();

		// calc rotation
		m = qRot4x4(rotation);
		float4x4 inverseRotation = transpose(m);

		// scale rows
		m[0] *= scaling.x;
		m[1] *= scaling.y;
		m[2] *= scaling.z;

		// set position
		m[3].xyz = translation.xyz;

		// inv position
		im[3].xyz = -translation.xyz;

		// inv rotation
		im = mul(im, inverseRotation);

		// inv scale
		im._11_21_31_41 *= inverseScaling.x;
		im._12_22_32_42 *= inverseScaling.y;
		im._13_23_33_43 *= inverseScaling.z;
	}

	// Invert 3D transformation matrix (not perspective). Adapted from graphics gems 2.
// Inverts upper left by calculating its determinant and multiplying it to the symmetric
// adjust matrix of each element. Finally deals with the translation by transforming the
// original translation using by the calculated inverse.
//https://github.com/erich666/GraphicsGems/blob/master/gemsii/inverse.c
float4x4 InverseTRSMatrix(float4x4 input)
{
    float4x4 output = (float4x4)0;

    //Fill output with cofactor
    output._m00 = input._m11 * input._m22 - input._m12 * input._m21;
    output._m10 = input._m12 * input._m20 - input._m10 * input._m22;
    output._m20 = input._m10 * input._m21 - input._m11 * input._m20;
    output._m01 = input._m02 * input._m21 - input._m01 * input._m22;
    output._m11 = input._m00 * input._m22 - input._m02 * input._m20;
    output._m21 = input._m01 * input._m20 - input._m00 * input._m21;
    output._m02 = input._m01 * input._m12 - input._m02 * input._m11;
    output._m12 = input._m02 * input._m10 - input._m00 * input._m12;
    output._m22 = input._m00 * input._m11 - input._m01 * input._m10;

    //Multiply by reciprocal determinant
    float det = determinant((float3x3)input);
    const bool degenerate = (det * det) < 1e-25 ; //Condition consistent with C++ InvertMatrix4x4_General3D()
    output *= degenerate ? 0.0f :  rcp(det) ;

    // Do the translation part
    output._m30_m31_m32 = -mul((float3x3)output, input._m30_m31_m32);
    output._m33 = degenerate ? 0.0f : 1.0f;

    return output;
}
};