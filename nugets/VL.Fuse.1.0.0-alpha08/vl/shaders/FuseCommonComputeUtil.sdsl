shader FuseCommonComputeUtil : ComputeShaderBase, FuseCoreTransform
{
    
    void WorldMatrix(float3 axisX, float3 axisY, float3 axisZ, float3 angles, float3 pivot, float3 scaling, float3 translation, out float4x4 m, out float4x4 im)
    {
        
        float3 inverseScaling = 1.0 / scaling;

        im = identity4x4();

        // calc rotation
        float3x3 rot3x3 = GetEulerMatrix(radians(angles));
        rot3x3 = mul(float3x3(axisX, axisY, axisZ), rot3x3);
        m = as4x4(rot3x3);

        float4x4 inverseRotation = transpose(m);

        // scale rows
        m[0] *= scaling.x;
        m[1] *= scaling.y;
        m[2] *= scaling.z;

        // set position
        translation -= mul(rot3x3, pivot);
        m[3].xyz = translation.xyz;

        // inv position
        im[3].xyz = -translation.xyz;
        
        // inv rotation
        im = mul(im, inverseRotation);

        // inv scale
        im._11_21_31_41 *= inverseScaling.x;
        im._12_22_32_42 *= inverseScaling.y;
        im._13_23_33_43 *= inverseScaling.z;
    }
}