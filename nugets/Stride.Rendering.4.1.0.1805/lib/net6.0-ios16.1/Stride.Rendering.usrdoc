F:Stride.Rendering.CameraCullingMode.None=No specific culling
F:Stride.Rendering.CameraCullingMode.Frustum=Skip all entities out of the camera frustum.
F:Stride.Rendering.ClearRendererFlags.ColorAndDepth=Clears both the Color and DepthStencil buffers
F:Stride.Rendering.ClearRendererFlags.ColorOnly=Clears only the Color buffer.
F:Stride.Rendering.ClearRendererFlags.DepthOnly=Clears only the DepthStencil buffer
P:Stride.Rendering.Compositing.ClearRenderer.ClearFlags=Flag indicating which buffers to clear.
P:Stride.Rendering.Compositing.ClearRenderer.Color=The color value to use when clearing the render targets
P:Stride.Rendering.Compositing.ClearRenderer.Depth=The depth value to use when clearing the depth buffer
P:Stride.Rendering.Compositing.ClearRenderer.Stencil=The stencil value to use when clearing the stencil buffer
P:Stride.Rendering.Compositing.ForceAspectRatioSceneRenderer.FixedAspectRatio=The aspect ratio used if Add Letterbox/Pillarbox is checked.
P:Stride.Rendering.Compositing.ForceAspectRatioSceneRenderer.ForceAspectRatio=If checked and the viewport will be modified to fit the aspect ratio of Default Back Buffer Width and Default Back Buffer Height and letterboxes/pillarboxes might be added.
P:Stride.Rendering.Images.AmbientOcclusion.NumberOfSamples=The number of pixels sampled to determine how occluded a point is. Higher values reduce noise, but affect performance. Use with "Blur count to find a balance between results and performance.
P:Stride.Rendering.Images.AmbientOcclusion.ParamProjScale=Scales the sample radius. In most cases, 1 (no scaling) produces the most accurate result.
P:Stride.Rendering.Images.AmbientOcclusion.ParamIntensity=The strength of the darkening effect in occluded areas
P:Stride.Rendering.Images.AmbientOcclusion.ParamBias=The angle at which Stride considers an area of geometry an occluder. At high values, only narrow joins and crevices are considered occluders.
P:Stride.Rendering.Images.AmbientOcclusion.ParamRadius=Use with "projection scale" to control the radius of the occlusion effect
P:Stride.Rendering.Images.AmbientOcclusion.NumberOfBounces=The number of times the ambient occlusion image is blurred. Higher numbers reduce noise, but can produce artifacts.
P:Stride.Rendering.Images.AmbientOcclusion.BlurScale=The blur radius in pixels
P:Stride.Rendering.Images.AmbientOcclusion.EdgeSharpness=How much the blur respects the depth differences of occluded areas. Lower numbers create more blur, but might blur unwanted areas (ie beyond occluded areas).
P:Stride.Rendering.Images.AmbientOcclusion.TempSize=The resolution the ambient occlusion is calculated at. The result is upscaled to the game resolution. Larger sizes produce better results but use more memory and affect performance.
P:Stride.Rendering.Images.FXAAEffect.Dither=The dithering type used (directly related to rendering style)
P:Stride.Rendering.Images.FXAAEffect.Quality=The quality of the FXAA (directly related to performance). From 0 to 5 with Medium dither, from 0 to 9 with Low dither and unavailable (should be 9) with no dither.
P:Stride.Rendering.Images.FXAAEffect.InputLuminanceInAlpha=Retrieve the luminance from the alpha channel of the input color. Otherwise, use the green component of the input color as an approximation of the luminance.
P:Stride.Rendering.Images.Afterimage.FadeOutSpeed=The factor specifying how much the persistence decreases at each frame (1 means infinite persistence, while 0 means no persistence at all)
P:Stride.Rendering.Images.Afterimage.Sensitivity=The sensitiveness of the retina to bright light. This affects the time needed to produce persistence effect.
P:Stride.Rendering.Images.Bloom.Radius=The range of the bloom effect around bright regions. Note that high values can affect performance
P:Stride.Rendering.Images.Bloom.Amount=The strength of the bloom effect
P:Stride.Rendering.Images.Bloom.SigmaRatio=The standard deviation used for the blur of the effect. This impact the fall-off of the bloom.
P:Stride.Rendering.Images.Bloom.Distortion=Apply vertical of horizontal distortion on the effect
P:Stride.Rendering.Images.Bloom.Afterimage=Simulate persistence effects of the light points (trails) on the next frames
P:Stride.Rendering.Images.Bloom.StableConvolution=Reverse FXAA and bloom and use a richer convolution kernel during blurring, reducing temporal shimmering
P:Stride.Rendering.Images.BrightFilter.Threshold=The value of the intensity threshold used to identify bright areas
P:Stride.Rendering.Images.BrightFilter.Color=Modulates bright areas with the provided color. It affects the color of sub-sequent bloom, light-streak effects.
P:Stride.Rendering.Images.FilmGrain.Amount=The strength of the effect
P:Stride.Rendering.Images.FilmGrain.GrainSize=The size of the grains (in pixels)
P:Stride.Rendering.Images.FilmGrain.Animate=When checked, the procedural pattern changes at each frame.
P:Stride.Rendering.Images.FilmGrain.LuminanceFactor=Specifies how strongly the original pixel luminance is affected by the grain pattern.
P:Stride.Rendering.Images.ToneMap.Operator=The method used to perform the HDR to LDR tone mapping
P:Stride.Rendering.Images.Vignetting.Amount=The strength of the effect
P:Stride.Rendering.Images.Vignetting.Radius=The radius of the vignette from the center of the screen. This value is relative to the size of the screen (1 => half screen, 0 => null radius).
P:Stride.Rendering.Images.Vignetting.Color=The color of the vignette.
F:Stride.Rendering.Images.BokehTechnique.CircularGaussian=Use circular Gaussian blur to render the bokehs. This technique produce circular bokehs. It is fast and cheap technique but not very realistic.
F:Stride.Rendering.Images.BokehTechnique.HexagonalMcIntosh=Use the McIntosh hexagonal blur to render the bokehs. This technique produce hexagonal bokehs
F:Stride.Rendering.Images.BokehTechnique.HexagonalTripleRhombi=Use a combination of 3 rhombi blurs to render the bokehs. This technique produce hexagonal bokehs
P:Stride.Rendering.Images.DepthOfField.MaxBokehSize=Specify the maximum size of the bokehs. This value is resolution-independent (proportional to the screen width in percentage).
P:Stride.Rendering.Images.DepthOfField.DOFAreas=Specify the area focused by the depth of field (eg. the not blurred area). It is expressed as distances from the camera: [nearStart, nearEnd, farStart, farEnd].
P:Stride.Rendering.Images.DepthOfField.QualityPreset=The quality of the effect where 0 represents the worst quality and 1 the best one. Note that increase the quality of the effect significantly increase the rendering time.
P:Stride.Rendering.Images.DepthOfField.Technique=Specify the technique used to calculate the bokehs. This influences both the shape of the bokehs and the performances of the effect.
P:Stride.Rendering.Images.DepthOfField.AutoFocus=If checked, the depth of field area is automatically adjusted to the pixel at the center of the screen.
P:Stride.Rendering.Images.GaussianBlur.Radius=The radius of the Gaussian in pixels
P:Stride.Rendering.Images.LensFlare.Amount=The strength of the effect
P:Stride.Rendering.Images.LensFlare.ColorAberrationStrength=The strength of the color aberrations along the streaks and halo
P:Stride.Rendering.Images.LensFlare.HaloFactor=Specifies the intensity of halo effect.
P:Stride.Rendering.Images.LightShafts.LightBufferDownsampleLevel=Lower values produce more precise volume buffer areas, but use more GPU
P:Stride.Rendering.Images.LightShafts.BoundingVolumeBufferDownsampleLevel=Lower values produce sharper light shafts, but use more GPU
P:Stride.Rendering.Images.LightStreak.Amount=The strength of the bleeding
P:Stride.Rendering.Images.LightStreak.StreakCount=The number of streaks emitted by each bright point
P:Stride.Rendering.Images.LightStreak.Attenuation=Specifies how fast the light attenuates along a streak. (0 for immediate attenuation, 1 for no attenuation)
P:Stride.Rendering.Images.LightStreak.Phase=The angle (rotation) of the star pattern
P:Stride.Rendering.Images.LightStreak.ColorAberrationStrength=The strength of the color aberrations visible along the streak
P:Stride.Rendering.Images.LightStreak.IsAnamorphic=Simulate the behavior of anamorphic camera lenses
P:Stride.Rendering.Images.LocalReflections.DepthResolution=Downscale the depth buffer to optimize raycast performance. Full gives better quality, but half improves performance. The default value is half.
P:Stride.Rendering.Images.LocalReflections.RayTracePassResolution=The raycast resolution. Full gives better quality, but half improves performance. The default value is half.
P:Stride.Rendering.Images.LocalReflections.MaxSteps=The maximum number of raycast steps allowed per pixel. Higher values produce better results, but worse performance. The default value is 60.
P:Stride.Rendering.Images.LocalReflections.BRDFBias=The reflection spread. Higher values provide finer, more mirror-like reflections. This setting has no effect on performance. The default value is 0.82.
P:Stride.Rendering.Images.LocalReflections.GlossinessThreshold=The amount of gloss a material must have to reflect the scene. For example, if this value is set to 0.4, only materials with a gloss map value of 0.4 or above reflect the scene. The default value is 0.55.
P:Stride.Rendering.Images.LocalReflections.WorldAntiSelfOcclusionBias=The offset of the raycast origin. Lower values produce more correct reflection placement, but produce more artefacts. We recommend values of 0.03 or lower. The default value is 0.01.
P:Stride.Rendering.Images.LocalReflections.ResolvePassResolution=The raycast resolution. Full gives better quality, but half improves performance. The default value is half.
P:Stride.Rendering.Images.LocalReflections.ResolveSamples=The number of rays used to resolve the reflection color. Higher values produce less noise, but worse performance. The default value is 4.
P:Stride.Rendering.Images.LocalReflections.ReduceHighlights=Reduces the brightness of particularly bright areas of reflections. Has no effect on performance.
P:Stride.Rendering.Images.LocalReflections.EdgeFadeFactor=The point at which the far edges of the reflection begin to fade. Has no effect on performance. The default value is 0.1.
P:Stride.Rendering.Images.LocalReflections.UseColorBufferMips=Downscale the input color buffer and uses blurred mipmaps when resolving the reflection color. Produces more realistic results by blurring distant parts of reflections in rough (low-gloss) materials. It also improves performance on most platforms but uses more memory.
P:Stride.Rendering.Images.LocalReflections.TemporalEffect=Enables the temporal pass. Reduces noise, but produces an animated "jittering" effect that's sometimes noticeable. If disabled, the properties below have no effect.
P:Stride.Rendering.Images.LocalReflections.TemporalScale=The intensity of the temporal effect. Lower values produce reflections faster, but more noise. The default value is 4.
P:Stride.Rendering.Images.LocalReflections.TemporalResponse=How quickly reflections blend between the reflection in the current frame and the history buffer. Lower values produce reflections faster, but with more jittering. If the camera in your game doesn't move much, we recommend values closer to 1. The default value is 0.9.
P:Stride.Rendering.Images.PostProcessingEffects.AmbientOcclusion=Darkens areas where light is occluded by opaque objects, such as corners and crevices
P:Stride.Rendering.Images.PostProcessingEffects.LocalReflections=Reflect the scene in glossy materials
P:Stride.Rendering.Images.PostProcessingEffects.DepthOfField=Accentuate regions of the image by blurring objects in the foreground or background
P:Stride.Rendering.Images.PostProcessingEffects.BrightFilter=The bright filter isn't an effect by itself; it extracts the brightest areas of the image and gives it to effects that use it (eg bloom, light streaks, lens flares).
P:Stride.Rendering.Images.PostProcessingEffects.Bloom=Bleed bright areas into surrounding areas
P:Stride.Rendering.Images.PostProcessingEffects.LightStreak=Bleed bright points along streaks
P:Stride.Rendering.Images.PostProcessingEffects.LensFlare=Simulate artifacts produced by the internal reflection or scattering of light within camera lenses
P:Stride.Rendering.Images.PostProcessingEffects.ColorTransforms=Perform a transformation onto the image colors
P:Stride.Rendering.Images.PostProcessingEffects.Antialiasing=Perform anti-aliasing filtering, smoothing the jagged edges of models
F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.Default=Renders the scene as usual.
F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.ShowScatteringObjects=Shows all scattering objects in white and all other objects in black.
F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.ShowMaterialIndex=Shows the material index of scattering objects as a color.
F:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.RenderMode.ShowScatteringWidth=Shows the width of the scattering kernel as a brightness value (High values will be wrapped around). Use this to debug if each material gets its own scattering width and doesn't fluctuate.
P:Stride.Rendering.SubsurfaceScattering.SubsurfaceScatteringBlur.FollowSurface=If active, the the light won't scatter across large depth differences. The depth falloff can be configured using "Depth falloff strength". Attention: Enabling this increases the performance hit of the effect.
P:Stride.Rendering.Materials.SubsurfaceScatteringRenderFeature.DeduplicateMaterialParameters=When enabled, SSS material parameters are deduplicated every frame and therefore more unique materials can be rendered at once but it comes at a CPU performance hit. The maximum number of unique SSS materials that can be rendered per frame is defined in SubsurfaceScatteringBlur (because it depends on the bit depth of the material index framebuffer).
P:Stride.Rendering.Materials.MaterialCelShadingLightRamp.RampTexture=The reference to the texture asset to use.
T:Stride.Rendering.Materials.ComputeColors.ColorVertexStreamDefinition=A color coming from a vertex stream.
P:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.Operator=The operation between the left (background) and the right (foreground) sub-nodes.
P:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.LeftChild=The map used for the left (background) node.
P:Stride.Rendering.Materials.ComputeColors.ComputeBinaryBase`1.RightChild=The map used for the right (foreground) node.
P:Stride.Rendering.Materials.ComputeColors.ComputeColor.PremultiplyAlpha=Pre-multiply the color values by the alpha value
P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.MixinReference=The shader used in this node. It should be a ComputeColor.
P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.Generics=The generics of the shader. There is no need to edit the list, it is automatically filled when the shader is loaded.
P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.CompositionNodes=The compositions of the shader where material nodes can be attached. There is no need to edit the list, it is automatically filled when the shader is loaded.
P:Stride.Rendering.Materials.ComputeColors.ComputeShaderClassBase`1.Members=The editables values of this shader. There is no need to edit the list, it is automatically filled when the shader is loaded.
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Enabled=If unchecked, ignore the texture value and use the fallback value instead
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Texture=The reference to the texture asset
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.TexcoordIndex=The coordinates used to sample the texture
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Sampler=The texture sampler
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Filtering=The texture filtering method
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.AddressModeU=How to wrap the texture along the U (horizontal) axis
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.AddressModeV=How to wrap the texture along the V (vertical) axis
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Scale=The scale to apply to the texture coordinates. Values lower than 1 zoom the texture in; values greater than 1 tile it.
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.Offset=The offset to apply to the model's texture coordinates
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureBase.UseRandomTextureCoordinates=Sample the input texture with random texture coordinates. This reduces tiling effects produced by high UV scales, but is costly.
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.Swizzle=The default value is `rgba`.
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureColor.FallbackValue=The fallback value used when no texture is set.
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureScalar.FallbackValue=The fallback value used when no texture is set.
P:Stride.Rendering.Materials.ComputeColors.ComputeTextureScalar.Channel=Selects the RGBA channel to sample from the texture.
P:Stride.Rendering.Materials.ComputeColors.ComputeValueBase`1.Value=The value.
P:Stride.Rendering.Materials.ComputeColors.ComputeVertexStreamScalar.Channel=Selects the RGBA channel to sample from the texture.
P:Stride.Rendering.Materials.ComputeColors.IndexedVertexStreamDefinition.Index=The index in the named stream
T:Stride.Rendering.Materials.ComputeColors.VertexUserStreamDefinition=A user defined stream.
P:Stride.Rendering.Materials.ComputeColors.VertexUserStreamDefinition.Name=Semantic name of the stream to read data from.
P:Stride.Rendering.Materials.MaterialHairLightAttenuationFunctionDirectional.Hardness=Defines the hardness of the transition from shadowed to unshadowed areas.
P:Stride.Rendering.Materials.MaterialHairLightAttenuationFunctionDirectional.BoundaryShift=Use this parameter to shift the boundary between lit and unlit areas in order to mitigate shadow mapping artifacts.
P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.DebugRenderPasses=Enables/disables color coding of each render pass. The opaque pixels get colored in red. The transparent back-face pixels get colored in green. The transparent front-face pixels get colored in blue.
P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.ShadingModel=The shading model to use for the hair shading. "Scheuermann approximation" offsers the best performance, but worst quality. "Scheuermann improved" offers better quality at slightly worse performance. "Kajiya-Kay shifted" offers the best quality at the lowest performance.
P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.HairDirectionFunction=This option depends on how the 3D model was authored. If your 3D model's tangent vectors are aligned with the direction of hair flow, select "Tangent". If the binormal/bitangent vectors are aligned with the hair flow instead, select "Bitangent".
P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.HairShadowingFunction=Defines whether to use traditional shadow mapping or subsurface scattering for shadowing the hair. Subsurface scattering makes the hair partially translucent, allowing light to pass through the hair mesh.
P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.LightAttenuationFunction=Additional light attenuation. Select "Directional" for attenuation based on the surface normals. Select "None" for no attenuation.
P:Stride.Rendering.Materials.MaterialDiffuseHairModelFeature.AlphaThreshold=Any alpha value above this value is considered opaque. ATTENTION: Make sure that the value defined in the specular hair shading model is the same as this one!
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.DebugRenderPasses=Enables/disables color coding of each render pass. The opaque pixels get colored in red. The transparent back-face pixels get colored in green. The transparent front-face pixels get colored in blue.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.ShadingModel=The shading model to use for the hair shading. "Scheuermann approximation" offsers the best performance, but worst quality. "Scheuermann improved" offers better quality at slightly worse performance. "Kajiya-Kay shifted" offers the best quality at the lowest performance.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularExponent1=You can use this parameter to control the size and hardness of the primary specular highlight.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularColor1=Even though the primary specular highlight is theoretically white, you can modify its color for artistic purposes.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularScale1=You can use this parameter to control the strength of the primary specular highlight.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularExponent2=You can use this parameter to control the size and hardness of the secondary specular highlight.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularColor2=The secondary specular highlight has a color that should depend on the hair color.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.SpecularScale2=You can use this parameter to control the strength of the secondary specular highlight.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.ScalesAngle=The highlights are shifted because of the angle of the hair scales. You can control this angle (real-life values are between 5~10 degrees) to vary the position of the highlights.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.ShiftNoiseScale=Use this to control how much the specular shift texture should shift the specular reflections.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.GlintsNoiseStrength=
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.AlphaThreshold=Any alpha value above this value is considered opaque. ATTENTION: Make sure that the value defined in the diffuse hair shading model is the same as this one!
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairSpecularHighlightsShiftNoise=This texture is used to shift the two specular highlights to break the uniform look of the hair.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairSecondarySpecularGlintsNoise=The texure that is multiplied with the secondary specular reflections to give them a sparkling look.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairDirectionFunction=This option depends on how the 3D model was authored. If your 3D model's tangent vectors are aligned with the direction of hair flow, select "Tangent". If the binormal/bitangent vectors are aligned with the hair flow instead, select "Bitangent".
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.HairShadowingFunction=Defines whether to use traditional shadow mapping or subsurface scattering for shadowing the hair. Subsurface scattering makes the hair partially translucent, allowing light to pass through the hair mesh.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.LightAttenuationFunction=Additional light attenuation. Select "Directional" for attenuation based on the surface normals. Select "None" for no attenuation.
P:Stride.Rendering.Materials.MaterialSpecularHairModelFeature.Environment=Specifies the function to use to calculate the environment DFG term in the micro-facet lighting equation. This defines how the material reflects specular cubemaps.
T:Stride.Rendering.Materials.MaterialHairShadowingFunctionScattering=Light will be scattered in the hair. You can control the scattering falloff with the "Extinction strength" parameter. Keep in mind that any shadow will create partial occlusion, even shadows cast from opaque objects onto the hair.
P:Stride.Rendering.Materials.MaterialHairShadowingFunctionScattering.ExtinctionStrength=Controls how strong the material absorbs the light. A higher value results in a "faster" falloff.
T:Stride.Rendering.Materials.MaterialHairShadowingFunctionShadowing=Shadows the hair using traditional shadow mapping. The hair will be treated as an opaque surface.
P:Stride.Rendering.Materials.MaterialAttributes.Tessellation=The method used for tessellation (subdividing model poligons to increase realism)
P:Stride.Rendering.Materials.MaterialAttributes.Displacement=The method used for displacement (altering vertex positions by adding offsets)
P:Stride.Rendering.Materials.MaterialAttributes.Surface=The method used to alter macrosurface aspects (eg perturbing the normals of the model)
P:Stride.Rendering.Materials.MaterialAttributes.MicroSurface=The method used to alter the material microsurface
P:Stride.Rendering.Materials.MaterialAttributes.Diffuse=The method used to determine the diffuse color of the material. The diffuse color is the essential (pure) color of the object without reflections.
P:Stride.Rendering.Materials.MaterialAttributes.DiffuseModel=The shading model used to render the diffuse color.
P:Stride.Rendering.Materials.MaterialAttributes.Specular=The method used to determine the specular color. This is the color produced by the reflection of a white light on the object.
P:Stride.Rendering.Materials.MaterialAttributes.SpecularModel=The shading model used to render the material specular color
P:Stride.Rendering.Materials.MaterialAttributes.Occlusion=The occlusion method. Occlusions modulate the ambient and direct lighting of the material to simulate shadows or cavity artifacts.
P:Stride.Rendering.Materials.MaterialAttributes.Emissive=The method used to determine the emissive color (the color emitted by the object)
P:Stride.Rendering.Materials.MaterialAttributes.Transparency=The method used to determine the transparency
P:Stride.Rendering.Materials.MaterialAttributes.Overrides=Override properties of the current material
P:Stride.Rendering.Materials.MaterialAttributes.CullMode=Cull some faces of the model depending on orientation
P:Stride.Rendering.Materials.MaterialAttributes.ClearCoat=Use clear-coat shading to simulate vehicle paint
P:Stride.Rendering.Materials.MaterialBlendLayer.Enabled=Take the layer into account; otherwise ignore it
P:Stride.Rendering.Materials.MaterialBlendLayer.Name=The name of the material layer
P:Stride.Rendering.Materials.MaterialBlendLayer.Material=The reference to the material asset to layer.
P:Stride.Rendering.Materials.MaterialBlendLayer.BlendMap=The blend map specifying how to blend the material with the previous layer.
P:Stride.Rendering.Materials.MaterialBlendLayer.Overrides=Can be used to override properties of the referenced material.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.LODDistance=The distance (in world units) at which the base paint layer transitions to the metal flake layer
P:Stride.Rendering.Materials.MaterialClearCoatFeature.BasePaintDiffuseMap=The diffuse map used by the base paint layer (the lowest layer). This determines the color of the layer.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.BasePaintGlossinessMap=The gloss map used by the base paint layer. For a coherent result, use the metal flake normal map as a mask.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.BasePaintGlossinessInvert=Inverts the gloss value (eg a value of 1.0 produces zero gloss instead of maximum). This effectively turns the gloss attribute into a roughness attribute
P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesDiffuseMap=The diffuse map used by the metal flakes layer (the layer above the base paint). For a coherent result, use a value close to the base paint value.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesGlossinessMap=The gloss map used by the metal flakes layer. For a coherent result, use the metal flakes normal map as a mask.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesGlossinessInvert=Inverts the gloss value (eg a value of 1.0 produces zero gloss instead of maximum). This effectively turns the gloss attribute into a roughness attribute.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesMetalnessMap=The metalness map used by the metal flakes layer. For best results, use high values.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesNormalMap=The normal map used by the metal flakes layer. This shapes the flake geometry. If the texture has a high UV scale, enable "Use random texture coordinates" below to reduce tiling effects.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakesScaleAndBias=Scale the XY by (2,2) and offset by (-1,-1). Required to unpack unsigned values of [0..1] to signed coordinates of [-1..+1].
P:Stride.Rendering.Materials.MaterialClearCoatFeature.MetalFlakeslIsXYNormal=Calculate the Z component of the normal vector from X and Y, assuming Z = sqrt(1 - x*x - y*y).
P:Stride.Rendering.Materials.MaterialClearCoatFeature.ClearCoatGlossinessMap=The gloss map used by the clear coat layer. Change this value to simulate different kinds of paint (eg matte).
P:Stride.Rendering.Materials.MaterialClearCoatFeature.ClearCoatGlossinessInvert=Inverts the gloss value (eg a value of 1.0 produces zero gloss instead of maximum). This effectively turns the gloss attribute into a roughness attribute.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.ClearCoatMetalnessMap=The metalness map used by the clear coat layer
P:Stride.Rendering.Materials.MaterialClearCoatFeature.OrangePeelNormalMap=The normal map used by the clear coat layer to create an "orange peel" effect. This reflects light in different angles, simulating paint imperfections whereby the texture appears bumpy, like the skin of an orange.
P:Stride.Rendering.Materials.MaterialClearCoatFeature.OrangePeelScaleAndBias=Scale the XY by (2,2) and offset by (-1,-1). Required to unpack unsigned values of [0..1] to signed coordinates of [-1..+1].
P:Stride.Rendering.Materials.MaterialClearCoatFeature.OrangePeelIsXYNormal=If there's no Z component in the texture, reconstruct it from the X and Y components. This assumes that Z = sqrt(1 - x*x - y*y) and that Z is always positive, so no normal vector can point to the back side of the surface. We recommend you enable this option, as Stride might remove the Z component when you compress normal maps.
P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.DisplacementMap=The map containing the displacement offsets to apply onto the model vertex positions.
P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.Intensity=The intensity factor of the displacement. This scales the offset introduced by displacement map.
P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.ScaleAndBias=Scale by (2,2,2) and bias by (-1,-1,-1) this displacement map.
P:Stride.Rendering.Materials.MaterialDisplacementMapFeature.Stage=The value indicating in which stage the displacement will occur.
P:Stride.Rendering.Materials.MaterialEmissiveMapFeature.EmissiveMap=The map specifying the color emitted by the material.
P:Stride.Rendering.Materials.MaterialEmissiveMapFeature.Intensity=The map specifying the intensity of the light emitted by the material. This scales the color value specified by emissive map.
P:Stride.Rendering.Materials.MaterialEmissiveMapFeature.UseAlpha=Use the emissive map alpha component as main alpha color for the material. Otherwise, use the diffuse alpha color.
P:Stride.Rendering.Materials.MaterialGlossinessMapFeature.Invert=Consider the map as a roughness map instead of a gloss map. A roughness value of 1.0 corresponds to a gloss value of 0.0 and vice-versa.
P:Stride.Rendering.Materials.MaterialMetalnessMapFeature.MetalnessMap=The map specifying the metalness of the material.
P:Stride.Rendering.Materials.MaterialNormalMapFeature.NormalMap=The normal map.
P:Stride.Rendering.Materials.MaterialNormalMapFeature.ScaleAndBias=Scale the XY by (2,2) and offset by (-1,-1). Required to unpack unsigned values of [0..1] to signed coordinates of [-1..+1].
P:Stride.Rendering.Materials.MaterialNormalMapFeature.IsXYNormal=If there's no Z component in the texture, reconstruct it from the X and Y components. This assumes that Z = sqrt(1 - x*x - y*y) and that Z is always positive, so no normal vector can point to the back side of the surface. We recommend you enable this option, as Stride might remove the Z component when you compress normal maps.
P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.AmbientOcclusionMap=The map specifying the ambient occlusion of the material. This modulates the amount of incoming ambient light to the material (0 => no ambient, 1 => full ambient). Ambient occlusions are generally used to produce coarse occlusions on the material (shadows, etc...). It is geometry related and thus ignores possible UV scale overrides.
P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.DirectLightingFactor=Specify how much the occlusion map should influence the direct lighting (non ambient lightings). Usually the occlusion maps are used only to affect ambient lighting, but using this parameter one can also have it partially affecting the direct lighting.
P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.CavityMap=The map specifying the cavity occlusions of the material. This modulates the amount of incoming direct (non-ambient) light to the material (0 => no light, 1 => full light). Cavity occlusions are generally used to produce fine grained artifacts on the material.
P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.DiffuseCavity=Specify the influence of the cavity map on the diffuse lighting (0 => no influence, 1 => full influence).
P:Stride.Rendering.Materials.MaterialOcclusionMapFeature.SpecularCavity=Specify the influence of the cavity map on the specular lighting (0 => no influence, 1 => full influence).
P:Stride.Rendering.Materials.MaterialOverrides.UVScale=The scales to apply on the layered material texture coordinates.
P:Stride.Rendering.Materials.MaterialSpecularMapFeature.SpecularMap=The map specifying the color of the specular reflection.
P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Fresnel=Specify the function to use to calculate the Fresnel component of the micro-facet lighting equation. This defines the amount of the incoming light that is reflected.
P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Visibility=Specify the function to use to calculate the visibility component of the micro-facet lighting equation.
P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.NormalDistribution=Specify the function to use to calculate the normal distribution in the micro-facet lighting equation. This defines how the normal is distributed.
P:Stride.Rendering.Materials.MaterialSpecularMicrofacetModelFeature.Environment=Specify the function to use to calculate the environment DFG term in the micro-facet lighting equation. This defines how the material reflects specular cubemaps.
P:Stride.Rendering.Materials.MaterialSpecularThinGlassModelFeature.RefractiveIndex=An additional factor that can be used to modulate original alpha of the material.
P:Stride.Rendering.Materials.MaterialTessellationBaseFeature.TriangleSize=The desired triangles' size in pixels. This drives the tessellation factor.
P:Stride.Rendering.Materials.MaterialTessellationBaseFeature.AdjacentEdgeAverage=Indicate if average should be performed on adjacent edges to prevent tessellation cracks.
P:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature.Alpha=The factor used to modulate alpha of the material. See documentation for more details.
P:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature.Tint=The tint color to apply on the material during the blend.
P:Stride.Rendering.Materials.MaterialTransparencyAdditiveFeature.DitheredShadows=Dither shadows cast by this object to simulate semi-transparent shadows, works best at higher PCF filtering levels.
P:Stride.Rendering.Materials.MaterialTransparencyBlendFeature.Alpha=An additional factor that can be used to modulate original alpha of the material.
P:Stride.Rendering.Materials.MaterialTransparencyBlendFeature.Tint=The tint color to apply on the material during the blend.
P:Stride.Rendering.Materials.MaterialTransparencyBlendFeature.DitheredShadows=Dither shadows cast by this object to simulate semi-transparent shadows, works best at higher PCF filtering levels.
P:Stride.Rendering.Materials.MaterialTransparencyCutoffFeature.Alpha=The alpha threshold of the cutoff. All alpha values above this threshold are considered as fully transparent. All alpha values under this threshold are considered as fully opaque.
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.ScatteringWidth=This parameter controls how far the light should scatter (in meters).
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.Translucency=This parameter controls how translucent the material is. "0.0" stands for no translucency and "1.0" stands for maximum translucency.
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.TranslucencyMap=This grayscale map controls how translucent different regions of the model are. A brighter value results in more, and a darker one in less scattering. For example the ears of a person should scatter more than the top of the head, because they are thinner and therefore light passes through them more easily. This texture is multiplied with the "Translucency" parameter.
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.ProfileFunction=The scattering profile to use during the forward render pass.
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringFeature.KernelFunction=The scattering kernel to use in the SSS post-process.
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringKernelSkin.Falloff=Attention: This parameter only affects the SSS post-process. If you want to change the shading, use a different scattering profile. This parameter defines the per-channel falloff of the gradients produced by the subsurface scattering events. It can be used to fine tune the color of the gradients.
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringKernelSkin.Strength=Attention: This parameter only affects the SSS post-process. If you want to change the shading, use a different scattering profile. This parameter specifies the how much of the diffuse light gets into the material, and thus gets modified by the SSS mechanism. It can be seen as a per-channel mix factor between the original image, and the SSS-filtered image.
P:Stride.Rendering.Materials.MaterialSubsurfaceScatteringScatteringProfileCustom.FalloffMap=Attention: This parameter only affects the SSS post-process. If you want to change the shading, use a different scattering profile. This parameter defines the per-channel falloff of the gradients produced by the subsurface scattering events. It can be used to fine tune the color of the gradients. Note: The alpha channel is ignored.
P:Stride.Rendering.Lights.ColorLightBase.Color=The color emitted by the light.
P:Stride.Rendering.Lights.DirectLightBase.Shadow=The settings of the light shadow
P:Stride.Rendering.Lights.LightDirectionalShadowMap.CascadeCount=The number of cascades for the shadows.
P:Stride.Rendering.Lights.LightDirectionalShadowMap.StabilizationMode=The technique used to stabilize the shadow map
P:Stride.Rendering.Lights.LightDirectionalShadowMap.ComputeTransmittance=Specifies if transmittance should be computed (necessary for hair and skin rendering).
P:Stride.Rendering.Lights.LightPoint.Radius=The radius range of the point light in scene units.
P:Stride.Rendering.Lights.LightShadowMap.Enabled=Display the shadow of the engendered by the light
P:Stride.Rendering.Lights.LightShadowMap.Filter=The type of filter to apply onto the shadow.
P:Stride.Rendering.Lights.LightShadowMap.Size=The size of texture to use for shadow mapping. Large textures produces better shadows edges but are much more costly.
P:Stride.Rendering.Lights.LightShadowMap.BiasParameters=Offset values to add during to the depth calculation process of the shadow map.
P:Stride.Rendering.Lights.LightShadowMap.Debug=Render the shadow map in debug mode
P:Stride.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.DepthBias=An absolute value to add to the calculated depth.
P:Stride.Rendering.Lights.LightShadowMap.ShadowMapBiasParameters.NormalOffsetScale=A factor specifying the offset to add to the calculated depth with respect to the surface normal.
P:Stride.Rendering.Lights.LightShadowMapFilterTypePcf.FilterSize=The size of the filter (size of the kernel).
F:Stride.Rendering.Lights.LightShadowMapStabilizationMode.None=No stabilization is performed.
P:Stride.Rendering.Lights.LightSpot.Range=The range of the spot light in scene units
P:Stride.Rendering.Lights.LightSpot.AngleInner=The angle of the main beam of the light spot.
P:Stride.Rendering.Lights.LightSpot.AngleOuter=The angle of secondary beam of the light spot
P:Stride.Rendering.Lights.LightSpot.ProjectiveTexture=The texture that is multiplied on top of the lighting result like a mask. Can be used like a cinema projector.
P:Stride.Rendering.Lights.LightSpot.UVScale=The scale to apply to the texture coordinates. Values lower than 1 zoom the texture in; values greater than 1 tile it.
P:Stride.Rendering.Lights.LightSpot.UVOffset=The offset to apply to the model's texture coordinates
P:Stride.Rendering.Lights.LightSpot.MipMapScale=Used to set how blurry the projected texture should be. 0 = full resolution, 1 = 1x1 pixel
F:Stride.Rendering.MaterialAssetKeys.UseParameters=Use the material parameters to generate effects
F:Stride.Rendering.MaterialAssetKeys.GenerateShader=Generate a shader even if the materials aren't attached to a mesh
P:Stride.Rendering.MaterialInstance.Material=The reference to the material asset to used for this material slot name.
P:Stride.Rendering.MaterialInstance.IsShadowCaster=Generate a shadow (when shadow maps are enabled)
F:Stride.Rendering.MeshKeys.UseParameters=Use the mesh parameters to generate effects
P:Stride.Rendering.ProceduralModels.CapsuleProceduralModel.Length=The length of the capsule. That is the distance between the center of two extremity spheres.
P:Stride.Rendering.ProceduralModels.CapsuleProceduralModel.Radius=The radius of the capsule.
P:Stride.Rendering.ProceduralModels.CapsuleProceduralModel.Tessellation=The tessellation of the capsule. That is the number of polygons composing it.
P:Stride.Rendering.ProceduralModels.ConeProceduralModel.Height=The height of the cone.
P:Stride.Rendering.ProceduralModels.ConeProceduralModel.Radius=The radius of the cone.
P:Stride.Rendering.ProceduralModels.ConeProceduralModel.Tessellation=The tessellation of the cone. That is the number of polygons composing it.
P:Stride.Rendering.ProceduralModels.CubeProceduralModel.Size=The size of the cube along the Ox, Oy and Oz axis.
P:Stride.Rendering.ProceduralModels.CylinderProceduralModel.Height=The height of the cylinder.
P:Stride.Rendering.ProceduralModels.CylinderProceduralModel.Radius=The radius of the cylinder.
P:Stride.Rendering.ProceduralModels.CylinderProceduralModel.Tessellation=The tessellation of the cylinder. That is the number of polygons composing it.
P:Stride.Rendering.ProceduralModels.GeoSphereProceduralModel.Radius=The radius of the geosphere.
P:Stride.Rendering.ProceduralModels.GeoSphereProceduralModel.Tessellation=The tessellation of the geophere. That is the number of polygons composing it.
P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.Size=The size of plane along the X/Y axis
P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.Tessellation=The tessellation of the plane along the X/Y axis. That is the number polygons the plane is made of.
P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.Normal=The direction of the normal of the plane. This changes the default orientation of the plane.
P:Stride.Rendering.ProceduralModels.PlaneProceduralModel.GenerateBackFace=Check this combo box to generate a back face to the plane
P:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase.UvScale=The scale to apply to the UV coordinates of the shape. This can be used to tile a texture on it.
P:Stride.Rendering.ProceduralModels.PrimitiveProceduralModelBase.MaterialInstance=The reference material asset to use with this model.
P:Stride.Rendering.ProceduralModels.SphereProceduralModel.Radius=The radius of the sphere.
P:Stride.Rendering.ProceduralModels.SphereProceduralModel.Tessellation=The tessellation of the sphere. That is the number of polygons composing it.
P:Stride.Rendering.ProceduralModels.TeapotProceduralModel.Size=The size of the teapot.
P:Stride.Rendering.ProceduralModels.TorusProceduralModel.Radius=The major radius of the torus.
P:Stride.Rendering.ProceduralModels.TorusProceduralModel.Tessellation=The tessellation of the torus. That is the number of polygons composing it.
P:Stride.Rendering.RendererCoreBase.Enabled=Enabled if checked, disabled otherwise
P:Stride.Rendering.RenderTextures.RenderTextureDescriptor.ColorSpace=Consider the texture an sRGB image. This should be the default for color textures with HDR/gamma-correct rendering.
F:Stride.Rendering.RenderTextures.RenderTextureFormat.LDR=The rendering target is a 32bits bits targets (4 x 16 bits half floats per RGBA component).
F:Stride.Rendering.RenderTextures.RenderTextureFormat.HDR=The rendering target is a floating point 64 bits targets (4 x 16 bits half floats per RGBA component).
F:Stride.Rendering.Sprites.SpriteBlend.None=No blending, the sprite is drawn as-is.
F:Stride.Rendering.Sprites.SpriteBlend.Auto=Use alpha blending if the sprite has transparent pixels, disable the blending otherwise.
F:Stride.Rendering.Sprites.SpriteBlend.AlphaBlend=Use the alpha component for blending the source and sprite.
F:Stride.Rendering.Sprites.SpriteBlend.AdditiveBlend=The sprite color is added to the source without using the alpha.
F:Stride.Rendering.Sprites.SpriteBlend.NoColor=Do not render the colors of the sprite. Renders only the depth to the stencil buffer.
P:Stride.Rendering.Sprites.SpriteFromSheet.Sheet=The sheet that provides the sprites
P:Stride.Rendering.Sprites.SpriteFromSheet.CurrentFrame=The index of the default frame of the sprite sheet to use.
P:Stride.Rendering.Sprites.SpriteFromTexture.Texture=Specify the texture to use as sprite
P:Stride.Rendering.Sprites.SpriteFromTexture.PixelsPerUnit=Specify the size in pixels of one unit in the scene.
P:Stride.Rendering.Sprites.SpriteFromTexture.Center=The position of the center of the sprite in pixels. Depending on the value of 'CenterFromMiddle', it is the offset from the top/left corner or the middle of the image.
P:Stride.Rendering.Sprites.SpriteFromTexture.CenterFromMiddle=If enabled, the value in Center represents the offset of the sprite center from the middle of the image
P:Stride.Rendering.Sprites.SpriteFromTexture.IsTransparent=Enable transparency in the sprite
P:Stride.Streaming.StreamingSettings.Enabled=Enable streaming
P:Stride.Streaming.StreamingSettings.ManagerUpdatesInterval=How frequently Stride updates the streaming. Smaller intervals mean the streaming system reacts faster, but use more CPU and cause more memory fluctuations.
P:Stride.Streaming.StreamingSettings.MaxResourcesPerUpdate=The maximum number of textures loaded or unloaded per streaming update. Higher numbers reduce pop-in but might slow down the framerate.
P:Stride.Streaming.StreamingSettings.ResourceLiveTimeout=How long resources stay loaded after they're no longer used (when the memory budget is exceeded)
P:Stride.Streaming.StreamingSettings.TargetedMemoryBudget=When the memory used by streaming exceeds this budget, Stride unloads unused textures. You can increase this to keep more textures loaded when you have memory to spare, and vice versa.
