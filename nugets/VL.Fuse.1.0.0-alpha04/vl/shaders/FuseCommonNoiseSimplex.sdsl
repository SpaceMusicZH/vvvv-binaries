shader FuseCommonNoiseSimplex : FuseCoreMathHash
{

	/*

	Remark about those offsets from the original author:
	
		People have different opinions on whether these offsets should be integers
		for the classic noise functions to match the spacing of the zeroes,
		so we have left that for you to decide for yourself.
		For most applications, the exact offsets don't really matter as long
		as they are not too small or too close to the noise lattice period
		(289 in this implementation).

	*/

		//                 Credits from source glsl file:
	//
	// Description : Array and textureless GLSL 2D/3D/4D simplex 
	//               noise functions.
	//      Author : Ian McEwan, Ashima Arts.
	//  Maintainer : ijm
	//     Lastmod : 20110822 (ijm)
	//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
	//               Distributed under the MIT License. See LICENSE file.
	//               https://github.com/ashima/webgl-noise
	//
	//
	//           The text from LICENSE file:
	//
	//
	// Copyright (C) 2011 by Ashima Arts (Simplex noise)
	// Copyright (C) 2011 by Stefan Gustavson (Classic noise)
	// 
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to deal
	// in the Software without restriction, including without limitation the rights
	// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	// copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	// 
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	// 
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	// THE SOFTWARE.

	// 1 / 289
	#define NOISE_SIMPLEX_1_DIV_289 0.00346020761245674740484429065744f

	float mod289(float x) {
		return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
	}

	float2 mod289(float2 x) {
		return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
	}

	float3 mod289(float3 x) {
		return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
	}

	float4 mod289(float4 x) {
		return x - floor(x * NOISE_SIMPLEX_1_DIV_289) * 289.0;
	}


	// ( x*34.0 + 1.0 )*x = 
	// x*x*34.0 + x


	// tried replacing with our hash functions, but the wrapping here has some special significance for Simplex noise
	float permute(float x) 
	{
		//return hash11(x);
		return mod289(x*x*34.0 + x);
	}

	float3 permute(float3 x) 
	{
		//return hash33(x);
		return mod289(x*x*34.0 + x
		);
	}

	float4 permute(float4 x) 
	{
		//return hash44(x);
		return mod289(x*x*34.0 + x);
	}



	float4 grad4(float j, float4 ip)
	{
		const float4 ones = float4(1.0, 1.0, 1.0, -1.0);
		float4 p, s;
		p.xyz = floor( frac(j * ip.xyz) * 7.0) * ip.z - 1.0;
		p.w = 1.5 - dot( abs(p.xyz), ones.xyz );
	
		// GLSL: lessThan(x, y) = x < y
		// HLSL: 1 - step(y, x) = x < y
		p.xyz -= sign(p.xyz) * (p.w < 0);
	
		return p;
	}


	// does not really make sense to do simplex in 1D-  will revert to value noise
	// 1D
	float simplexNoise (float v)
	{
		float i = floor(v);
		float f = frac(v);
		float u = f * f * (3.0 - 2.0 * f);
		float result = lerp(hash11(i + 0.0), hash11(i + 1.0), u);
		return result * 2.0 - 1.0;
	}

	// 2D
	float simplexNoise (float2 v)
	{
		const float4 C = float4(
			0.211324865405187, // (3.0-sqrt(3.0))/6.0
			0.366025403784439, // 0.5*(sqrt(3.0)-1.0)
		 -0.577350269189626, // -1.0 + 2.0 * C.x
			0.024390243902439  // 1.0 / 41.0
		);
	
		// First corner
		float2 i = floor( v + dot(v, C.yy) );
		float2 x0 = v - i + dot(i, C.xx);
	
		// Other corners
		// float2 i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
		// Lex-DRL: afaik, step() in GPU is faster than if(), so:
		// step(x, y) = x <= y
	
		// Actually, a simple conditional without branching is faster than that madness :)
		int2 i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
		float4 x12 = x0.xyxy + C.xxzz;
		x12.xy -= i1;
	
		// Permutations
		i = mod289(i); // Avoid truncation effects in permutation
		float3 p = permute(
			permute(
					i.y + float3(0.0, i1.y, 1.0 )
			) + i.x + float3(0.0, i1.x, 1.0 )
		);
	
		float3 m = max(
			0.5 - float3(
				dot(x0, x0),
				dot(x12.xy, x12.xy),
				dot(x12.zw, x12.zw)
			),
			0.0
		);
		m = m*m ;
		m = m*m ;
	
		// Gradients: 41 points uniformly over a line, mapped onto a diamond.
		// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
	
		float3 x = 2.0 * frac(p * C.www) - 1.0;
		float3 h = abs(x) - 0.5;
		float3 ox = floor(x + 0.5);
		float3 a0 = x - ox;

		// Normalise gradients implicitly by scaling m
		// Approximation of: m *= inversesqrt( a0*a0 + h*h );
		m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

		// Compute final noise value at P
		float3 g;
		g.x = a0.x * x0.x + h.x * x0.y;
		g.yz = a0.yz * x12.xz + h.yz * x12.yw;
		return 130.0 * dot(m, g);
	}

	// 3D
	float simplexNoise(float3 v)
	{
		const float2 C = float2(
			0.166666666666666667, // 1/6
			0.333333333333333333  // 1/3
		);
		const float4 D = float4(0.0, 0.5, 1.0, 2.0);
	
		// First corner
		float3 i = floor( v + dot(v, C.yyy) );
		float3 x0 = v - i + dot(i, C.xxx);
	
		// Other corners
		float3 g = step(x0.yzx, x0.xyz);
		float3 l = 1 - g;
		float3 i1 = min(g.xyz, l.zxy);
		float3 i2 = max(g.xyz, l.zxy);
	
		float3 x1 = x0 - i1 + C.xxx;
		float3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
		float3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
	
		// Permutations
		i = mod289(i);
		float4 p = permute(
			permute(
				permute(
						i.z + float4(0.0, i1.z, i2.z, 1.0 )
				) + i.y + float4(0.0, i1.y, i2.y, 1.0 )
			) 	+ i.x + float4(0.0, i1.x, i2.x, 1.0 )
		);
	
		// Gradients: 7x7 points over a square, mapped onto an octahedron.
		// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
		float n_ = 0.142857142857; // 1/7
		float3 ns = n_ * D.wyz - D.xzx;
	
		float4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)
	
		float4 x_ = floor(j * ns.z);
		float4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)
	
		float4 x = x_ *ns.x + ns.yyyy;
		float4 y = y_ *ns.x + ns.yyyy;
		float4 h = 1.0 - abs(x) - abs(y);
	
		float4 b0 = float4( x.xy, y.xy );
		float4 b1 = float4( x.zw, y.zw );
	
		//float4 s0 = float4(lessThan(b0,0.0))*2.0 - 1.0;
		//float4 s1 = float4(lessThan(b1,0.0))*2.0 - 1.0;
		float4 s0 = floor(b0)*2.0 + 1.0;
		float4 s1 = floor(b1)*2.0 + 1.0;
		float4 sh = -step(h, 0.0);
	
		float4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
		float4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
		float3 p0 = float3(a0.xy,h.x);
		float3 p1 = float3(a0.zw,h.y);
		float3 p2 = float3(a1.xy,h.z);
		float3 p3 = float3(a1.zw,h.w);
	
		//Normalise gradients
		float4 norm = rsqrt(float4(
			dot(p0, p0),
			dot(p1, p1),
			dot(p2, p2),
			dot(p3, p3)
		));
		p0 *= norm.x;
		p1 *= norm.y;
		p2 *= norm.z;
		p3 *= norm.w;
	
		// Mix final noise value
		float4 m = max(
			0.6 - float4(
				dot(x0, x0),
				dot(x1, x1),
				dot(x2, x2),
				dot(x3, x3)
			),
			0.0
		);
		m = m * m;
		return 42.0 * dot(
			m*m,
			float4(
				dot(p0, x0),
				dot(p1, x1),
				dot(p2, x2),
				dot(p3, x3)
			)
		);
	}

	// 4D
	float simplexNoise(float4 v)
	{
		const float4 C = float4(
			0.138196601125011, // (5 - sqrt(5))/20 G4
			0.276393202250021, // 2 * G4
			0.414589803375032, // 3 * G4
		 -0.447213595499958  // -1 + 4 * G4
		);

	// First corner
		float4 i = floor(
			v +
			dot(
				v,
				0.309016994374947451 // (sqrt(5) - 1) / 4
			)
		);
		float4 x0 = v - i + dot(i, C.xxxx);

	// Other corners

	// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)
		float4 i0;
		float3 isX = step( x0.yzw, x0.xxx );
		float3 isYZ = step( x0.zww, x0.yyz );
		i0.x = isX.x + isX.y + isX.z;
		i0.yzw = 1.0 - isX;
		i0.y += isYZ.x + isYZ.y;
		i0.zw += 1.0 - isYZ.xy;
		i0.z += isYZ.z;
		i0.w += 1.0 - isYZ.z;

		// i0 now contains the unique values 0,1,2,3 in each channel
		float4 i3 = saturate(i0);
		float4 i2 = saturate(i0-1.0);
		float4 i1 = saturate(i0-2.0);

		//	x0 = x0 - 0.0 + 0.0 * C.xxxx
		//	x1 = x0 - i1  + 1.0 * C.xxxx
		//	x2 = x0 - i2  + 2.0 * C.xxxx
		//	x3 = x0 - i3  + 3.0 * C.xxxx
		//	x4 = x0 - 1.0 + 4.0 * C.xxxx
		float4 x1 = x0 - i1 + C.xxxx;
		float4 x2 = x0 - i2 + C.yyyy;
		float4 x3 = x0 - i3 + C.zzzz;
		float4 x4 = x0 + C.wwww;

	// Permutations
		i = mod289(i); 
		float j0 = permute(
			permute(
				permute(
					permute(i.w) + i.z
				) + i.y
			) + i.x
		);
		float4 j1 = permute(
			permute(
				permute(
					permute (
						i.w + float4(i1.w, i2.w, i3.w, 1.0 )
					) + i.z + float4(i1.z, i2.z, i3.z, 1.0 )
				) + i.y + float4(i1.y, i2.y, i3.y, 1.0 )
			) + i.x + float4(i1.x, i2.x, i3.x, 1.0 )
		);

	// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope
	// 7*7*6 = 294, which is close to the ring size 17*17 = 289.
		const float4 ip = float4(
			0.003401360544217687075, // 1/294
			0.020408163265306122449, // 1/49
			0.142857142857142857143, // 1/7
			0.0
		);

		float4 p0 = grad4(j0, ip);
		float4 p1 = grad4(j1.x, ip);
		float4 p2 = grad4(j1.y, ip);
		float4 p3 = grad4(j1.z, ip);
		float4 p4 = grad4(j1.w, ip);

	// Normalise gradients
		float4 norm = rsqrt(float4(
			dot(p0, p0),
			dot(p1, p1),
			dot(p2, p2),
			dot(p3, p3)
		));
		p0 *= norm.x;
		p1 *= norm.y;
		p2 *= norm.z;
		p3 *= norm.w;
		p4 *= rsqrt( dot(p4, p4) );

	// Mix contributions from the five corners
		float3 m0 = max(
			0.6 - float3(
				dot(x0, x0),
				dot(x1, x1),
				dot(x2, x2)
			),
			0.0
		);
		float2 m1 = max(
			0.6 - float2(
				dot(x3, x3),
				dot(x4, x4)
			),
			0.0
		);
		m0 = m0 * m0;
		m1 = m1 * m1;
	
		return 49.0 * (
			dot(
				m0*m0,
				float3(
					dot(p0, x0),
					dot(p1, x1),
					dot(p2, x2)
				)
			) + dot(
				m1*m1,
				float2(
					dot(p3, x3),
					dot(p4, x4)
				)
			)
		);
	}


	// 3D with Gradient
	// return  noise (in x) and its derivatives (in yzw)
	float4 simplexNoiseGrad(float3 p)
	{
		#define SOMELARGEFLOATS float3( 635.298681, 682.357502, 668.926525 )
		#define ZINC float3( 48.500388, 65.294118, 63.934599 )
		const float SKEWFACTOR = 1.0/3.0;
		const float UNSKEWFACTOR = 1.0/6.0;
		const float SIMPLEX_CORNER_POS = 0.5;
		const float SIMPLEX_TETRAHADRON_HEIGHT = 0.70710678118654752440084436210485 ;  // sqrt( 0.5 )
	
		//  establish our grid cell.
		p *= SIMPLEX_TETRAHADRON_HEIGHT;    // scale space so we can have an approx feature size of 1.0
		float3 Pi = floor( p + dot( p, SKEWFACTOR) );

		//  Find the vectors to the corners of our simplex tetrahedron
		float3 x0 = p - Pi + dot(Pi, UNSKEWFACTOR);
		float3 g = step(x0.yzx, x0.xyz);
		float3 l = 1.0 - g;
		float3 Pi_1 = min( g.xyz, l.zxy );
		float3 Pi_2 = max( g.xyz, l.zxy );
		float3 x1 = x0 - Pi_1 + UNSKEWFACTOR;
		float3 x2 = x0 - Pi_2 + SKEWFACTOR;
		float3 x3 = x0 - SIMPLEX_CORNER_POS;

		//  pack them into a parallel-friendly arrangement
		float4 v1234_x = float4( x0.x, x1.x, x2.x, x3.x );
		float4 v1234_y = float4( x0.y, x1.y, x2.y, x3.y );
		float4 v1234_z = float4( x0.z, x1.z, x2.z, x3.z );

		// clamp the domain of our grid cell
		Pi.xyz = Pi.xyz - floor(Pi.xyz * ( 1.0 / 69.0 )) * 69.0;
		float3 Pi_inc1 = step(Pi, 69.0 - 1.5) * ( Pi + 1.0 );

		//  generate the random vectors
		float4 Pt = float4( Pi.xy, Pi_inc1.xy ) + float2( 50.0, 161.0 ).xyxy;
		Pt *= Pt;
		float4 V1xy_V2xy = lerp( Pt.xyxy, Pt.zwzw, float4( Pi_1.xy, Pi_2.xy ) );
		Pt = float4( Pt.x, V1xy_V2xy.xz, Pt.z ) * float4( Pt.y, V1xy_V2xy.yw, Pt.w );
		float3 lowz_mods = float3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi.zzz * ZINC.xyz ) );
		float3 highz_mods = float3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi_inc1.zzz * ZINC.xyz ) );
		Pi_1 = ( Pi_1.z < 0.5 ) ? lowz_mods : highz_mods;
		Pi_2 = ( Pi_2.z < 0.5 ) ? lowz_mods : highz_mods;
		float4 hash_0 = frac( Pt * float4( lowz_mods.x, Pi_1.x, Pi_2.x, highz_mods.x ) ) - 0.49999;
		float4 hash_1 = frac( Pt * float4( lowz_mods.y, Pi_1.y, Pi_2.y, highz_mods.y ) ) - 0.49999;
		float4 hash_2 = frac( Pt * float4( lowz_mods.z, Pi_1.z, Pi_2.z, highz_mods.z ) ) - 0.49999;

		//  normalize random gradient vectors
		float4 norm = rsqrt( hash_0 * hash_0 + hash_1 * hash_1 + hash_2 * hash_2 );
		hash_0 *= norm;
		hash_1 *= norm;
		hash_2 *= norm;

		//  evaluate gradients
		float4 grad_results = hash_0 * v1234_x + hash_1 * v1234_y + hash_2 * v1234_z;

		//  evaulate the kernel weights ( use (0.5-x*x)^3 instead of (0.6-x*x)^4 to fix discontinuities )
		float4 m = v1234_x * v1234_x + v1234_y * v1234_y + v1234_z * v1234_z;
		m = max(0.5 - m, 0.0);
		float4 m2 = m*m;
		float4 m3 = m*m2;

		//  calc the derivatives
		float4 temp = -6.0 * m2 * grad_results;
		float xderiv = dot( temp, v1234_x ) + dot( m3, hash_0 );
		float yderiv = dot( temp, v1234_y ) + dot( m3, hash_1 );
		float zderiv = dot( temp, v1234_z ) + dot( m3, hash_2 );

		//  Normalization factor to scale the final result to a strict 1.0->-1.0 range
		//  http://briansharpe.wordpress.com/2012/01/13/simplex-noise/#comment-36
		const float  FINAL_NORMALIZATION =  37.837227241611314102871574478976;

		//  sum and return all results as a float3
		return float4( dot( m3, grad_results ), xderiv, yderiv, zderiv ) * FINAL_NORMALIZATION;
	}

};