<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Csv</name>
    </assembly>
    <members>
        <member name="T:Csv.CsvLineSplitter">
            <summary>
            Splits a single line (multiline handling is done independently) into multiple parts
            </summary>
        </member>
        <member name="T:Csv.CsvOptions">
            <summary>
            Defines the options that can be passed to customize the reading or writing of csv files.
            </summary>
            <remarks>
            Do not reuse an instance of <see cref="T:Csv.CsvOptions"/> for multiple reads or writes.
            </remarks>
        </member>
        <member name="P:Csv.CsvOptions.RowsToSkip">
            <summary>
            Gets or sets the number of rows to skip before reading the header row, defaults to <c>0</c>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.SkipRow">
            <summary>
            Gets or sets a function to skip the current row based on its raw string value or 1-based index. Skips empty rows and rows starting with # by default.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.Separator">
            <summary>
             Gets or sets the character to use for separating data, defaults to <c>'\0'</c> which will auto-detect from the header row.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.TrimData">
            <summary>
            Gets or sets whether data should be trimmed when accessed, defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.Comparer">
            <summary>
            Gets or sets the comparer to use when looking up header names.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.HeaderMode">
            <summary>
             Gets or sets an indicator to the parser to expect a header row or not, defaults to <see cref="F:Csv.HeaderMode.HeaderPresent"/>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.ValidateColumnCount">
            <summary>
            Gets or sets whether a row should be validated immediately that the column count matches the header count, defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.ReturnEmptyForMissingColumn">
            <summary>
            Gets or sets whether an empty string is returned for a missing column, defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.Aliases">
            <summary>
            Can be used to use multiple names for a single column. (e.g. to allow "CategoryName", "Category Name", "Category-Name")
            </summary>
            <remarks>
            A group with no matches is ignored.
            </remarks>
        </member>
        <member name="P:Csv.CsvOptions.AllowNewLineInEnclosedFieldValues">
            <summary>
            Respects new line (either \r\n or \n) characters inside field values enclosed in double quotes, defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.AllowBackSlashToEscapeQuote">
            <summary>
            Allows the sequence <c>"\""</c> to be a valid quoted value (in addition to the standard <c>""""</c>), defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.AllowSingleQuoteToEncloseFieldValues">
            <summary>
            Allows the single-quote character to be used to enclose field values, defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Csv.CsvOptions.NewLine">
            <summary>
            The new line string to use when multiline field values are read, defaults to <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <remarks>
            Requires <see cref="P:Csv.CsvOptions.AllowNewLineInEnclosedFieldValues"/> to be set to <c>true</c> for this to have any effect.
            </remarks>
        </member>
        <member name="T:Csv.CsvReader">
            <summary>
            Helper class to read csv (comma separated values) data.
            </summary>
        </member>
        <member name="M:Csv.CsvReader.Read(System.IO.TextReader,Csv.CsvOptions)">
            <summary>
            Reads the lines from the reader.
            </summary>
            <param name="reader">The text reader to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:Csv.CsvReader.ReadFromStream(System.IO.Stream,Csv.CsvOptions)">
            <summary>
            Reads the lines from the stream.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:Csv.CsvReader.ReadFromText(System.String,Csv.CsvOptions)">
            <summary>
            Reads the lines from the csv string.
            </summary>
            <param name="csv">The csv string to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:Csv.CsvReader.ReadAsync(System.IO.TextReader,Csv.CsvOptions)">
            <summary>
            Reads the lines from the reader.
            </summary>
            <param name="reader">The text reader to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:Csv.CsvReader.ReadFromStreamAsync(System.IO.Stream,Csv.CsvOptions)">
            <summary>
            Reads the lines from the stream.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:Csv.CsvReader.ReadFromTextAsync(System.String,Csv.CsvOptions)">
            <summary>
            Reads the lines from the csv string.
            </summary>
            <param name="csv">The csv string to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:Csv.CsvReader.GetColumn``1(System.Collections.Generic.IEnumerable{Csv.ICsvLine},System.Int32,System.Func{System.String,``0})">
            <summary>
            Gets a single column from the entire Enumeration of `ICsvLine`
            </summary>
            <param name="lines">The enumeration of `ICsvLine`</param>
            <param name="columnNo">The index (starting from 0) of the the column 
            to extract</param>
            <param name="transform">The transformation function to parse 
            from the string values</param>
            <typeparam name="T">The datatype to transform 
            the string inputs into</typeparam>
            <returns>An enumeration of the transformed 
            values of the selected column</returns>
        </member>
        <member name="M:Csv.CsvReader.GetColumn(System.Collections.Generic.IEnumerable{Csv.ICsvLine},System.Int32)">
            <summary>
            Gets a single column from the entire Enumeration of `ICsvLine`
            </summary>
            <param name="lines">The enumeration of `ICsvLine`</param>
            <param name="columnNo">The index (starting from 0) of the the 
            column to extract</param>
            <returns>An enumerations of the string values of 
            the selected column</returns>
        </member>
        <member name="M:Csv.CsvReader.GetBlock(System.Collections.Generic.IEnumerable{Csv.ICsvLine},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a range/block of values from the given enumeration of `ICsvLine`
            </summary>
            <param name="lines">The enumeration of `ICsvLine`</param>
            <param name="row_start">The index(starting from 0) of the rows to start the capture of. 
            Default value is -1</param>
            <param name="row_length">The number of rows to capture from the start row. If the default value
             (or any negative number) is passed, selects all the rows till the end</param>
            <param name="col_start">The index(starting from 0) of all the columns to start the capture of.</param>
            <param name="col_length">The number of rows to capture from the start column. 
            If the default value (or any negative number) is passed, selects all the rows till the end</param>
            <returns></returns>
        </member>
        <member name="M:Csv.CsvReader.ReadFromMemory(System.ReadOnlyMemory{System.Char},Csv.CsvOptions)">
            <summary>
            Reads the lines from the csv string.
            </summary>
            <param name="csv">The csv string to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="T:Csv.CsvWriter">
            <summary>
            Helper class to write csv (comma separated values) data.
            </summary>
        </member>
        <member name="M:Csv.CsvWriter.Write(System.IO.TextWriter,System.String[],System.Collections.Generic.IEnumerable{System.String[]},System.Char,System.Boolean)">
            <summary>
            Writes the lines to the writer.
            </summary>
            <param name="writer">The text writer to write the data to.</param>
            <param name="headers">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="lines">The lines with data that should be written.</param>
            <param name="separator">The separator to use between columns (comma, semicolon, tab, ...)</param>
            <param name="skipHeaderRow">Indicate whether the header row should be skipped, defaults to <c>false</c>.</param>
        </member>
        <member name="M:Csv.CsvWriter.WriteToText(System.String[],System.Collections.Generic.IEnumerable{System.String[]},System.Char,System.Boolean)">
            <summary>
            Writes the lines and return the result.
            </summary>
            <param name="headers">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="lines">The lines with data that should be written.</param>
            <param name="separator">The separator to use between columns (comma, semicolon, tab, ...)</param>
            <param name="skipHeaderRow">Indicate whether the header row should be skipped, defaults to <c>false</c>.</param>
        </member>
        <member name="M:Csv.CsvWriter.WriteAsync(System.IO.TextWriter,System.String[],System.Collections.Generic.IAsyncEnumerable{System.String[]},System.Char,System.Boolean)">
            <summary>
            Writes the lines to the writer.
            </summary>
            <param name="writer">The text writer to write the data to.</param>
            <param name="headers">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="lines">The lines with data that should be written.</param>
            <param name="separator">The separator to use between columns (comma, semicolon, tab, ...)</param>
            <param name="skipHeaderRow">Indicate whether the header row should be skipped, defaults to <c>false</c>.</param>
        </member>
        <member name="M:Csv.CsvWriter.WriteToTextAsync(System.String[],System.Collections.Generic.IAsyncEnumerable{System.String[]},System.Char,System.Boolean)">
            <summary>
            Writes the lines and return the result.
            </summary>
            <param name="headers">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="lines">The lines with data that should be written.</param>
            <param name="separator">The separator to use between columns (comma, semicolon, tab, ...)</param>
            <param name="skipHeaderRow">Indicate whether the header row should be skipped, defaults to <c>false</c>.</param>
        </member>
        <member name="T:Csv.HeaderMode">
            <summary>
            Indicates the presence (default) or absence of a header row.
            </summary>
        </member>
        <member name="F:Csv.HeaderMode.HeaderPresent">
            <summary>
            Indicates that the CSV file has a header row. (Default)
            </summary>
        </member>
        <member name="F:Csv.HeaderMode.HeaderAbsent">
            <summary>
            Indicates that the CSV file does not have a header row.
            </summary>
        </member>
        <member name="T:Csv.ICsvLine">
            <summary>
            Represents a single data line inside a csv file.
            </summary>
        </member>
        <member name="P:Csv.ICsvLine.Headers">
            <summary>
            Gets the headers from the csv file.
            </summary>
        </member>
        <member name="P:Csv.ICsvLine.Values">
            <summary>
            Gets a list of values in string format for the current row.
            </summary>
        </member>
        <member name="P:Csv.ICsvLine.Raw">
            <summary>
            Gets the original raw content of the line.
            </summary>
        </member>
        <member name="P:Csv.ICsvLine.Index">
            <summary>
            Gets the 1-based index for the line inside the file.
            </summary>
        </member>
        <member name="P:Csv.ICsvLine.ColumnCount">
            <summary>
            Gets the number of columns of the line.
            </summary>
        </member>
        <member name="M:Csv.ICsvLine.HasColumn(System.String)">
            <summary>
            Indicates whether the specified <paramref name="name"/> exists.
            </summary>
        </member>
        <member name="P:Csv.ICsvLine.Item(System.String)">
            <summary>
            Gets the data for the specified named header.
            </summary>
            <param name="name">The name of the header.</param>
        </member>
        <member name="P:Csv.ICsvLine.Item(System.Int32)">
            <summary>
            Gets the data for the specified indexed header.
            </summary>
            <param name="index">The index of the header.</param>
        </member>
        <member name="T:Csv.ICsvLineFromMemory">
            <summary>
            Represents a single data line inside a csv file.
            </summary>
        </member>
        <member name="P:Csv.ICsvLineFromMemory.Headers">
            <summary>
            Gets the headers from the csv file.
            </summary>
        </member>
        <member name="P:Csv.ICsvLineFromMemory.Values">
            <summary>
            Gets a list of values in string format for the current row.
            </summary>
        </member>
        <member name="P:Csv.ICsvLineFromMemory.Raw">
            <summary>
            Gets the original raw content of the line.
            </summary>
        </member>
        <member name="P:Csv.ICsvLineFromMemory.Index">
            <summary>
            Gets the 1-based index for the line inside the file.
            </summary>
        </member>
        <member name="P:Csv.ICsvLineFromMemory.ColumnCount">
            <summary>
            Gets the number of columns of the line.
            </summary>
        </member>
        <member name="M:Csv.ICsvLineFromMemory.HasColumn(System.String)">
            <summary>
            Indicates whether the specified <paramref name="name"/> exists.
            </summary>
        </member>
        <member name="P:Csv.ICsvLineFromMemory.Item(System.String)">
            <summary>
            Gets the data for the specified named header.
            </summary>
            <param name="name">The name of the header.</param>
        </member>
        <member name="P:Csv.ICsvLineFromMemory.Item(System.Int32)">
            <summary>
            Gets the data for the specified indexed header.
            </summary>
            <param name="index">The index of the header.</param>
        </member>
        <member name="T:Csv.StringHelpers">
            <summary>
            Extension methods for <see cref="T:System.ReadOnlyMemory`1"/> to handle common string operations.
            </summary>
        </member>
        <member name="M:Csv.StringHelpers.StartsWith(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Checks whether <paramref name="str" /> starts with <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Csv.StringHelpers.EndsWith(System.ReadOnlyMemory{System.Char},System.String)">
            <summary>
            Checks whether <paramref name="str" /> ends with <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Csv.StringHelpers.AsString(System.ReadOnlyMemory{System.Char})">
            <summary>
            Gets a <see cref="T:System.String"/> value for <paramref name="str"/>.
            </summary>
        </member>
    </members>
</doc>
